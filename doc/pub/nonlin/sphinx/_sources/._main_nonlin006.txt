.. !split

.. _nonlin:splitting:

Operator splitting methods
==========================

Operator splitting is a natural and old idea. When a PDE or system of PDEs
contains different terms expressing different physics, it is natural to
use different numerical methods for different physical processes. This can
optimize and simplify the overall solution process. The idea was
especially popularized in the context of the Navier-Stokes equations
and reaction-diffusion PDEs. Common names for the technique are *operator
splitting*, *fractional step* methods, and *split-step* methods. We shall
stick to the former name.
In the context of nonlinear differential equations, operator splitting
can be used to isolate nonlinear terms and simplify the solution methods.

A related technique, often known as dimensional splitting or
alternating direction implicit (ADI) methods, is to split the spatial
dimensions and solve a 2D or 3D problem as two or three
consecutive 1D problems, but this type of splitting
is not to be further considered here.

.. _nonlin:splitting:ODE:

Ordinary operator splitting for ODEs
------------------------------------

.. index:: operator splitting

.. index:: splitting ODEs

.. index:: fractional step methods

Consider first an ODE where the right-hand side is split into two
terms:

.. _Eq:_auto32:

.. math::

    \tag{71}
    u' = f_0(u) + f_1(u){\thinspace .}
        
        

In case :math:`f_0` and :math:`f_1` are linear functions of :math:`u`, :math:`f_0=au` and :math:`f_1=bu`,
we have :math:`u(t)=Ie^{(a+b)t}`, if :math:`u(0)=I`.
When going one time step of length :math:`\Delta t` from :math:`t_n` to :math:`t_{n+1}`, we have

.. math::
         u(t_{n+1}) = u(t_n)e^{(a+b)\Delta t}{\thinspace .}

This expression can be also be written as

.. math::
         u(t_{n+1}) = u(t_n)e^{a\Delta t}e^{b\Delta t},

or

.. _Eq:nonlin:splitting:ODE:step1:

.. math::

    \tag{72}
    u^* = u(t_n)e^{a\Delta t},
        
        

.. _Eq:nonlin:splitting:ODE:step2:

.. math::

    \tag{73}
    u(t_{n+1}) = u^*e^{b\Delta t}
        
        

The first step :ref:`(72) <Eq:nonlin:splitting:ODE:step1>` means solving
:math:`u'=f_0` over a time interval :math:`\Delta t` with :math:`u(t_n)` as start value.
The second step :ref:`(73) <Eq:nonlin:splitting:ODE:step2>` means solving
:math:`u'=f_1` over a time interval :math:`\Delta t` with the value at the end
of the first step as start value.
That is, we progress the solution in two steps and solve
two ODEs :math:`u'=f_1` ad :math:`u'=f_2`. The order of the equations is not
important. From the derivation above we see that solving :math:`u'=f_1`
prior to :math:`u'=f_0` can equally well be done.

The technique is exact if the ODEs are linear. For nonlinear ODEs it is
only an approximate method with error :math:`\Delta t`. The technique can
be extended to :math:`n+1` steps:

.. math::
         u' = \sum_{i=0}^n f_i(u),

which is solved by :math:`n+1` steps over :math:`[t_n, t_{n+1}]`:

.. math::
        
        \frac{du^{(0)}}{dt} &= f_0(u^{(0)}),\quad u^{(0)}(t_n)=u(t_n),\\ 
        \frac{du^{(i)}}{dt} &= f_i(u^{(i)}),\quad u^{(i)}(t_n)=u^{(i-1)}(t_{n+1}),\\ 
        

for :math:`i=1,\ldots,n`. We take the final solution
:math:`u(t_{n+1})` as :math:`u^{(n)}(t_{n+1})`.

.. _nonlin:splitting:ODE_Strang:

Strang splitting for ODEs
-------------------------

.. index:: Strang splitting

The accuracy of the splitting method in the section :ref:`nonlin:splitting:ODE`
can be improved from :math:`{\mathcal{O}(\Delta t)}` to :math:`{\mathcal{O}(\Delta t^2)}` using so-called
*Strang splitting*, where we take half a step with the :math:`f_1` operator,
a full step with the :math:`f_2` operator, and finally half another step with
the :math:`f_1` operator. During a time interval :math:`\Delta t` the algorithm can
be written as follows.

.. math::
        
        \frac{du^{(0)}}{dt} &= f_0(u^{(0)}),\quad u^{(0)}(t_n)=u(t_n),
        \quad t\in [0,\frac{1}{2}\Delta t],\\ 
        \frac{du^{(\frac{1}{2})}}{dt} &= f_1(u^{(\frac{1}{2})}),\quad u^{(\frac{1}{2})}(t_n)=u^{(0)}(t_{n+\frac{1}{2}}),
        \quad t\in [0,\Delta t],\\ 
        \frac{du^{(1)}}{dt} &= f_0(u^{(1)}),\quad u^{(1)}(t_n)=u^{(\frac{1}{2})}(t_{n+1})
        {\thinspace .}\\ 
        

There is no use in applying higher-order methods when performing
ordinary splitting since the error due to splitting is :math:`\Oof{\Delta
t}`, but for Strang splitting it makes sense to use schemes of order
:math:`{\mathcal{O}(\Delta t^2)}`.

Example: Logistic growth
------------------------

Let us split the (scaled) logistic equation

.. math::
         u'=u(1-u),\quad u'(0)=0.1,

with solution :math:`u=(9e^{-t}+1)^{-1}`, into

.. math::
         u'=u - u^2 = f_0(u) + f_1(u), \quad f_0(u)=u,\quad f_1(u)=-u^2{\thinspace .}

We solve :math:`u'=f_0(u)` and :math:`u'=f_2(u)` by a Forward Euler step.
In addition, we add a method where we solve :math:`u'=f_0(u)` analytically,
since the equation is actually :math:`u'=u` with solution :math:`e^t`.

The following function computes four solutions arising from the Forward
Euler method, ordinary splitting, Strang splitting, as well as Strang splitting
with exact treatment of :math:`u'=f_0(u)`:

.. code-block:: python

    import numpy as np
    
    def solver(dt, T, f, f_0, f_1):
        """
        Solve u'=f by the Forward Euler method and by ordinary and
        Strang splitting: f(u) = f_1(u) + f_2(u).
        """
        Nt = int(round(T/float(dt)))
        t = np.linspace(0, Nt*dt, Nt+1)
        u_FE = np.zeros(len(t))
        u_split1 = np.zeros(len(t))  # 1st-order splitting
        u_split2 = np.zeros(len(t))  # 2nd-order splitting
        u_split3 = np.zeros(len(t))  # 2nd-order splitting w/exact f_0
    
        # Set initial values
        u_FE[0] = 0.1
        u_split1[0] = 0.1
        u_split2[0] = 0.1
        u_split3[0] = 0.1
    
        for n in range(len(t)-1):
            # Forward Euler method
            u_FE[n+1] = u_FE[n] + dt*f(u_FE[n])
    
            # Ordinary splitting
            u_0 = u_split1[n] + dt*f_0(u_split1[n])
            u_split1[n+1] = u_0 + dt*f_1(u_0)
    
            # Strang splitting
            u_0 = u_split2[n] + dt/2.*f_0(u_split2[n])
            u_1 = u_0 + dt*f_1(u_0)
            u_split2[n+1] = u_1 + dt/2.*f_0(u_1)
    
            # Strang splitting using exact integrator for u'=f_0
            u_0 = u_split3[n]*np.exp(dt/2.)  # exact
            u_1 = u_0 + dt*f_1(u_0)
            u_split3[n+1] = u_1*np.exp(dt/2.)
    
        return u_FE, u_split1, u_split2, u_split3, t

Figure :ref:`nonlin:splitting:ODE:logistic:fig` shows that the impact
of splitting is significant. The Forward Euler method is much more accurate
than any of the splitting schemes. We also see that Strang splitting is
definitely more accurate than ordinary splitting and that it helps a bit
to use an exact solution of :math:`u'=f_0(u)`. As technique for solving
nonlinear ODEs, we realize that the present example is not particularly
illustrating, as the Forward Euler method both linearizes the original
problem and provides a solution that is more accurate than the splitting.

.. _nonlin:splitting:ODE:logistic:fig:

.. figure:: split_logistic.png
   :width: 800

   *Effect of ordinary and Strang splitting for the logistic equation*

Reaction-diffusion equation
---------------------------

Consider a diffusion equation coupled to chemical reactions modeled by
a nonlinear term :math:`f(u)`:

.. math::
         \frac{\partial u}{\partial t} = {\alpha}\nabla^2 + f(u){\thinspace .}

