.. !split

.. mech systems: horizontal, vertical/hanging

.. box with mu*M*g*v/|v| friction force, treat nonlinearity with geometric mean

.. pendulum

.. elastic pendulum

.. bouncing ball (just move text from exercise)

.. bumpy road

.. moored ship

.. electrical circuits, see ode2.p.tex

.. 0D blood flow?

.. waves: 1D blood flow

.. general particle laws and velocity verlet, make exercises

.. see `<http://en.wikipedia.org/wiki/Velocity_Verlet>`_

.. _vib:app:

Applications of vibration models
================================

The following text derives some of the most well-known physical problems
that lead to
second-order ODE models of the type addressed in this book.
We consider a simple spring-mass system; thereafter extended with
nonlinear spring, damping, and external excitation; a spring-mass system
with sliding friction; a simple and a physical (classical) pendulum;
and an elastic pendulum.

.. _vib:app:mass_spring:

Oscillating mass attached to a spring
-------------------------------------

.. _vib:app:mass_spring:fig:

.. figure:: oscillator_spring.png
   :width: 500

   *Simple oscillating mass*

The most fundamental mechanical vibration system is depicted in Figure
:ref:`vib:app:mass_spring:fig`. A body with mass :math:`m` is attached to a
spring and can move horizontally without friction (in the wheels). The
position of the body is given by the vector :math:`\boldsymbol{r}(t) = u(t)\boldsymbol{i}`, where
:math:`\boldsymbol{i}` is a unit vector in :math:`x` direction.
There is
only one force acting on the body: a spring force :math:`\boldsymbol{F}_s =-ku\boldsymbol{i}`, where
:math:`k` is a constant. The point :math:`x=0`, where :math:`u=0`, must therefore
correspond to the body's position
where the spring is neither extended nor compressed, so the force
vanishes.

The basic physical principle that governs the motion of the body is
Newton's second law of motion: :math:`\boldsymbol{F}=m\boldsymbol{a}`, where
:math:`\boldsymbol{F}` is the sum of forces on the body, :math:`m` is its mass, and :math:`\boldsymbol{a}=\ddot\boldsymbol{r}`
is the acceleration. We use the dot for differentiation with respect
to time, which is
usual in mechanics. Newton's second law simplifies here
to :math:`-\boldsymbol{F}_s=m\ddot u\boldsymbol{i}`, which translates to

.. math::
         -ku = m\ddot u{\thinspace .}

Two initial conditions are needed: :math:`u(0)=I`, :math:`\dot u(0)=V`.
The ODE problem is normally written as

.. _Eq:vib:app:mass_spring:eqx:

.. math::

    \tag{82}
    m\ddot u + ku = 0,\quad u(0)=I,\ \dot u(0)=V{\thinspace .}
        
        

It is
not uncommon to divide by :math:`m`
and introduce the frequency :math:`\omega = \sqrt{k/m}`:

.. _Eq:vib:app:mass_spring:equ:

.. math::

    \tag{83}
    \ddot u + \omega^2 u = 0,\quad u(0)=I,\  \dot u(0)=V{\thinspace .}
        
        

This is the model problem in the first part of this chapter, with the
small difference that we write the time derivative of :math:`u` with a dot
above, while we used :math:`u^{\prime}` and :math:`u^{\prime\prime}` in previous
parts of the book.

.. index:: DOF (degree of freedom)

Since only one scalar mathematical quantity, :math:`u(t)`, describes the
complete motion, we say that the mechanical system has one degree of freedom
(DOF).

Scaling          (1)
~~~~~~~~~~~~~~~~~~~~

For numerical simulations it is very convenient to scale :ref:`(83) <Eq:vib:app:mass_spring:equ>` and thereby get rid of the problem of finding relevant values
for all the parameters :math:`m`, :math:`k`, :math:`I`, and :math:`V`.
Since the amplitude of the oscillations are dictated by :math:`I` and :math:`V`
(or more precisely, :math:`V/\omega`), we scale :math:`u` by :math:`I` (or :math:`V/omega` if
:math:`I=0`):

.. math::
         \bar u = \frac{u}{I},\quad \bar t = \frac{t}{t_c}{\thinspace .}

The time scale :math:`t_c` is normally chosen as the inverse period :math:`2\pi/\omega` or
angular frequency :math:`1/\omega`, most often as :math:`t_c=1/\omega`.
Inserting the dimensionless quantities :math:`\bar u` and :math:`\bar t` in
:ref:`(83) <Eq:vib:app:mass_spring:equ>` results in the scaled problem

.. math::
         \frac{d^2\bar u}{d\bar t^2} + \bar u = 0,\quad \bar u(0)=1,\ \frac{\bar u}{\bar t}(0)=\beta = \frac{V}{I\omega},

where :math:`\beta` is a dimensionless number. Any motion that starts from rest
(:math:`V=0`) is free of parameters in the scaled model!

The physics
~~~~~~~~~~~

The typical physics of the system in Figure :ref:`vib:app:mass_spring:fig` can
be described as follows.
Initially, we displace the body to some position :math:`I`, say at rest
(:math:`V=0`). After releasing the body, the spring, which is extended, will
act with a force :math:`-kI\boldsymbol{i}` and pull the body to the left. This force
causes an acceleration and therefore increases velocity. The body passes
the point :math:`x=0`, where :math:`u=0`,
and the spring will then be compressed and act with a
force :math:`kx\boldsymbol{i}` against the motion and cause retardation. At some point,
the motion stops and the velocity is zero, before the spring force
:math:`kx\boldsymbol{i}` accelerates the body in positive direction. The result is that
the body accelerates back and forth. As long as there is no friction
forces to damp the motion, the oscillations will continue forever.

.. _vib:app:mass_gen:

General mechanical vibrating system
-----------------------------------

.. _vib:app:mass_gen:fig:

.. figure:: oscillator_general.png
   :width: 500

   *General oscillating system*

The mechanical system in Figure :ref:`vib:app:mass_spring:fig` can easily be
extended to the more general system in Figure :ref:`vib:app:mass_gen:fig`,
where the body is attached to a spring and a dashpot, and also subject
to an environmental force :math:`F(t)\boldsymbol{i}`. The system has still only one
degree of freedom since the body can only move back and forth parallel to
the :math:`x` axis. The spring force was linear, :math:`\boldsymbol{F}_s=-ku\boldsymbol{i}`,
in the section :ref:`vib:app:mass_spring`, but in more general cases it can
depend nonlinearly on the position. We therefore set :math:`\boldsymbol{F}_s=s(u)\boldsymbol{i}`.
The dashpot, which acts
as a damper, results in a force :math:`\boldsymbol{F}_d` that depends on the body's
velocity :math:`\dot u` and that always acts against the motion.
The mathematical model of the force is written :math:`\boldsymbol{F}_d =f(\dot u)\boldsymbol{i}`.
A positive :math:`\dot u` must result in a force acting in the positive :math:`x`
direction.
Finally, we have the external environmental force :math:`\boldsymbol{F}_e = F(t)\boldsymbol{i}`.

Newton's second law of motion now involves three forces:

.. math::
         F(t)\boldsymbol{i} + f(\dot u)ii - s(u)\boldsymbol{i} = m\ddot u \boldsymbol{i}{\thinspace .}

The common mathematical form of the ODE problem is

.. _Eq:vib:app:mass_gen:equ:

.. math::

    \tag{84}
    m\ddot u + f(\dot u) + s(u) = F(t),\quad u(0)=I,\ \dot u(0)=V{\thinspace .}
        
        

This is the generalized problem treated in the last part of the
present chapter, but with prime denoting the derivative instead of the dot.

The most common models for the spring and dashpot are linear: :math:`f(\dot u)
=b\dot u` with a constant :math:`b\geq 0`, and :math:`s(u)=ku` for a constant :math:`k`.

Scaling          (2)
~~~~~~~~~~~~~~~~~~~~

A specific scaling requires specific choices of :math:`f`, :math:`s`, and :math:`F`.
Suppose we have

.. math::
         f(\dot u) = b|\dot u|\dot u,\quad s(u)=ku,\quad F(t)=A\sin(\phi t){\thinspace .}

We introduce dimensionless variables as usual, :math:`\bar u = u/u_c` and
:math:`\bar t = t/t_c`. The scale :math:`u_c` depends both on the initial conditions
and :math:`F`, but as time grows, the effect of the initial conditions die out
and :math:`F` will drive the motion. Inserting :math:`\bar u` and :math:`\bar t` in the
ODE gives

.. math::
         m\frac{u_c}{t_c^2}\frac{d^2\bar u}{d\bar t^2}
        + b\frac{u_c^2}{t_c^2}\left\vert\frac{d\bar u}{d\bar t}\right\vert
        \frac{d\bar u}{d\bar t} + ku_c\bar u = A\sin(\phi t_c\bar t){\thinspace .}

We divide by :math:`u_c/t_c^2` and demand the coefficients of the
:math:`\bar u` and the forcing term from :math:`F(t)` to have unit coefficients.
This leads to the scales

.. math::
         t_c = \sqrt{\frac{m}{k}},\quad u_c = \frac{A}{k}{\thinspace .}

The scaled ODE becomes

.. _Eq:vib:app:mass_gen:scaled:

.. math::

    \tag{85}
    \frac{d^2\bar u}{d\bar t^2}
        + 2\beta\left\vert\frac{d\bar u}{d\bar t}\right\vert
        \frac{d\bar u}{d\bar t} + \bar u = \sin(\gamma\bar t),
        
        

where there are two dimensionless numbers:

.. math::
         \beta = \frac{Ab}{2mk},\quad\gamma =\phi\sqrt{\frac{m}{k}}{\thinspace .}

The :math:`\beta` number measures the size of the damping term (relative to unity)
and is assumed to be small, basically because :math:`b` is small. The :math:`\phi`
number is the ratio of the time scale of free vibrations and the time scale
of the forcing.
The scaled initial conditions have two other dimensionless numbers
as values:

.. math::
         \bar u(0) = \frac{Ik}{A},\quad \frac{d\bar u}{d\bar t}=\frac{t_c}{u_c}V = \frac{V}{A}\sqrt{mk}{\thinspace .}

.. _vib:app:mass_sliding:

A sliding mass attached to a spring
-----------------------------------

Consider a variant of the oscillating body in the section :ref:`vib:app:mass_spring`
and Figure :ref:`vib:app:mass_spring:fig`: the body rests on a flat
surface, and there is sliding friction between the body and the surface.
Figure :ref:`vib:app:mass_sliding:fig` depicts the problem.

.. _vib:app:mass_sliding:fig:

.. figure:: oscillator_sliding.png
   :width: 500

   *Sketch of a body sliding on a surface*

The body is attached to a spring with spring force :math:`-s(u)\boldsymbol{i}`.
The friction force is proportional to the normal force on the surface,
:math:`-mg\boldsymbol{j}`, and given by :math:`-f(\dot u)\boldsymbol{i}`, where

.. math::
         f(\dot u) = \left\lbrace\begin{array}{ll}
        -\mu mg,& \dot u < 0,\\ 
        \mu mg, & \dot u > 0,\\ 
        0,      & \dot u=0
        \end{array}\right.

Here, :math:`\mu` is a friction coefficient. With the signum function

.. math::
         \mbox{sign(x)} = \left\lbrace\begin{array}{ll}
        -1,& x < 0,\\ 
        1, & x > 0,\\ 
        0, & x=0
        \end{array}\right.

we can simply write :math:`f(\dot u) = \mu mg\,\hbox{sign}(\dot u)`
(the sign function is implemented by ``numpy.sign``).

The equation of motion becomes

.. _Eq:vib:app:mass_sliding:equ:

.. math::

    \tag{86}
    m\ddot u + \mu mg\hbox{sign}(\dot u) + s(u) = 0,\quad u(0)=I,\ \dot u(0)=V{\thinspace .}
        
        

.. _vib:app:washmach:

A jumping washing machine
-------------------------

A washing machine is placed on four springs with efficient dampers.
If the machine contains just a few clothes, the circular motion of
the machine induces a sinusoidal external force and the machine will
jump up and down if the frequency of the external force is close to
the natural frequency of the machine and its spring-damper system.

[**hpl 6**: Not finished. This is a good example on resonance.]

.. _vib:app:pendulum:

Motion of a pendulum
--------------------

Simple pendulum
~~~~~~~~~~~~~~~

A classical problem in mechanics is the motion of a pendulum. We first
consider a `simple pendulum <https://en.wikipedia.org/wiki/Pendulum>`__ (sometimes also called a
mathematical pendulum): a small body of mass :math:`m` is
attached to a massless wire and can oscillate back and forth in the
gravity field. Figure :ref:`vib:app:pendulum:fig_problem` shows a sketch
of the problem.

.. _vib:app:pendulum:fig_problem:

.. figure:: pendulum_problem.png
   :width: 300

   *Sketch of a simple pendulum*

The motion is governed by Newton's 2nd law, so we need to find
expressions for the forces and the acceleration. Three forces on the
body are considered: an unknown force :math:`S` from the wire, the gravity
force :math:`mg`, and an air resistance force, :math:`\frac{1}{2}C_D\varrho A|v|v`,
hereafter called the drag force, directed against the velocity
of the body. Here, :math:`C_D` is a drag coefficient, :math:`\varrho` is the
density of air, :math:`A` is the cross section area of the body, and :math:`v` is
the magnitude of the velocity.

We introduce a coordinate system with polar coordinates and unit
vectors :math:`{\boldsymbol{i}_r}` and :math:`\boldsymbol{i}_{\theta}` as shown in Figure
:ref:`vib:app:pendulum:fig_forces`.  The position of the center of mass
of the body is

.. math::
         \boldsymbol{r}(t) = x_0\boldsymbol{i} + y_0\boldsymbol{j} + L{\boldsymbol{i}_r},

where :math:`\boldsymbol{i}` and :math:`\boldsymbol{j}` are unit vectors in the corresponding Cartesian
coordinate system in the :math:`x` and :math:`y` directions, respectively. We have
that :math:`{\boldsymbol{i}_r} = \cos\theta\boldsymbol{i} +\sin\theta\boldsymbol{j}`.

.. _vib:app:pendulum:fig_forces:

.. figure:: pendulum_forces.png
   :width: 500

   *Forces acting on a simple pendulum*

The forces are now expressed as follows.

 * Wire force: :math:`-S{\boldsymbol{i}_r}`

 * Gravity force: :math:`-mg\boldsymbol{j} = mg(-\sin\theta\,\boldsymbol{i}_{\theta} + \cos\theta\,{\boldsymbol{i}_r})`

 * Drag force: :math:`-\frac{1}{2}C_D\varrho A |v|v\,\boldsymbol{i}_{\theta}`

Since a positive velocity means movement in the direction of :math:`\boldsymbol{i}_{\theta}`,
the drag force must be directed along :math:`-\boldsymbol{i}_{\theta}` so it works against the
motion.

The velocity of the body is found from :math:`\boldsymbol{r}`:

.. math::
         \boldsymbol{v}(t) = \dot\boldsymbol{r} (t) = \frac{d}{d\theta}(x_0\boldsymbol{i} + y_0\boldsymbol{j} + L{\boldsymbol{i}_r})\frac{d\theta}{dt} = L\dot\theta\boldsymbol{i}_{\theta},

since :math:`\frac{d}{d\theta}{\boldsymbol{i}_r} = \boldsymbol{i}_{\theta}`. It follows that :math:`v=|\boldsymbol{v}|=L\dot\theta`.
The acceleration is

.. math::
         \boldsymbol{a}(t) = \dot\boldsymbol{v}(r) = \frac{d}{dt}(L\dot\theta\boldsymbol{i}_{\theta})
        = L\ddot\theta\boldsymbol{i}_{\theta} + L\dot\theta\frac{d\boldsymbol{i}_{\theta}}{d\theta}\dot\theta =
        = L\ddot\theta\boldsymbol{i}_{\theta} - L\dot\theta^2{\boldsymbol{i}_r},

since :math:`\frac{d}{d\theta}\boldsymbol{i}_{\theta} = -{\boldsymbol{i}_r}`.

Newton's 2nd law of motion becomes

.. math::
         -S{\boldsymbol{i}_r} + mg(-\sin\theta\,\boldsymbol{i}_{\theta} + \cos\theta\,{\boldsymbol{i}_r}) -
        \frac{1}{2}C_D\varrho AL^2|\dot\theta|\dot\theta\,\boldsymbol{i}_{\theta}
        = mL\ddot\theta\dot\theta\,\boldsymbol{i}_{\theta} - L\dot\theta^2{\boldsymbol{i}_r},

leading to two component equations

.. _Eq:vib:app:pendulum:ir:

.. math::

    \tag{87}
    -S + mg\cos\theta = -L\dot\theta^2,
        
        

.. _Eq:vib:app:pendulum:ith:

.. math::

    \tag{88}
    -mg\sin\theta - \frac{1}{2}C_D\varrho AL^2|\dot\theta|\dot\theta
        = mL\ddot\theta{\thinspace .}
        
        

From :ref:`(87) <Eq:vib:app:pendulum:ir>` we get an expression for
:math:`S=mg\cos\theta + L\dot\theta^2`, and from :ref:`(88) <Eq:vib:app:pendulum:ith>`
we get a differential equation for the angle :math:`\theta(t)`. This latter
equation is ordered as

.. _Eq:vib:app:pendulum:thetaeq:

.. math::

    \tag{89}
    m\ddot\theta + \frac{1}{2}C_D\varrho AL|\dot\theta|\dot\theta
        + \frac{mg}{L}\sin\theta = 0{\thinspace .}
        
        

Two initial conditions are needed: :math:`\theta=\Theta` and :math:`\dot\theta = \Omega`.
Normally, the pendulum motion is started from rest, which means :math:`\Omega =0`.

Equation :ref:`(89) <Eq:vib:app:pendulum:thetaeq>` fits the general model
used in :ref:`(59) <Eq:vib:ode2>` in the section :ref:`vib:model2` if we define
:math:`u=\theta`, :math:`f(u^{\prime}) = \frac{1}{2}C_D\varrho AL|\dot u|\dot u`,
:math:`s(u) = L^{-1}mg\sin u`, and :math:`F=0`.
If the body is a sphere with radius :math:`R`, we can take :math:`C_D=0.4` and :math:`A=\pi R^2`.
:ref:`vib:exer:pendulum_simple` asks you to scale the equations
and carry out specific simulations with this model.

Physical pendulum
~~~~~~~~~~~~~~~~~

The motion of a compound or physical pendulum where the wire is a rod with
mass, can be modeled very similarly. The governing equation is
:math:`I\boldsymbol{a} = \boldsymbol{T}` where :math:`I` is the moment of inertia of the entire body about
the point :math:`(x_0,y_0)`, and :math:`\boldsymbol{T}` is the sum of moments of the forces
with respect to :math:`(x_0,y_0)`. The vector equation reads

.. math::
         \boldsymbol{r}\times(-S{\boldsymbol{i}_r} + mg(-\sin\theta\boldsymbol{i}_{\theta} + \cos\theta{\boldsymbol{i}_r}) -
        \frac{1}{2}C_D\varrho AL^2|\dot\theta|\dot\theta\boldsymbol{i}_{\theta})
        = I(L\ddot\theta\dot\theta\boldsymbol{i}_{\theta} - L\dot\theta^2{\boldsymbol{i}_r}){\thinspace .}

The component equation in :math:`\boldsymbol{i}_{\theta}` direction gives the equation of motion
for :math:`\theta(t)`:

.. _Eq:vib:app:pendulum:thetaeq_physical:

.. math::

    \tag{90}
    I\ddot\theta + \frac{1}{2}C_D\varrho AL^3|\dot\theta|\dot\theta
        + mgL\sin\theta = 0{\thinspace .}
        
        

.. _vib:app:pendulum_bodydia:

Dynamic free body diagram during pendulum motion
------------------------------------------------

Usually one plots the mathematical quantities as functions of time to
visualize the solution of ODE models.  :ref:`vib:exer:pendulum_simple` asks you to do this for the motion of a
pendulum in the previous section.  However, sometimes it is more
instructive to look at other types of visualizations. For example, we
have the pendulum and the free body diagram in Figures
:ref:`vib:app:pendulum:fig_problem` and
:ref:`vib:app:pendulum:fig_forces`. We may think of these figures as
animations in time instead. Especially the free body diagram will show both the
motion of the pendulum *and* the size of the forces during the motion.
The present section exemplifies how to make such a dynamic body
diagram.

.. raw:: html
        
        <div>
        <video  loop controls width='640' height='365' preload='none'>
            <source src='https://github.com/hplgit/pysketcher/raw/master/doc/pub/tutorial/mov-tut/pendulum/movie.mp4'  type='video/mp4;  codecs="avc1.42E01E, mp4a.40.2"'>
            <source src='https://github.com/hplgit/pysketcher/raw/master/doc/pub/tutorial/mov-tut/pendulum/movie.webm' type='video/webm; codecs="vp8, vorbis"'>
            <source src='https://github.com/hplgit/pysketcher/raw/master/doc/pub/tutorial/mov-tut/pendulum/movie.ogg'  type='video/ogg;  codecs="theora, vorbis"'>
        </video>
        </div>
        <p><em>The drag force is magnified 5 times!</em></p>
        
        <!-- Issue warning if in a Safari browser -->
        <script language="javascript">
        if (!!(window.safari)) {
          document.write("<div style=\"width: 95%%; padding: 10px; border: 1px solid #100; border-radius: 4px;\"><p><font color=\"red\">The above movie will not play in Safari - use Chrome, Firefox, or Opera.</font></p></div>")}
        </script>
        

Dynamic physical sketches, coupled to the numerical solution of
differential equations, requires a program to produce a sketch for
the situation at each time level.
`Pysketcher <https://github.com/hplgit/pysketcher>`__ is such a tool.
In fact (and not surprising!) Figures :ref:`vib:app:pendulum:fig_problem` and
:ref:`vib:app:pendulum:fig_forces` were drawn using Pysketcher.
The details of the drawings are explained in the
`Pysketcher tutorial <http://hplgit.github.io/pysketcher/doc/web/index.html>`__.
Here, we outline how this type of sketch can be used to create an animated
free body diagram during the motion of a pendulum.

Pysketcher is actually a layer of useful abstractions on top of
standard plotting packages. This means that we in fact apply Matplotlib
to make the animated free body diagram, but instead of dealing with a wealth
of detailed Matplotlib commands, we can express the drawing in terms of
more high-level objects, e.g., objects for the wire, angle :math:`\theta`,
body with mass :math:`m`, arrows for forces, etc. When the position of these
objects are given through variables, we can just couple those variables
to the dynamic solution of our ODE and thereby make a unique drawing
for each :math:`\theta` value in a simulation.

Writing the solver
~~~~~~~~~~~~~~~~~~

Let us start with the most familiar part of the current problem:
writing the solver function. We use Odespy for this purpose.
We also work with dimensionless equations. Since :math:`\theta` can be
viewed as dimensionless, we only need to introduce a dimensionless time,
here taken as :math:`\bar t = t/\sqrt{L/g}`.
The resulting dimensionless mathematical model for :math:`\theta`,
the dimensionless angular velocity :math:`\omega`, the
dimensionless wire force :math:`\bar S`, and the dimensionless
drag force :math:`\bar D` is then

.. _Eq:vib:app:pendulum_bodydia:eqth:

.. math::

    \tag{91}
    \frac{d\omega}{d\bar t} = - \alpha|\omega|\omega - \sin\theta,
        
        

.. _Eq:vib:app:pendulum_bodydia:eqomega:

.. math::

    \tag{92}
    \frac{d\theta}{d\bar t} = \omega,
        
        

.. _Eq:vib:app:pendulum_bodydia:eqS:

.. math::

    \tag{93}
    \bar S = \omega^2 + \cos\theta,
        
        

.. _Eq:vib:app:pendulum_bodydia:eqD:

.. math::

    \tag{94}
    \bar D = -\alpha |\omega|\omega,
        
        

with

.. math::
         \alpha = \frac{C_D\varrho\pi R^2L}{2m}{\thinspace .}

as a dimensionless parameter expressing the ratio of the drag force and
the gravity force.

.. :ref:`vib:exer:pendulum_simple` asks you to carry out the details of

.. the scaling.

A suitable function for computing
:ref:`(91) <Eq:vib:app:pendulum_bodydia:eqth>`-:ref:`(94) <Eq:vib:app:pendulum_bodydia:eqD>`
is listed below.

.. code-block:: python

        def simulate(alpha, Theta, dt, T):
            import odespy
        
            def f(u, t, alpha):
                omega, theta = u
                return [-alpha*omega*abs(omega) - sin(theta),
                        omega]
        
            import numpy as np
            Nt = int(round(T/float(dt)))
            t = np.linspace(0, Nt*dt, Nt+1)
            solver = odespy.RK4(f, f_args=[alpha])
            solver.set_initial_condition([0, Theta])
            u, t = solver.solve(
                t, terminate=lambda u, t, n: abs(u[n,1]) < 1E-3)
            omega = u[:,0]
            theta = u[:,1]
            S = omega**2 + np.cos(theta)
            drag = -alpha*np.abs(omega)*omega
            return t, theta, omega, S, drag

Drawing the free body diagram
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``sketch`` function below applies Pysketcher objects to build
a diagram like that in Figure :ref:`vib:app:pendulum:fig_forces`,
except that we have removed the rotation point :math:`(x_0,y_0)` and
the unit vectors in polar coordinates as these objects are not
important for an animated free body diagram.

.. code-block:: python

        import sys
        try:
            from pysketcher import *
        except ImportError:
            print 'Pysketcher must be installed from'
            print 'https://github.com/hplgit/pysketcher'
            sys.exit(1)
        
        # Overall dimensions of sketch
        H = 15.
        W = 17.
        
        drawing_tool.set_coordinate_system(
            xmin=0, xmax=W, ymin=0, ymax=H,
            axis=False)
        
        def sketch(theta, S, mg, drag, t, time_level):
            """
            Draw pendulum sketch with body forces at a time level
            corresponding to time t. The drag force is in
            drag[time_level], the force in the wire is S[time_level],
            the angle is theta[time_level].
            """
            import math
            a = math.degrees(theta[time_level])  # angle in degrees
            L = 0.4*H         # Length of pendulum
            P = (W/2, 0.8*H)  # Fixed rotation point
        
            mass_pt = path.geometric_features()['end']
            rod = Line(P, mass_pt)
        
            mass = Circle(center=mass_pt, radius=L/20.)
            mass.set_filled_curves(color='blue')
            rod_vec = rod.geometric_features()['end'] - \ 
                      rod.geometric_features()['start']
            unit_rod_vec = unit_vec(rod_vec)
            mass_symbol = Text('$m$', mass_pt + L/10*unit_rod_vec)
        
            rod_start = rod.geometric_features()['start']  # Point P
            vertical = Line(rod_start, rod_start + point(0,-L/3))
        
            def set_dashed_thin_blackline(*objects):
                """Set linestyle of objects to dashed, black, width=1."""
                for obj in objects:
                    obj.set_linestyle('dashed')
                    obj.set_linecolor('black')
                    obj.set_linewidth(1)
        
            set_dashed_thin_blackline(vertical)
            set_dashed_thin_blackline(rod)
            angle = Arc_wText(r'$\theta$', rod_start, L/6, -90, a,
                              text_spacing=1/30.)
        
            magnitude = 1.2*L/2   # length of a unit force in figure
            force = mg[time_level]  # constant (scaled eq: about 1)
            force *= magnitude
            mg_force  = Force(mass_pt, mass_pt + force*point(0,-1),
                              '', text_pos='end')
            force = S[time_level]
            force *= magnitude
            rod_force = Force(mass_pt, mass_pt - force*unit_vec(rod_vec),
                              '', text_pos='end',
                              text_spacing=(0.03, 0.01))
            force = drag[time_level]
            force *= magnitude
            air_force = Force(mass_pt, mass_pt -
                              force*unit_vec((rod_vec[1], -rod_vec[0])),
                              '', text_pos='end',
                              text_spacing=(0.04,0.005))
        
            body_diagram = Composition(
                {'mg': mg_force, 'S': rod_force, 'air': air_force,
                 'rod': rod, 'body': mass
                 'vertical': vertical, 'theta': angle,})
        
            body_diagram.draw(verbose=0)
            drawing_tool.savefig('tmp_%04d.png' % time_level, crop=False)
            # (No cropping: otherwise movies will be very strange!)

Making the animated free body diagram
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

It now remains to couple the ``simulate`` and ``sketch`` functions.
We first run ``simulate``:

.. code-block:: python

        from math import pi, radians, degrees
        import numpy as np
        alpha = 0.4
        period = 2*pi   # Use small theta approximation
        T = 12*period   # Simulate for 12 periods
        dt = period/40  # 40 time steps per period
        a = 70          # Initial amplitude in degrees
        Theta = radians(a)
        
        t, theta, omega, S, drag = simulate(alpha, Theta, dt, T)

The next step is to run through the time levels in the simulation and
make a sketch at each level:

.. code-block:: python

        for time_level, t_ in enumerate(t):
            sketch(theta, S, mg, drag, t_, time_level)

The individual sketches are (by the ``sketch`` function) saved in files
with names ``tmp_%04d.png``. These can be combined to videos using
(e.g.) ``ffmpeg``. A complete function ``animate`` for running the
simulation and creating video files is
listed below.

.. code-block:: python

        def animate():
            # Clean up old plot files
            import os, glob
            for filename in glob.glob('tmp_*.png') + glob.glob('movie.*'):
                os.remove(filename)
            # Solve problem
            from math import pi, radians, degrees
            import numpy as np
            alpha = 0.4
            period = 2*pi   # Use small theta approximation
            T = 12*period   # Simulate for 12 periods
            dt = period/40  # 40 time steps per period
            a = 70          # Initial amplitude in degrees
            Theta = radians(a)
        
            t, theta, omega, S, drag = simulate(alpha, Theta, dt, T)
        
            # Visualize drag force 5 times as large
            drag *= 5
            mg = np.ones(S.size)  # Gravity force (needed in sketch)
        
            # Draw animation
            import time
            for time_level, t_ in enumerate(t):
                sketch(theta, S, mg, drag, t_, time_level)
                time.sleep(0.2)  # Pause between each frame on the screen
        
            # Make videos
            prog = 'ffmpeg'
            filename = 'tmp_%04d.png'
            fps = 6
            codecs = {'flv': 'flv', 'mp4': 'libx264',
                      'webm': 'libvpx', 'ogg': 'libtheora'}
            for ext in codecs:
                lib = codecs[ext]
                cmd = '%(prog)s -i %(filename)s -r %(fps)s ' % vars()
                cmd += '-vcodec %(lib)s movie.%(ext)s' % vars()
                print(cmd)
                os.system(cmd)

.. _vib:app:pendulum_elastic:

Motion of an elastic pendulum
-----------------------------

Consider a pendulum as in Figure :ref:`vib:app:pendulum:fig_problem`, but
this time the wire is elastic. The length of the wire when it is not
stretched is :math:`L_0`, while :math:`L(t)` is the stretched
length at time :math:`t` during the motion.

Stretching the elastic wire a distance :math:`\Delta L` gives rise to a
spring force :math:`k\Delta L` in the opposite direction of the
stretching. Let :math:`\boldsymbol{n}` be a unit normal vector along the wire
from the point :math:`\boldsymbol{r}_0=(x_0,y_0)` and in the direction of :math:`\boldsymbol{i}_{\theta}`, see
Figure :ref:`vib:app:pendulum:fig_forces` for definition of :math:`(x_0,y_0)`
and :math:`\boldsymbol{i}_{\theta}`. Obviously, we have :math:`\boldsymbol{n}=\boldsymbol{i}_{\theta}`, but in this modeling
of an elastic pendulum we do not need polar coordinates.  Instead, it
is more straightforward to develop the equation in Cartesian
coordinates.

A mathematical expression for :math:`\boldsymbol{n}` is

.. math::
         \boldsymbol{n} = \frac{\boldsymbol{r}-\boldsymbol{r}_0}{L(t)},

where :math:`L(t)=||\boldsymbol{r}-\boldsymbol{r}_0||` is the current length of the elastic wire.
The position vector :math:`\boldsymbol{r}` in Cartesian coordinates reads
:math:`\boldsymbol{r}(t) = x(t)\boldsymbol{i} + y(t)\boldsymbol{j}`, where :math:`\boldsymbol{i}` and :math:`\boldsymbol{j}` are unit vectors
in the :math:`x` and :math:`y` directions, respectively.
It is convenient to introduce the Cartesian components :math:`n_x` and :math:`n_y`
of the normal vector:

.. math::
         \boldsymbol{n} = \frac{\boldsymbol{r}-\boldsymbol{r}_0}{L(t)} = \frac{x(t)-x_0}{L(t)}\boldsymbol{i} + \frac{y(t)-y_0}{L(t)}\boldsymbol{j} = n_x\boldsymbol{i} + n_y\boldsymbol{j}{\thinspace .}

The stretch :math:`\Delta L` in the wire is

.. math::
         \Delta t = L(t) - L_0{\thinspace .}

The force in the wire is then :math:`-S\boldsymbol{n}=-k\Delta L\boldsymbol{n}`.

The other forces are the gravity and the air resistance, just
as in Figure :ref:`vib:app:pendulum:fig_forces`. The main difference
is that we have a *model* for :math:`S` in terms of the motion (as soon as
we have expressed :math:`\Delta L` by :math:`\boldsymbol{r}`). For simplicity, we drop
the air resistance term (but :ref:`vib:exer:pendulum_elastic_drag`
asks you to include it).

Newton's second law of motion applied to the body now results in

.. _Eq:vib:app:pendulum_elastic:eq1:

.. math::

    \tag{95}
    m\ddot\boldsymbol{r} = -k(L-L_0)\boldsymbol{n} - mg\boldsymbol{j}
        
        

The two components of
:ref:`(95) <Eq:vib:app:pendulum_elastic:eq1>` are

.. _Eq:_auto27:

.. math::

    \tag{96}
    \ddot x = -\frac{k}{m}(L-L_0)n_x,
        
        

.. _Eq:vib:app:pendulum_elastic:eq2a:

.. math::

    \tag{97}
    .. _Eq:vib:app:pendulum_elastic:eq2b:

.. math::

    \tag{98}
    \ddot y = - \frac{k}{m}(L-L_0)n_y - g
        {\thinspace .}
        

Remarks about an elastic vs a non-elastic pendulum
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Note that the derivation of the ODEs for an elastic pendulum is more
straightforward than for a classical, non-elastic pendulum,
since we avoid the details
with polar coordinates, but instead work with Newton's second law
directly in Cartesian coordinates. The reason why we can do this is that
the elastic pendulum undergoes a general two-dimensional motion where
all the forces are known or expressed as functions of :math:`x(t)` and :math:`y(t)`,
such that we get two ordinary differential equations.
The motion of the non-elastic pendulum, on the other hand, is constrained:
the body has to move along a circular path, and the force :math:`S` in the
wire is unknown.

The non-elastic pendulum therefore leads to
a *differential-algebraic* equation, i.e., ODEs for :math:`x(t)` and :math:`y(t)`
combined with an extra constraint :math:`(x-x_0)^2 + (y-y_0)^2 = L^2`
ensuring that the motion takes place along a circular path.
The extra constraint (equation) is compensated by an extra unknown force
:math:`-S\boldsymbol{n}`. Differential-algebraic equations are normally hard
to solve, especially with pen and paper.
Fortunately, for the non-elastic pendulum we can do a
trick: in polar coordinates the unknown force :math:`S` appears only in the
radial component of Newton's second law, while the unknown
degree of freedom for describing the motion, the angle :math:`\theta(t)`,
is completely governed by the asimuthal component. This allows us to
decouple the unknowns :math:`S` and :math:`\theta`. But this is a kind of trick and
not a widely applicable method. With an elastic pendulum we use straightforward
reasoning with Newton's 2nd law and arrive at a standard ODE problem that
(after scaling) is easy solve on a computer.

Initial conditions
~~~~~~~~~~~~~~~~~~

What is the initial position of the body? We imagine that first the
pendulum hangs in equilibrium in its vertical position, and then it is
displaced an angle :math:`\Theta`. The equilibrium position is governed
by the ODEs with the accelerations set to zero.
The :math:`x` component leads to :math:`x(t)=x_0`, while the :math:`y` component gives

.. math::
         0 = - \frac{k}{m}(L-L_0)n_y - g = \frac{k}{m}(L(0)-L_0) - g\quad\Rightarrow\quad
        L(0) = L_0 + mg/k,

since :math:`n_y=-11` in this position. The corresponding :math:`y` value is then
from :math:`n_y=-1`:

.. math::
         y(t) = y_0 - L(0) = y_0 - (L_0 + mg/k){\thinspace .}

Let us now choose :math:`(x_0,y_0)` such that the body is at the origin
in the equilibrium position:

.. math::
         x_0 =0,\quad y_0 = L_0 + mg/k{\thinspace .}

Displacing the body an angle :math:`\Theta` to the right leads to the
initial position

.. math::
         x(0)=(L_0+mg/k)\sin\Theta,\quad y(0)=(L_0+mg/k)(1-\cos\Theta){\thinspace .}

The initial velocities can be set to zero: :math:`x'(0)=y'(0)=0`.

The complete ODE problem
~~~~~~~~~~~~~~~~~~~~~~~~

We can summarize all the equations as follows:

.. math::
        
        \ddot x &= -\frac{k}{m}(L-L_0)n_x,
        \\ 
        \ddot y &= -\frac{k}{m}(L-L_0)n_y - g,
        \\ 
        L &= \sqrt{(x-x_0)^2 + (y-y_0)^2},
        \\ 
        n_x &= \frac{x-x_0}{L},
        \\ 
        n_y &= \frac{y-y_0}{L},
        \\ 
        x(0) &= (L_0+mg/k)\sin\Theta,
        \\ 
        x'(0) &= 0,
        \\ 
        y(0) & =(L_0+mg/k)(1-\cos\Theta),
        \\ 
        y'(0) &= 0{\thinspace .}
        

We insert :math:`n_x` and :math:`n_y`  in the ODEs:

.. _Eq:vib:app:pendulum_elastic:x:

.. math::

    \tag{99}
    \ddot x = -\frac{k}{m}\left(1 -\frac{L_0}{L}\right)(x-x_0),
        
        

.. _Eq:vib:app:pendulum_elastic:y:

.. math::

    \tag{100}
    \ddot y = -\frac{k}{m}\left(1 -\frac{L_0}{L}\right)(y-y_0) - g,
        
        

.. _Eq:vib:app:pendulum_elastic:L:

.. math::

    \tag{101}
    L = \sqrt{(x-x_0)^2 + (y-y_0)^2},
        
        

.. _Eq:vib:app:pendulum_elastic:x0:

.. math::

    \tag{102}
    x(0) = (L_0+mg/k)\sin\Theta,
        
        

.. _Eq:vib:app:pendulum_elastic:vx0:

.. math::

    \tag{103}
    x'(0) = 0,
        
        

.. _Eq:vib:app:pendulum_elastic:y0:

.. math::

    \tag{104}
    y(0)  =(L_0+mg/k)(1-\cos\Theta),
        
        

.. _Eq:vib:app:pendulum_elastic:vy0:

.. math::

    \tag{105}
    y'(0) = 0{\thinspace .}
        
        

Scaling          (3)
~~~~~~~~~~~~~~~~~~~~

The elastic pendulum model can be used to study both an elastic pendulum
and a classic, non-elastic pendulum. The latter problem is obtained
by letting :math:`k\rightarrow\infty`. Unfortunately,
a serious problem with the ODEs
:ref:`(99) <Eq:vib:app:pendulum_elastic:x>`-:ref:`(100) <Eq:vib:app:pendulum_elastic:y>` is that for large :math:`k`, we have a very large factor :math:`k/m` multiplied by a
very small number :math:`1-L_0/L`, since for large :math:`k`, :math:`L\approx L_0` (very
small deformations of the wire). The product is subject to
significant round-off errors for many relevant physical values of
the parameters. To circumvent the problem, we introduce a scaling. This
will also remove physical parameters from the problem such that we end
up with only one dimensionless parameter,
closely related to the elasticity of the wire. Simulations can then be
done by setting just this dimensionless parameter.

The characteristic length can be taken such that in equilibrium, the
scaled length is unity, i.e., the characteristic length is :math:`L_0+mg/k`:

.. math::
         \bar x = \frac{x}{L_0+mg/k},\quad \bar y = \frac{y}{L_0+mg/k}{\thinspace .}

We must then also work with the scaled length :math:`\bar L = L/(L_0+mg/k)`.

Introducing :math:`\bar t=t/t_c`, where :math:`t_c` is a characteristic time we
have to decide upon later, one gets

.. math::
        
        \frac{d^2\bar x}{d\bar t^2} &=
        -t_c^2\frac{k}{m}\left(1 -\frac{L_0}{L_0+mg/k}\frac{1}{\bar L}\right)\bar x,\\ 
        \frac{d^2\bar y}{d\bar t^2} &=
        -t_c^2\frac{k}{m}\left(1 -\frac{L_0}{L_0+mg/k}\frac{1}{\bar L}\right)(\bar y-1)
        -t_c^2\frac{g}{L_0 + mg/k},\\ 
        \bar L &= \sqrt{\bar x^2 + (\bar y-1)^2},\\ 
        \bar x(0) &= \sin\Theta,\\ 
        \bar x'(0) &= 0,\\ 
        \bar y(0) & = 1 - \cos\Theta,\\ 
        \bar y'(0) &= 0{\thinspace .}
        

For a non-elastic pendulum with small angles, we know that the
frequency of the oscillations are :math:`\omega = \sqrt{L/g}`. It is therefore
natural to choose a similar expression here, either the length in
the equilibrium position,

.. math::
         t_c^2 = \frac{L_0+mg/k}{g}{\thinspace .}

or simply the unstretched length,

.. math::
         t_c^2 = \frac{L_0}{g}{\thinspace .}

These quantities are not very different (since the elastic model
is valid only for quite small elongations), so we take the latter as it is
the simplest one.

The ODEs become

.. math::
        
        \frac{d^2\bar x}{d\bar t^2} &=
        -\frac{L_0k}{mg}\left(1 -\frac{L_0}{L_0+mg/k}\frac{1}{\bar L}\right)\bar x,\\ 
        \frac{d^2\bar y}{d\bar t^2} &=
        -\frac{L_0k}{mg}\left(1 -\frac{L_0}{L_0+mg/k}\frac{1}{\bar L}\right)(\bar y-1)
        -\frac{L_0}{L_0 + mg/k},\\ 
        \bar L &= \sqrt{\bar x^2 + (\bar y-1)^2}{\thinspace .}
        

We can now identify a dimensionless number

.. math::
         \beta = \frac{L_0}{L_0 + mg/k} = \frac{1}{1+\frac{mg}{L_0k}},

which is the ratio of the unstretched length and the
stretched length in equilibrium. The non-elastic pendulum will have
:math:`\beta =1` (:math:`k\rightarrow\infty`).
With :math:`\beta` the ODEs read

.. _Eq:vib:app:pendulum_elastic:x:s:

.. math::

    \tag{106}
    \frac{d^2\bar x}{d\bar t^2} =
        -\frac{\beta}{1-\beta}\left(1- \frac{\beta}{\bar L}\right)\bar x,
        
        

.. _Eq:vib:app:pendulum_elastic:y:s:

.. math::

    \tag{107}
    \frac{d^2\bar y}{d\bar t^2} =
        -\frac{\beta}{1-\beta}\left(1- \frac{\beta}{\bar L}\right)(\bar y-1)
        -\beta,
        
        

.. _Eq:vib:app:pendulum_elastic:L:s:

.. math::

    \tag{108}
    \bar L = \sqrt{\bar x^2 + (\bar y-1)^2},
        
        

.. _Eq:vib:app:pendulum_elastic:x0:s:

.. math::

    \tag{109}
    \bar x(0) = (1+\epsilon)\sin\Theta,
        
        

.. _Eq:vib:app:pendulum_elastic:vx0:s:

.. math::

    \tag{110}
    \frac{d\bar x}{d\bar t}(0) = 0,
        
        

.. _Eq:vib:app:pendulum_elastic:y0:s:

.. math::

    \tag{111}
    \bar y(0) = 1 - (1+\epsilon)\cos\Theta,
        
        

.. _Eq:vib:app:pendulum_elastic:vy0:s:

.. math::

    \tag{112}
    \frac{d\bar y}{d\bar t}(0) = 0,
        
        

We have here added a parameter :math:`\epsilon`, which is an additional
downward stretch of the wire at :math:`t=0`. This parameter makes it possible
to do a desired test: vertical oscillations of the pendulum. Without
:math:`\epsilon`, starting the motion from :math:`(0,0)` with zero velocity will
result in :math:`x=y=0` for all times (also a good test!), but with
an initial stretch so the body's position is :math:`(0,\epsilon)`, we
will have oscillatory vertical motion with amplitude :math:`\epsilon` (see
:ref:`vib:exer:pendulum_elastic`).

Remark on the non-elastic limit
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We immediately see that as :math:`k\rightarrow\infty` (i.e., we obtain a non-elastic
pendulum), :math:`\beta\rightarrow 1`, :math:`\bar L\rightarrow 1`, and we have
very small values :math:`1-\beta\bar L^{-1}` divided by very small values
:math:`1-\beta` in the ODEs. However, it turns out that we can set :math:`\beta`
very close to one and obtain a path of the body that within the visual
accuracy of a plot does not show any elastic oscillations.
(Should the division of very small values become a problem, one can
study the limit by L'Hospital's rule:

.. math::
         \lim_{\beta\rightarrow 1}\frac{1 - \beta \bar L^{-1}}{1-\beta}
        = \frac{1}{\bar L},

and use the limit :math:`\bar L^{-1}` in the ODEs for :math:`\beta` values very
close to 1.)

.. _vib:app:bumpy:

Vehicle on a bumpy road
-----------------------

.. _vib:app:bumpy:fig:sketch:

.. figure:: bumpy_sketch.png
   :width: 400

   *Sketch of one-wheel vehicle on a bumpy road*

We consider a very simplistic vehicle, on one wheel, rolling along a
bumpy road. The oscillatory nature of the road will induce an external
forcing on the spring system in the vehicle and cause vibrations.
Figure :ref:`vib:app:bumpy:fig:sketch` outlines the situation.

To derive the equation that governs the motion, we must first establish
the position vector of the black mass at the top of the spring.
Suppose the spring has length :math:`L` without any elongation or compression,
suppose the radius of the wheel is :math:`R`, and suppose the height of the
black mass at the top is :math:`H`. With the aid of the :math:`\boldsymbol{r}_0` vector
in Figure :ref:`vib:app:bumpy:fig:sketch`, the position :math:`\boldsymbol{r}` of
the center point of the mass is

.. _Eq:_auto28:

.. math::

    \tag{113}
    \boldsymbol{r} = \boldsymbol{r}_0 + 2R\boldsymbol{j} + L\boldsymbol{j} + u\boldsymbol{j} + \frac{1}{2} H\boldsymbol{j},\ 
        
        

where :math:`u` is the elongation or compression in the spring according to
the (unknown and to be computed) vertical displacement :math:`u` relative to the
road. If the vehicle travels
with constant horizontal velocity :math:`v` and :math:`h(x)` is the shape of the
road, then the vector :math:`\boldsymbol{r}_0` is

.. math::
         \boldsymbol{r}_0 = vt\boldsymbol{i} + h(vt)\boldsymbol{j},

if the motion starts from :math:`x=0` at time :math:`t=0`.

The forces on the mass is the gravity, the spring force, and an optional
damping force that is proportional to the vertical velocity :math:`\dot u`. Newton's
second law of motion then tells that

.. math::
         m\ddot\boldsymbol{r} = -mg\boldsymbol{j} - s(u) - b\dot u\boldsymbol{j}{\thinspace .}

This leads to

.. math::
        
        m\ddot u = - s(u) - b\dot u - mg -mh''(vt)v^2
        

To simplify a little bit, we omit the gravity force :math:`mg` in comparison with
the other terms. Introducing :math:`u'` for :math:`\dot u` then gives a standard
damped, vibration equation with external forcing:

.. _Eq:_auto29:

.. math::

    \tag{114}
    mu'' + bu' + s(u) =  -mh''(vt)v^2{\thinspace .}
        
        

Since the road is normally known just as a set of array values, :math:`h''` must
be computed by finite differences. Let :math:`\Delta x` be the spacing between
measured values :math:`h_i= h(i\Delta x)` on the road. The discrete second-order
derivative :math:`h''` reads

.. math::
         q_i = \frac{h_{i-1} - 2h_i + h_{i+1}}{\Delta x^2}, \quad i=1,\ldots,N_x-1{\thinspace .}

We may for maximum simplicity set
the end points as :math:`q_0=q_1` and :math:`q_{N_x}=q_{N_x-1}`.
The term :math:`-mh''(vt)v^2` corresponds to a force with discrete time values

.. math::
         F^n = -mq_n v^2,\quad \Delta t = v^{-1}\Delta x{\thinspace .}

This force can be directly used in a numerical model

.. math::
         [mD_tD_t u + bD_{2t} u + s(u) = F]^n{\thinspace .}

Software for computing :math:`u` and also making an animated sketch of
the motion like we did in the section :ref:`vib:app:pendulum_bodydia`
is found in a separate project on the web:
`<https://github.com/hplgit/bumpy>`_. You may start looking at the
`tutorial <http://hplgit.github.io/bumpy/doc/pub/bumpy.html>`__.

.. _vib:app:bouncing_ball:

Bouncing ball
-------------

A bouncing ball is a ball in free vertically fall until it impacts the
ground, but during the impact, some kinetic energy is lost, and a new
motion upwards with reduced velocity starts. After the motion is retarded,
a new free fall starts, and the process is repeated. At some point the
velocity close to the ground is so small that the ball is considered
to be finally at rest.

The motion of the ball falling in air is governed by Newton's second
law :math:`F=ma`, where :math:`a` is the acceleration of the body, :math:`m` is the mass,
and :math:`F` is the sum of all forces. Here, we neglect the air resistance
so that gravity :math:`-mg` is the only force. The height of the ball is
denoted by :math:`h` and :math:`v` is the velocity. The relations between :math:`h`, :math:`v`, and
:math:`a`,

.. math::
         h'(t)= v(t),\quad v'(t) = a(t),

combined with Newton's second law gives the ODE model

.. _Eq:vib:app:bouncing:ball:h2eq:

.. math::

    \tag{115}
    h^{\prime\prime}(t) = -g,
        
        

or expressed alternatively as a system of first-order equations:

.. _Eq:vib:app:bouncing:ball:veq:

.. math::

    \tag{116}
    v'(t) = -g,
         
        

.. _Eq:vib:app:bouncing:ball:heq:

.. math::

    \tag{117}
    h'(t) = v(t){\thinspace .}
        
        

These equations govern the motion as long as the ball is away from
the ground by a small distance :math:`\epsilon_h > 0`. When :math:`h<\epsilon_h`,
we have two cases.

1. The ball impacts the ground, recognized by a sufficiently large negative
   velocity (:math:`v<-\epsilon_v`). The velocity then changes sign and is
   reduced by a factor :math:`C_R`, known as the `coefficient of restitution <http://en.wikipedia.org/wiki/Coefficient_of_restitution>`__.
   For plotting purposes, one may set :math:`h=0`.

2. The motion stops, recognized by a sufficiently small velocity
   (:math:`|v|<\epsilon_v`) close to the ground.

Electric circuits
-----------------

Although the term "mechanical vibrations" is used in the present
book, we must mention that the same type of equations arise
when modeling electric circuits.
The current :math:`I(t)` in a
circuit with an inductor with inductance :math:`L`, a capacitor with
capacitance :math:`C`, and overall resistance :math:`R`, is governed by

.. _Eq:_auto30:

.. math::

    \tag{118}
    \ddot I + \frac{R}{L}\dot I + \frac{1}{LC}I = \dot V(t),
        
        

where :math:`V(t)` is the voltage source powering the circuit.
This equation has the same form as the general model considered in
Section ref:ref:`vib:model2` if we set :math:`u=I`, :math:`f(u^{\prime}=bu^{\prime}`
and define :math:`b=R/L`, :math:`s(u) = L^{-1}C^{-1}u`, and :math:`F(t)=\dot V(t)`.

Exercises          (1)
======================

.. --- begin exercise ---

.. _vib:exer:resonance:

Exercise 1.18: Simulate resonance
---------------------------------

.. index:: resonance

We consider the scaled ODE model
:ref:`(85) <Eq:vib:app:mass_gen:scaled>` from the section :ref:`vib:app:mass_gen`.
After scaling, the amplitude of :math:`u` will have a size about unity
as time grows and the effect of the initial conditions die out due
to damping. However, as :math:`\gamma\rightarrow 1`, the amplitude of :math:`u`
increases, especially if :math:`\beta` is small. This effect is called
*resonance*. The purpose of this exercise is to explore resonance.

**a)**
Figure out how the ``solver`` function in ``vib.py`` can be called
for the scaled ODE :ref:`(85) <Eq:vib:app:mass_gen:scaled>`.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**b)**
Run :math:`\gamma =5, 1.5, 1.1, 1` for :math:`\beta=0.005, 0.05, 0.2`.
For each :math:`\beta` value, present an image with plots of :math:`u(t)` for
the four :math:`\gamma` values.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``resonance``.

.. --- end exercise ---

.. --- begin exercise ---

.. _vib:exer:sliding_box:

Exercise 1.19: Simulate oscillations of a sliding box
-----------------------------------------------------

Consider a sliding box on a flat surface as modeled in the section :ref:`vib:app:mass_sliding`. As spring force we choose the nonlinear
formula

.. math::
         s(u) = \frac{k}{\alpha}\tanh(\alpha u) = ku + \frac{1}{3}\alpha^2 ku^3 + \frac{2}{15}\alpha^4 k u^5 + {\mathcal{O}(u^6)}{\thinspace .}

**a)**
Plot :math:`g(u)=\alpha^{-1}\tanh(\alpha u)` for various values of :math:`\alpha`.
Assume :math:`u\in [-1,1]`.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**b)**
Scale the equations using :math:`I` as scale for :math:`u` and :math:`\sqrt{m/k}` as
time scale.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**c)**
Implement the scaled model in b). Run it for some values of
the dimensionless parameters.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``sliding_box``.

.. --- end exercise ---

.. --- begin exercise ---

.. _vib:exer:bouncing:ball:

Exercise 1.20: Simulate a bouncing ball
---------------------------------------

The section :ref:`vib:app:bouncing_ball` presents a model for a bouncing
ball.
Choose one of the two ODE formulation, :ref:`(115) <Eq:vib:app:bouncing:ball:h2eq>` or
:ref:`(116) <Eq:vib:app:bouncing:ball:veq>`-:ref:`(117) <Eq:vib:app:bouncing:ball:heq>`,
and simulate the motion of a bouncing ball. Plot :math:`h(t)`. Think about how to
plot :math:`v(t)`.

.. --- begin hint in exercise ---

**Hint.**
A naive implementation may get stuck in repeated impacts for large time
step sizes. To avoid this situation, one can introduce a state
variable that holds the mode of the motion: free fall, impact, or rest.
Two consecutive impacts imply that the motion has stopped.

.. --- end hint in exercise ---

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``bouncing_ball``.

.. --- end exercise ---

.. --- begin exercise ---

.. _vib:exer:pendulum_simple:

Exercise 1.21: Simulate a simple pendulum
-----------------------------------------

Simulation of simple pendulum can be carried out by using
the mathematical model derived in the section :ref:`vib:app:pendulum`
and calling up functionality in the `vib.py <http://tinyurl.com/nm5587k/vib/vib.py>`__
file (i.e., solve the second-order ODE by centered finite differences).

**a)**
Scale the model. Set up the dimensionless governing equation for :math:`\theta`
and expressions for dimensionless drag and wire forces.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**b)**
Write a function for computing
:math:`\theta` and the dimensionless drag force and the force in the wire,
using the ``solver`` function in
the ``vib.py`` file. Plot these three quantities
below each other (in subplots) so the graphs can be compared.
Run two cases, first one in the limit of :math:`\Theta` small and
no drag, and then a second one with :math:`\Theta=40` degrees and :math:`\alpha=0.8`.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``simple_pendulum``.

.. --- end exercise ---

.. --- begin exercise ---

.. _vib:exer:pendulum_elastic:

Exercise 1.22: Simulate an elastic pendulum
-------------------------------------------

The section :ref:`vib:app:pendulum_elastic` describes a model for an elastic
pendulum, resulting in a system of two ODEs. The purpose of this
exercise is to implement the scaled model, test the software, and
generalize the model.

**a)**
Write a function ``simulate``
that can simulate an elastic pendulum using the scaled model.
The function should have the following arguments:

.. code-block:: python

        def simulate(
            beta=0.9,                 # dimensionless parameter
            Theta=30,                 # initial angle in degrees
            epsilon=0,                # initial stretch of wire
            num_periods=6,            # simulate for num_periods
            time_steps_per_period=60, # time step resolution
            plot=True,                # make plots or not
            ):

To set the total simulation time and the time step, we
use our knowledge of the scaled, classical, non-elastic pendulum:
:math:`u^{\prime\prime} + u = 0`, with solution
:math:`u = \Theta\cos \bar t`.
The period of these oscillations is :math:`P=2\pi`
and the frequency is unity. The time
for simulation is taken as ``num_periods`` times :math:`P`. The time step
is set as :math:`P` divided by ``time_steps_per_period``.

The ``simulate`` function should return the arrays of
:math:`x`, :math:`y`, :math:`\theta`, and :math:`t`, where :math:`\theta = \tan^{-1}(x/(1-y))` is
the angular displacement of the elastic pendulum corresponding to the
position :math:`(x,y)`.

If ``plot`` is ``True``, make a plot of :math:`\bar y(\bar t)`
versus :math:`\bar x(\bar t)`, i.e., the physical motion
of the mass at :math:`(\bar x,\bar y)`. Use the equal aspect ratio on the axis
such that we get a physically correct picture of the motion. Also
make a plot of :math:`\theta(\bar t)`, where :math:`\theta` is measured in degrees.
If :math:`\Theta < 10` degrees, add a plot that compares the solutions of
the scaled, classical, non-elastic pendulum and the elastic pendulum
(:math:`\theta(t)`).

Although the mathematics here employs a bar over scaled quantities, the
code should feature plain names ``x`` for :math:`\bar x`, ``y`` for :math:`\bar y`, and
``t`` for :math:`\bar t` (rather than ``x_bar``, etc.). These variable names make
the code easier to read and compare with the mathematics.

.. --- begin hint in exercise ---

**Hint 1.**
Equal aspect ratio is set by ``plt.gca().set_aspect('equal')`` in
Matplotlib (``import matplotlib.pyplot as plt``)
and by ``plot(..., daspect=[1,1,1], daspectmode='equal')``
in SciTools (``import scitools.std as plt``).

.. --- end hint in exercise ---

.. --- begin hint in exercise ---

**Hint 2.**
If you want to use Odespy to solve the equations, order the ODEs
like :math:`\dot \bar x, \bar x, \dot\bar y,\bar y` such that the Euler-Cromer
scheme can (also) be used (``odespy.EulerCromer``).

.. --- end hint in exercise ---

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**b)**
Write a test function for testing that :math:`\Theta=0` and :math:`\epsilon=0`
gives :math:`x=y=0` for all times.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**c)**
Write another test function for checking that the pure vertical
motion of the elastic pendulum is correct.
Start with simplifying the ODEs for pure vertical motion and show that
:math:`\bar y(\bar t)` fulfills a vibration equation with
frequency :math:`\sqrt{\beta/(1-\beta)}`. Set up the exact solution.

Write a test function that
uses this special case to verify the ``simulate`` function. There will
be numerical approximation errors present in the results from
``simulate`` so you have to believe in correct results and set a
(low) tolerance that corresponds to the computed maximum error.
Use a small :math:`\Delta t` to obtain a small numerical approximation error.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**d)**
Make a function ``demo(beta, Theta)`` for simulating an elastic pendulum with a
given :math:`\beta` parameter and initial angle :math:`\Theta`. Use 600 time steps
per period to get every accurate results, and simulate for 3 periods.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``elastic_pendulum``.

.. --- end exercise ---

.. --- begin exercise ---

.. _vib:exer:pendulum_elastic_drag:

Exercise 1.23: Simulate an elastic pendulum with air resistance
---------------------------------------------------------------

This is a continuation :ref:`vib:exer:pendulum_elastic_drag`.
Air resistance on the body with mass :math:`m` can be modeled by the
force :math:`-\frac{1}{2}\varrho C_D A|\boldsymbol{v}|\boldsymbol{v}`,
where :math:`C_D` is a drag coefficient (0.2 for a sphere), :math:`\varrho`
is the density of air (1.2 :math:`\hbox{kg }\,{\hbox{m}}^{-3}`), :math:`A` is the
cross section area (:math:`A=\pi R^2` for a sphere, where :math:`R` is the radius),
and :math:`\boldsymbol{v}` is the velocity of the body.
Include air resistance in the original model, scale the model,
write a function ``simulate_drag`` that is a copy of the ``simulate``
function from :ref:`vib:exer:pendulum_elastic_drag`, but with the
new ODEs included, and show plots of how air resistance
influences the motion.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``elastic_pendulum_drag``.

.. Closing remarks for this Exercise

Remarks          (1)
~~~~~~~~~~~~~~~~~~~~

Test functions are challenging to construct for the problem with
air resistance. You can reuse the tests from
:ref:`vib:exer:pendulum_elastic_drag` for ``simulate_drag``,
but these tests does not verify the new terms arising from air
resistance.

.. --- end exercise ---

