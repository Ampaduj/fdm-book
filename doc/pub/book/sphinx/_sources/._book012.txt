.. !split

.. _ch:convdiff:

Advection-dominated equations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Wave (the chapter :ref:`ch:wave`) and diffusion (the chapter :ref:`ch:diffu`) equations
are solve reliably by finite difference methods. As soon as we add a
first-order derivative in space, representing *advective transport* (also
known as convective transport), the numerics gets more complicated, and
intuitively attractive methods no longer work well. We shall show
how and why methods fail and provide remedies. The present chapter
builds on basic knowledge about finite difference methods for
the diffusion equations, including the analysis by Fourier components,
truncation error analysis ( :ref:`ch:trunc`), and
compact difference notation.

.. _advec:1D:

One-dimensional time-dependent advection equations
==================================================

We consider the pure advection model

.. _Eq:advec:1D:pde1:u:

.. math::

    \tag{454}
    \frac{\partial u}{\partial t} + v\frac{partial u}{\partial x} = 0,\quad
         x\in (0,L),\ t\in (0,T],
        
        

.. _Eq:advec:1D:pde1:U0:

.. math::

    \tag{455}
    u(x,0) = I(x), x\in (0,L),
        
        

.. _Eq:advec:1D:pde1:I:

.. math::

    \tag{456}
    u(0,t) = U_0, t\in (0,T].
        
        

In :ref:`(454) <Eq:advec:1D:pde1:u>`, :math:`v` is a given parameter, typically reflecting
the velocity of transport of a quantity :math:`u` with a flow.
There is only one boundary condition :ref:`(455) <Eq:advec:1D:pde1:U0>` since
there is only a first-derivative term in the PDE :ref:`(454) <Eq:advec:1D:pde1:u>`.
The information at :math:`x=0` and the initial condition get
transported in positive :math:`x` direction
if :math:`v>0` through the domain.

The solution of :ref:`(454) <Eq:advec:1D:pde1:u>` in an infinite domain (no condition
:ref:`(455) <Eq:advec:1D:pde1:U0>` at :math:`x=0`) is

.. _Eq:advec:1D:pde1:sol:

.. math::

    \tag{457}
    u(x,t) = I(x-vt){\thinspace .}
        
        

This is also the solution we expect if we let :math:`I(x)` be located in
the interior of the domain such that :math:`\lim_{x\rightarrow 0,L}I(x)=0`
and :math:`U_0=0`.

Simplest scheme: forward in time, centered in space
---------------------------------------------------

Method          (1)
~~~~~~~~~~~~~~~~~~~

A first attempt to solve a PDE like :ref:`(454) <Eq:advec:1D:pde1:u>` will normally
look for a time-discretization scheme that is explicit so we avoid
solving systems of linear equations. In space, we anticipate that
centered differences are most accurate and therefore best. These
two arguments lead us to a Forward Euler scheme in time and
centered differences in space:

.. _Eq:_auto181:

.. math::

    \tag{458}
    [D_t^+ u + vD_{2x} u = 0]^n_i
        
        

Written out,

.. math::
         u^{n+1} = u^n - \frac{1}{2} C (u^n_{i+1}-u_{i-1}),

with :math:`C` as the Courant number

.. math::
         C = \frac{v\Delta t}{\Delta x}{\thinspace .}

Implementation          (9)
~~~~~~~~~~~~~~~~~~~~~~~~~~~

A solver function for our scheme goes as follows.

.. code-block:: python

        import numpy as np
        import matplotlib.pyplot as plt
        
        def solver_FECS(I, U0, v, L, dt, C, T, user_action=None):
            Nt = int(round(T/float(dt)))
            t = np.linspace(0, Nt*dt, Nt+1)   # Mesh points in time
            dx = v*dt/C
            Nx = int(round(L/dx))
            x = np.linspace(0, L, Nx+1)       # Mesh points in space
            # Make sure dx and dt are compatible with x and t
            dx = x[1] - x[0]
            dt = t[1] - t[0]
            C = v*dt/dx
        
            u   = np.zeros(Nx+1)
            u_1 = np.zeros(Nx+1)
        
            # Set initial condition u(x,0) = I(x)
            for i in range(0, Nx+1):
                u_1[i] = I(x[i])
        
            if user_action is not None:
                user_action(u_1, x, t, 0)
        
            for n in range(0, Nt):
                # Compute u at inner mesh points
                for i in range(1, Nx):
                    u[i] = u_1[i] - 0.5*C*(u_1[i+1] - u_1[i-1])
        
                # Insert boundary condition
                u[0] = U0
        
                if user_action is not None:
                    user_action(u, x, t, n+1)
        
                # Switch variables before next step
                u_1, u = u, u_1

Test cases
~~~~~~~~~~

The typical solution is :math:`u` has the shape of :math:`I` and is transported at
velocity :math:`v` to the right (if :math:`v>0`). Let us choose a smooth and non-smooth
initial condition:

.. _Eq:advec:1D:case_gaussian:

.. math::

    \tag{459}
    u(x,0) = Ae^{-\frac{1}{2}\left(\frac{x-L/10}{\sigma}\right)^2},
        
        

.. _Eq:advec:1D:case_cos:

.. math::

    \tag{460}
    u(x,0) = A\cos\left(\frac{5\pi}{L}\left( x - \frac{L}{10}\right)\right),\quad
        x < \frac{L}{5} \hbox{ else } 0{\thinspace .}
        
        

The parameter :math:`A` is the maximum value of the initial condition.

We scale the problem and introduce :math:`\bar x = x/L` and :math:`\bar t= vt/L`,
which gives

.. math::
         \frac{\partial\bar u}{\partial \bar t} +
        \frac{\partial\bar u}{\partial\bar x} = 0{\thinspace .}

The unknown :math:`u` is scaled by the maximum value of the initial condition:
:math:`\bar u = u/\max |I(x)|` such that :math:`|\bar u(\bar x, 0)|\in [0,1]`.
The scaled problem is solved by setting :math:`v=1`, :math:`L=1`, and :math:`A=1`.
From now on we drop the bars.

To run a case and plot the solution, we make the function

.. code-block:: python

        def run_FECS(case):
            if case == 'gaussian':
                def I(x):
                    return np.exp(-0.5*((x-L/10)/sigma)**2)
            elif case == 'cosinehat':
                def I(x):
                    return np.cos(np.pi*5/L*(x - L/10)) if x < L/5 else 0
        
            L = 1.0
            sigma = 0.02
            legends = []
        
            def plot(u, x, t, n):
                """Plot every m steps in the same figure."""
                m = 40
                if n % m != 0:
                    return
                print 't=%g, n=%d, u in [%g, %g] w/%d points' % \ 
                      (t[n], n, u.min(), u.max(), x.size)
                if np.abs(u).max() > 3:  # Instability?
                    return
                plt.plot(x, u)
                legends.append('t=%g' % t[n])
                if n > 0:
                    plt.hold('on')
        
            U0 = 0
            dt = 0.001
            C = 1
            T = 1
            solver(I=I, U0=U0, v=1.0, L=L, dt=dt, C=C, T=T,
                   user_action=plot)
            plt.legend(legends, loc='lower left')
            plt.savefig('tmp.png'); plt.savefig('tmp.pdf')
            plt.axis([0, L, -0.75, 1.1])
            plt.show()

Bug?
~~~~

Running either of the test cases, the plot becomes a mess, and
the printout of :math:`u` values in the ``plot`` function reveals that
:math:`u` grows very quickly. We may reduce :math:`\Delta t` and make it
very small, yet the solution just grows.
Such behavior points to a bug in the code.
However, choosing a coarse mesh and performing a time step by
hand calculations produce the same numbers as in the code, so
it seems that the implementation is correct.
The hypothesis is therefore that the solution is unstable.

Analysis of the scheme
----------------------

We can analyze the finite difference scheme by look at how it treats
a Fourier component

.. math::
         u_q^n = A^n e^{ikq\Delta x}{\thinspace .}

The corresponding analytical Fourier component is

.. math::
         u = {A_{\small\mbox{e}}}^n e^{ikx},\quad {A_{\small\mbox{e}}} = e^{-ivk\Delta t}=e^{-iCkx}{\thinspace .}

In particular, :math:`|{A_{\small\mbox{e}}}| \leq 1`.

Inserting the numerical component in the scheme,

.. math::
         [D_t^+ A^n e^{ikq\Delta x} + v D_{2x}A^n e^{ikq\Delta x}]^n_i,

and making use of :ref:`(595) <Eq:form:exp:fd1c:center>`
results in

.. math::
         [e^{ikq\Delta x} (\frac{A-1}{\Delta t} + v\frac{1}{\Delta x}i\sin (k\Delta x))]^n_i,

which implies

.. math::
         A = 1 - iC\sin(k\Delta x){\thinspace .}

The numerical solution features the formula :math:`A^n`. To find out whether
:math:`A^n` means growth in time, we rewrite :math:`A` in polar form: :math:`A=A_re^{i\phi}`,
for real numbers :math:`A_r` and :math:`\phi`,
since we then have :math:`A^n = A_r^ne^{i\phi n}`. The magnitude of :math:`A^n` is
:math:`A_r^n`. In our case, :math:`A_r = (1 + C^2\sin^2(kx))^{1/2} > 1`, so
:math:`A_r^n` will increase in time, whereas the
exact solution will not. Regardless of :math:`\Delta t`, we get unstable
numerical solutions.

Leapfrog in time, centered differences in space
-----------------------------------------------

Method          (2)
~~~~~~~~~~~~~~~~~~~

Another explicit scheme is to do a "leapfrog" jump over :math:`2\Delta t` in
time and combine it with central differences in space:

.. math::
         [D_{2t} u + vD_{2x} u = 0,

which results in the updating formula

.. math::
         u^{n+1} = u^{n-1} - C(u_{i+1}-u_{i-1}){\thinspace .}

A special scheme is needed to compute :math:`u^1`, but we leave that problem or
now.

Implementation          (10)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We now need to have three time levels and must modify our solver a bit:

.. code-block:: python

        Nt = int(round(T/float(dt)))
        t = np.linspace(0, Nt*dt, Nt+1)   # Mesh points in time
        ...
        u   = np.zeros(Nx+1)
        u_1 = np.zeros(Nx+1)
        u_2 = np.zeros(Nx+1)
        ...
        for n in range(0, Nt):
            if scheme == 'FECS':
                for i in range(1, Nx):
                    u[i] = u_1[i] - 0.5*C*(u_1[i+1] - u_1[i-1])
            elif scheme == 'LFCS':
                if n == 0:
                    # Use some scheme for the first step
                    for i in range(1, Nx):
                        ...
                else:
                    for i in range(1, Nx+1):
                        u[i] = u_2[i] - C*(u_1[i] - u_1[i-1])
        
            # Switch variables before next step
            u_2, u_1, u = u_1, u, u_2

Running the test case
~~~~~~~~~~~~~~~~~~~~~

Let us try a coarse mesh such that the smooth Gaussian initial condition
is represented by 1 at mesh node 1 and 0 at all other nodes. This
triangular initial condition should then be advected to the right.
Choosing scaled variables as :math:`\Delta t=0.1`, :math:`T=1`, and :math:`C=1` gives
the plot in Figure :ref:`advec:1D:case_gaussian:fig:LFCS`, which
is in fact identical to the exact solution (!).

.. _advec:1D:case_gaussian:fig:LFCS:

.. figure:: solver_FE_Upw.png
   :width: 500

   Leapfrog scheme with :math:`\Delta t = 0.1` and :math:`C=1`

Analysis
~~~~~~~~

We can perform a Fourier analysis again. Inserting the numerical
Fourier component in the Leapfrog scheme, we get

.. math::
         A^2 - i2C\sin(k\Delta x) A - 1 = 0,

and

.. math::
         A = -iC\sin(k\Delta x) \pm \sqrt{1-C^2\sin^2(k\Delta x)}{\thinspace .}

Rewriting to polar form, :math:`A=A_re^{i\phi}`, we see that :math:`A_r=1`, so the
numerical component is not increasing or decreasing in time, which is
exactly what we want. However, for :math:`C>1`, the square root can become
complex valued, so stability is obtained only as long as :math:`C\leq 1`.

[**hpl 24**: The complete numerical solution? How are the two roots combined?]

We introduce :math:`p=k\Delta x`. The amplification factor now reads

.. math::
         A = -iC\sin p \pm \sqrt{1-C^2\sin^2 p},

and is to be compared to the exact amplification factor

.. math::
         {A_{\small\mbox{e}}} = e^{-ikv\Delta t} = e^{-ikC\Delta x} = e^{-iCp}{\thinspace .}

the section :ref:`advec:1D:disprel` compares many numerical amplification factors
with the exact expression.

Upwind differences in space
---------------------------

.. index:: upwind difference

Since the PDE reflects transport of information along with a flow in
positive :math:`x` direction :math:`v>0`, it could be natural to go upstream and not
downstream in a spatial derivative. That is, we approximate

.. math::
        
        \frac{\partial u}{\partial x}(x_i,t_n)\approx [D^-_x u]^n_i = \frac{u^n_{i} - u^n_{i-1}}{\Delta x}{\thinspace .}

This is called an *upwind difference*. This spatial approximation does magic to
the scheme we had with Forward Euler in time and centered difference in space.
With an upwind difference,

.. _Eq:advec:1D:upwind:

.. math::

    \tag{461}
    [D^+_t u + vD^-_x u = 0]^n_i,
        
        

written out as

.. math::
         u^{n+1} = u^n_i - C(u^{n}_{i}-u^{n}_{i-1}),

gives a robust scheme that is stable if :math:`C\leq 1`.
As with the Leapfrog scheme, it becomes exact if :math:`C=1`.
A plot of the solution in case :math:`C=1` is therefore given in
Figure :ref:`advec:1D:case_gaussian:fig:LFCS`.

The amplification factor can be computed using the
formula :ref:`(593) <Eq:form:exp:fd1:bw>`,

.. math::
         \frac{A - 1}{\Delta t} + \frac{v}{\Delta x}(1 - e^{-ik\Delta x}) = 0,

which means

.. math::
         A = 1 - C(1 - \cos(p) - i\sin(p)){\thinspace .}

For :math:`C<1` there is, unfortunately,
non-physical damping of discrete Fourier components. This damping can
be quite severe.

One can interpret the upwind difference as extra, artificial diffusion
in the equation. Solving

.. math::
         \frac{\partial u}{\partial t} + v\frac{\partial u}{\partial x}
        = \nu\frac{\partial^2 u}{\partial x^2},

by a forward difference time and centered differences in space,

.. math::
         D^+_t u + vD_{2x} u = \nu D_xD_x u]^n_i,

gives actually the upwind scheme :ref:`(461) <Eq:advec:1D:upwind>` if
:math:`\nu = v\Delta x/2`. That is, solving the PDE :math:`u_t + vu_x=0`
by centered differences in space and forward difference in time is
unsuccessful, but by adding some artificial diffusion :math:`\nu u_{xx}`,
the method becomes stable.

A Crank-Nicolson discretization in time and centered differences in space
-------------------------------------------------------------------------

.. math::
         A = \frac{1 - \frac{1}{2} i C\sin p}{1 + \frac{1}{2} i C\sin p}{\thinspace .}

The Lax-Wendroff method
-----------------------

.. math::
         A = 1 - iC\sin p - 2C^2\sin^2 (p/2){\thinspace .}

.. _advec:1D:disprel:

Analysis of dispersion relations
--------------------------------

We have developed expressions for :math:`A(C,p)` in the exact solution
:math:`u_q^n=A^ne^{ikq\Delta x}` of the discrete equations. These
expressions are valuable for investigating the quality of the numerical
solutions. Note that the Fourier component that solves the original
PDE problem has no damping and moves with constant velocity :math:`v`. There
are two basic errors in the numerical Fourier component: there may be
damping and the wave velocity may depend on :math:`C` and :math:`p=k\Delta x`.

The shortest wavelength that can be represented is :math:`\lambda = 2\Delta x`.
The corresponding :math:`k` is :math:`k=2\pi/\lambda = \pi/Delta x`, so :math:`p=k\Delta x\in
(0,\pi]`.

Given a complex :math:`A` as a function of :math:`C` and :math:`p`, how can we visualize
it? The two key ingredients in :math:`A` is the magnitude, reflecting damping or
growth of the wave, and the angle, closely related to the
velocity of the wave. The Fourier component

.. math::
         D^n e^{ik(x-ct)}

has damping :math:`D` and wave velocity :math:`c`. Let us express our :math:`A` in
polar form, :math:`A = A_re^{i\phi}`, and insert this expression in
our discrete component :math:`u_q^n = A^ne^{ikq\Delta x} = A^ne^{ikx}`:

.. math::
        
        u^n_q = A_r^n e^{i\phi n} e^{ikx} = A_r^n e^{i(kx - n\phi)} =
        A_r^ne^{i(k(x - ct))},

for

.. math::
        
        c = \frac{\phi}{k\Delta t}{\thinspace .}
        

Now,

.. math::
         k\Delta t = \frac{Ck\Delta x}{v}=\frac{Cp}{v},

so

.. math::
         c = \frac{\phi v}{Cp}{\thinspace .}

An appropriate dimensionless quantity to plot is :math:`c/v`:

.. math::
         \frac{c}{v} = \frac{\phi}{Cp}{\thinspace .}

.. _advec:1D:disprel:C099:

.. figure:: disprel_C0_99.png
   :width: 800

   Dispersion relations for :math:`C=0.99`

.. _advec:1D:disprel:C09:

.. figure:: disprel_C0_9.png
   :width: 800

   Dispersion relations for :math:`C=0.9`

.. _advec:1D:disprel:C08:

.. figure:: disprel_C0_8.png
   :width: 800

   Dispersion relations for :math:`C=0.8`

.. _advec:1D:disprel:C05:

.. figure:: disprel_C0_5.png
   :width: 800

   Dispersion relations for :math:`C=0.5`

.. _advec:1D:disprel:C99:

.. figure:: disprel_C0_99.png
   :width: 800

   Dispersion relations for :math:`C=0.99`

The total damping after some time :math:`T=n\Delta t` is reflected by
:math:`A_r(C,p)^n`. Since normally :math:`A_r<1`, the damping goes like
:math:`A_r^{1/\Delta t}` and approaches zero as :math:`\Delta t\rightarrow 0`.
[**hpl 25**: No, how do we explain that reducing :math:`\Delta t` reduces the damping, while keeping :math:`C` fixed?]

One-dimensional stationary advection-diffusion equation
=======================================================

Two-dimensional advection-diffusion equations
=============================================

Applications of advection equations
===================================

