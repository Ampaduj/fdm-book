!split
======= Operator splitting methods =======
label{nonlin:splitting}

Operator splitting is a natural and old idea. When a PDE or system of PDEs
contains different terms expressing different physics, it is natural to
use different numerical methods for different physical processes. This can
optimize and simplify the overall solution process. The idea was
especially popularized in the context of the Navier-Stokes equations
and reaction-diffusion PDEs. Common names for the technique are *operator
splitting*, *fractional step* methods, and *split-step* methods. We shall
stick to the former name.
In the context of nonlinear differential equations, operator splitting
can be used to isolate nonlinear terms and simplify the solution methods.

A related technique, often known as dimensional splitting or
alternating direction implicit (ADI) methods, is to split the spatial
dimensions and solve a 2D or 3D problem as two or three
consecutive 1D problems, but this type of splitting
is not to be further considered here.

===== Ordinary operator splitting for ODEs =====
label{nonlin:splitting:ODE}

idx{operator splitting} idx{splitting ODEs}
idx{fractional step methods}

Consider first an ODE where the right-hand side is split into two
terms:

!bt
\begin{equation}
u' = f_0(u) + f_1(u)\tp
\end{equation}
!et
In case $f_0$ and $f_1$ are linear functions of $u$, $f_0=au$ and $f_1=bu$,
we have $u(t)=Ie^{(a+b)t}$, if $u(0)=I$.
When going one time step of length $\Delta t$ from $t_n$ to $t_{n+1}$, we have

!bt
\[ u(t_{n+1}) = u(t_n)e^{(a+b)\Delta t}\tp\]
!et
This expression can be also be written as

!bt
\[ u(t_{n+1}) = u(t_n)e^{a\Delta t}e^{b\Delta t},\]
!et
or

!bt
\begin{align}
u^\stepzero &= u(t_n)e^{a\Delta t},
label{nonlin:splitting:ODE:step1}\\
u(t_{n+1}) &= u^\stepzero e^{b\Delta t}
label{nonlin:splitting:ODE:step2}
\end{align}
!et
The first step (ref{nonlin:splitting:ODE:step1}) means solving
$u'=f_0$ over a time interval $\Delta t$ with $u(t_n)$ as start value.
The second step (ref{nonlin:splitting:ODE:step2}) means solving
$u'=f_1$ over a time interval $\Delta t$ with the value at the end
of the first step as start value.
That is, we progress the solution in two steps and solve
two ODEs $u'=f_0$ and $u'=f_1$. The order of the equations is not
important. From the derivation above we see that solving $u'=f_1$
prior to $u'=f_0$ can equally well be done.

The technique is exact if the ODEs are linear. For nonlinear ODEs it is
only an approximate method with error $\Delta t$. The technique can
be extended to an arbitrary number of steps; i.e., we may split the PDE
system into any number of subsystems. Examples will illuminate this principle.


===== Strang splitting for ODEs =====
label{nonlin:splitting:ODE_Strang}

idx{Strang splitting}

The accuracy of the splitting method in Section ref{nonlin:splitting:ODE}
can be improved from $\Oof{\Delta t}$ to $\Oof{\Delta t^2}$ using so-called
*Strang splitting*, where we take half a step with the $f_0$ operator,
a full step with the $f_1$ operator, and finally half another step with
the $f_0$ operator. During a time interval $\Delta t$ the algorithm can
be written as follows.

!bt
\begin{align*}
\frac{du^{\stepzero}}{dt} &= f_0(u^{\stepzero}),
\quad u^{\stepzero}(t_n)=u(t_n),
\quad t\in [t_n,t_n+\half\Delta t],\\
\frac{du^{\stephalf}}{dt} &= f_1(u^{\stephalf}),
\quad u^{\stephalf}(t_n)=u^{\stepzero}(t_{n+\half}),
\quad t\in [t_n,t_n+\Delta t],\\
\frac{du^{\stepone}}{dt}  &= f_0(u^{\stepone}),
\quad u^{\stepone}(t_{n+\half})=u^{\stephalf}(t_{n+1}),
\quad t\in [t_n+\half\Delta t, t_n+\Delta t]\tp
\end{align*}
!et
The global solution is set as $u(t_{n+1}) = u^{\stepone}(t_{n+1})$.

There is no use in combining higher-order methods with
ordinary splitting since the error due to splitting is $\Oof{\Delta
t}$, but for Strang splitting it makes sense to use schemes of order
$\Oof{\Delta t^2}$.

With the notation introduced for Strang splitting, we may express
ordinary first-order splitting as

!bt
\begin{align*}
\frac{du^{\stepzero}}{dt} &= f_0(u^{\stepzero}),\quad u^{\stepzero}(t_n)=u(t_n),
\quad t\in [t_n,t_n+\Delta t],\\
\frac{du^{\stepone}}{dt} &= f_1(u^{\stepone}),\quad u^{\stepone}(t_n)=u^{\stepzero}(t_{n+1}),
\quad t\in [t_n,t_n+\Delta t],
\end{align*}
!et
with global solution set as $u(t_{n+1}) = u^{\stepone}(t_{n+1})$.

===== Example: Logistic growth =====
label{nonlin:splitting:logistic}

Let us split the (scaled) logistic equation

!bt
\[ u'=u(1-u),\quad u(0)=0.1,\]
!et
with solution $u=(9e^{-t}+1)^{-1}$, into

!bt
\[ u'=u - u^2 = f_0(u) + f_1(u), \quad f_0(u)=u,\quad f_1(u)=-u^2\tp\]
!et
We solve $u'=f_0(u)$ and $u'=f_1(u)$ by a Forward Euler step.
In addition, we add a method where we solve $u'=f_0(u)$ analytically,
since the equation is actually $u'=u$ with solution $e^t$.
The software that accompanies the following methods is the file
"`split_logistic.py`": "${src_nonlin}/split_logistic.py".

=== Splitting techniques ===

Ordinary splitting takes a Forward Euler step for each of the ODEs
according to

!bt
\begin{align}
\frac{u^{\stepzero,n+1} - u^{\stepzero,n}}{\Delta t} &=
f_0(u^{\stepzero,n}),\quad
u^{\stepzero,n} = u(t_n),\quad t\in [t_n,t_n+\Delta t],\\
\frac{u^{\stepone,n+1} - u^{\stepone, n}}{\Delta t} &= f_1(u^{\stepone,n}),\quad
u^{\stepone,n} = u^{\stepzero,n+1},\quad t\in [t_n,t_n+\Delta t],
\end{align}
!et
with $u(t_{n+1}) = u^{\stepone,n+1}$.

Strang splitting takes the form

!bt
\begin{align}
\frac{u^{\stepzero,n+\half} - u^{\stepzero,n}}{\half\Delta t} &=
f_0(u^{\stepzero,n}),\quad
u^{\stepzero,n} = u(t_n),\quad t\in [t_n,t_n+\half\Delta t],\\
\frac{u^{\stephalf,n+1}-u^{\stephalf,n}}{\Delta t} &=
f_1(u^{\stephalf,n}),\quad
u^{\stephalf,n} = u^{\stepzero, n+\half},\quad t\in [t_n,t_n+\Delta t],\\
\frac{u^{\stepone, n+1} - u^{\stepone, n+\half}}{\half\Delta t} &=
f_0(u^{\stepone,n+\half}),\quad
u^{\stepone,n+\half} = u^{\stephalf,n+1},\quad
t\in [t_n+\half\Delta t, t_n+\Delta t]\tp
\end{align}
!et

=== Verbose implementation ===

The following function computes four solutions arising from the Forward
Euler method, ordinary splitting, Strang splitting, as well as Strang splitting
with exact treatment of $u'=f_0(u)$:

@@@CODE src-nonlin/split_logistic.py fromto: import numpy@def solver_compact

=== Compact implementation ===

We have used quite many lines for the steps in the splitting methods.
Many will prefer to condense the code a bit, as done here:

@@@CODE-8 src-nonlin/split_logistic.py fromto: # Ordinary splitting@return u_FE

=== Results ===

Figure ref{nonlin:splitting:ODE:logistic:fig} shows that the impact of
splitting is significant. Interestingly, however,
the Forward Euler method applied to the entire problem directly is much more
accurate than any of the splitting schemes. We also see that Strang
splitting is definitely more accurate than ordinary splitting and that
it helps a bit to use an exact solution of $u'=f_0(u)$.  With a large
time step ($\Delta t = 0.2$, left plot in Figure
ref{nonlin:splitting:ODE:logistic:fig}), the asymptotic values are off
by 20-30%.  A more reasonable time step ($\Delta t = 0.05$, right plot
in Figure ref{nonlin:splitting:ODE:logistic:fig}) gives better
results, but still the asymptotic values are up to 10% wrong.

As technique for solving nonlinear ODEs, we realize that the present
case study is not particularly promising, as the Forward Euler method
both linearizes the original problem and provides a solution that is
much more accurate than any of the splitting techniques.
In complicated multi-physics settings, on the other hand, splitting
may be the only feasible way to go, and sometimes you really need to apply
different numerics to different parts of a PDE problem.
But in very simple problems, like the logistic ODE, splitting is just an
inferior technique. Still, the logistic ODE is ideal for introducing all
the mathematical details and for investigating the behavior.

FIGURE: [fig-nonlin/split_logistic, width=800 frac=1] Effect of ordinary and Strang splitting for the logistic equation. label{nonlin:splitting:ODE:logistic:fig}

# Cannot analyze logistic method because we have no exact solution
# of the discrete equations. But in the next linear problem we can analyze.

===== Reaction-diffusion equation =====
label{nonlin:splitting:RD}

Consider a diffusion equation coupled to chemical reactions modeled by
a nonlinear term $f(u)$:

!bt
\[ \frac{\partial u}{\partial t} = \dfc\nabla^2u + f(u)\tp\]
!et
This is a physical process composed of two individual processes:
$u$ is the concentration of a substance that is locally generated by
a chemical reaction $f(u)$, while $u$ is spreading in space because
of diffusion. There are obviously two time scales: one for the chemical
reaction and one for diffusion. Typically, fast chemical reactions require
much finer time stepping than slower diffusion processes.
It could therefore be advantageous to split
the two physical effects in separate models and use different numerical methods
for the two.

A natural spitting in the present case is

!bt
\begin{align}
\frac{\partial u^{\stepzero}}{\partial t} &= \dfc\nabla^2 u^{\stepzero},
label{nonlin:splitting:RD:eq:diffu}\\
\frac{\partial u^{\stepone}}{\partial t} &= f(u^{\stepone})
label{nonlin:splitting:RD:eq:decay}\tp
\end{align}
!et
Looking at these familiar problems,
we may apply a $\theta$ rule (implicit) scheme for
(ref{nonlin:splitting:RD:eq:diffu}) over one time step
and avoid dealing with nonlinearities
by applying an explicit scheme for (ref{nonlin:splitting:RD:eq:decay})
over the same time step.

Suppose we have some solution $u$ at time level $t_n$. For flexibility,
we define a $\theta$ method for the diffusion part
(ref{nonlin:splitting:RD:eq:diffu}) by

!bt
\[ [D_t u^\stepzero =
\dfc (D_xD_x u^\stepzero + D_y D_y u^\stepzero)]^{n+\theta}\tp\]
!et
We use $u^{n}$ as initial condition for $u^\stepzero$.

The reaction part, which is defined at each mesh point (without coupling
values in different mesh points), can employ any scheme for an ODE.
Here we use an Adams-Bashforth method of order 2. Recall that the overall
accuracy of the splitting method
is maximum $\Oof{\Delta t^2}$ for Strang splitting,
otherwise it is just $\Oof{\Delta t}$. Higher-order methods for ODEs will
therefore be a waste of work. The 2nd-order Adams-Bashforth method reads

!bt
\begin{equation}
u^{\stepone,n+1}_{i,j} = u^{\stepone,n}_{i,j} +
\half\Delta t\left( 3f(u^{\stepone, n}_{i,j}, t_n) -
f(u^{\stepone, n-1}_{i,j}, t_{n-1})
\right)
\tp
\end{equation}
!et
We can use a Forward Euler step to start the method, i.e, compute
$u^{\stepone,1}_{i,j}$.

The algorithm goes like this:

 o Solve the diffusion problem for one time step as usual.
 o Solve the reaction ODEs at each mesh point in $[t_n,t_n+\Delta t]$,
   using the diffusion solution in 1. as initial condition.
   The solution of the ODEs constitute the solution of the original problem
   at the end of each time step.

We may use a much smaller time step when solving the reaction part, adapted
to the dynamics of the problem $u'=f(u)$. This gives great flexibility in
splitting methods.

[hpl: Can you make an example? I have started in `src/split_diffu_react.py`.]

===== Example: Reaction-Diffusion with linear reaction term =====
label{nonlin:splitting:RD_linearR}

The methods above may be explored in detail through a specific
computational example in which we compute the convergence
rates associated with four different solution approaches for the
reaction-diffusion equation with a linear reaction term, i.e. $f(u)=-bu$. 
The methods comprise solving without splitting (just straight Forward Euler), 
ordinary splitting, first order Strang splitting, and second order Strang splitting.
In all four methods, a standard centered difference approximation is
used for the spatial second derivative. The methods share the error model
$E = C h^r$, while differing in the step $h$ (being either $dx^2$ or $dx$) and 
the convergence rate $r$ (being either 1 or 2). 

All code commented below is found in the file
"`split_diffu_react.py`": "${src_nonlin}/split_diffu_react.py". When executed,
a function `convergence_rates` is called, from which all convergence
rate computations are handled:

@@@CODE src-nonlin/split_diffu_react.py fromto: def convergence_rates@

Now, with respect to the error ($E = C h^r$), the Forward Euler scheme, the 
ordinary splitting scheme and first order Strang splitting scheme are all
first order ($r = 1$), with a step $h = \Delta x^2 = K^{-1}\Delta t$, where 
$K$ is some constant. This implies that the *ratio* $\frac{\Delta t}{\Delta x^2}$ 
must be held constant during convergence rate calculations. Furthermore, 
the Fourier number $F = \frac{\alpha \Delta t}{\Delta x^2}$ is upwards limited to 
$F = 0.5$, being the stability limit with explicit schemes. Thus, in these cases,
we use the fixed value of $F$ and a given (but changing) spatial resolution $\Delta x$ to
compute the corresponding value of $\Delta t$ according to the expression for $F$.
This assures that $\frac{\Delta t}{\Delta x^2}$ is kept constant. The loop in 
`convergence_rates` runs over a chosen set of grid points (`Nx_values`) which gives 
a doubling of spatial resolution with each iteration ($\Delta x$ is halved).

For the second order Strang splitting scheme, we have $r = 2$ and a step 
$h = \Delta x = K^{-1}\Delta t$, where $K$ again is some constant. In this case,
it is thus the ratio $\frac{\Delta t}{\Delta x}$ that must be held constant 
during the convergence rate calculations. From the expression for $F$, it is 
clear then that $F$ must change with each halving of $\Delta x$. In fact, if 
$F$ is doubled each time $\Delta x$ is halved, the ratio $\frac{\Delta t}{\Delta x}$ 
will be constant (this follows, e.g., from the expression for $F$). This us utilized
in our code.

A solver `diffusion_theta` is used in each of the four solution approaches: 

@@@CODE src-nonlin/split_diffu_react.py fromto: def diffusion_theta@def reaction_FE

For the no splitting approach with Forward Euler in time, this solver handles both
the diffusion and the reaction term. When splitting, `diffusion_theta` takes care 
of the diffusion term only, while the reaction
term is handled either by a Forward Euler scheme in `reaction_FE`, or by a
second order Adams-Bashforth scheme from Odespy. The `reaction_FE` function
covers one complete time step `dt` during ordinary splitting, while Strang
splitting (both first and second order) applies it with `dt/2` twice during 
each time step `dt`. Since the reaction term typically represents a much faster
process than the diffusion term, a further refinement of the time step is made
possible in `reaction_FE`. It was implemented as

@@@CODE src-nonlin/split_diffu_react.py fromto: def reaction_FE@def ordinary_splitting

With the ordinary splitting approach, each time step `dt` is covered twice. First 
computing the impact of the reaction term, then the contribution from the diffusion term:

@@@CODE src-nonlin/split_diffu_react.py fromto: def ordinary_splitting@def Strang_splitting_1st

For the two Strang splitting approaches, each time step `dt` is handled by first computing
the reaction step for (the first) `dt/2`, followed by a diffusion step `dt`, before the reaction step
is treated once again for (the remaining) `dt/2`. Since first order Strang splitting is no better than first order accurate, both the reaction and diffusion steps are computed explicitly. The 
solver was implemented as 

@@@CODE src-nonlin/split_diffu_react.py fromto: def Strang_splitting_1st@def Strang_splitting_2nd

The second order version of the Strang splitting approach utilizes a second order Adams-Bashforth
solver for the reaction part and a Crank-Nicolson scheme for the diffusion part. The solver has the
same structure as the one for first order Strang splitting and was implemented as

@@@CODE src-nonlin/split_diffu_react.py fromto: def Strang_splitting_2nd@def convergence_rates

When executing `split_diffu_react.py`, we find that the estimated convergence rates
are as expected. The second order Strang splitting gives the least error (about $4e^{-5}$) and has second order convergence ($r = 2$), while the remaining three approaches have first order convergence ($r = 1$).



===== Analysis of the splitting method =====

Let us address a linear PDE problem for which we can develop analytical
solutions of the discrete equations, with and without splitting, and discuss
these. Choosing $f(u)=-\beta u$ for a constant $\beta$ gives a linear
problem. We use the Forward Euler method for both the PDE and ODE problems.

We seek a 1D Fourier wave component solution of the problem, assuming
homogeneous Dirichlet conditions at $x=0$ and $x=L$:

!bt
\[ u = e^{-\dfc k^2 t - \beta t}\sin kx,\quad k = \frac{\pi}{L}\tp\]
!et
This component fits the 1D PDE problem ($f=0$). On complex form we can
write

!bt
\[ u = e^{-\dfc k^2 t - \beta t + ikx},\]
!et
where $i=\sqrt{-1}$ and the imaginary part is taken as the physical solution.

We refer to ref[Section ref{diffu:pde1:analysis}][ in
cite{Langtangen_Linge}][the section "Analysis of schemes for
the diffusion equation": "" in cite{Langtangen_Linge}] and to
the book cite{Langtangen_decay} for a discussion of exact numerical
solutions to diffusion and decay problems, respectively.  The key idea
is to search for solutions $A^ne^{ikx}$ and determine $A$.  For the
diffusion problem solved by a Forward Euler method one has

!bt
\[ A = 1 - 4F\sin^p, \]
!et
where $F=\dfc\Delta t/\Delta x^2$ is the mesh Fourier number and $p=k\Delta x/2$
is a dimensionless number reflecting the spatial resolution (number of points
per wave length in space). For the decay problem $u'=-\beta u$, we have
$A=1 - q$, where $q$ is a dimensionless parameter reflecting the resolution
in the decay problem: $q = \beta\Delta t$.

The original model problem can also be discretized by a Forward Euler scheme,

!bt
\[ [D^+_t u = \dfc D_xD_x u - \beta u]^n_i\tp\]
!et
Assuming $A^ne^{ikx}$ we find that

!bt
\[ u^n_i = (1 - 4F\sin^p -q)^n\sin kx\tp\]
!et
We are particularly interested in what happens at one time step. That is,

!bt
\[ u^{n}_{i} = (1-4F\sin^2 p)u^{n-1}_i\tp\]
!et

In the two stage algorithm, we first compute the diffusion step

!bt
\[ u^{\stepzero,n+1}_i = (1 - 4F\sin^2 p)u^{n-1}_i\tp\]
!et
Then we use this as input to the decay algorithm and arrive at

!bt
\[ u^{\stepone,n+1} = (1-q)u^{\stepzero,n+1} = (1-q)(1-4F\sin^2 p) u^{n-1}_i\tp\]
!et
The splitting approximation over one step is therefore

!bt
\[ E = 1 - 4F\sin^p -q - (1-q)(1-4F\sin^2 p) = -q(2 - F\sin^2 p)) \]
!et
