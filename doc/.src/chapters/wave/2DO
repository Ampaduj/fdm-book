- change to u_n[0] etc:
  before changing in src: make all unit tests ready
  advance_* functions: have u_n only as argument, must be updated, NO:
  in advance we should just have u_1, u_2 since this makes most sense
  in Fortran, C, could of course have u_n, u_nm1 (better!)
  subst in all .py files, and wave1D_fd2
  softeng2 too!

- check all .py files that they run
- archival of results (softeng2):
  http://stackoverflow.com/questions/28311141/decorators-for-selective-caching-memoization
- split in wave1D and wave2D
- separate softeng2 which is a list of good habits for wave2D var coeff
  (logging, testing, restart/checkpointing), make skeleton now for softeng2
  and move items below into that doc,
  yield rather than action function (solver as a generator)
  joblib for storing data
- logging module in wave2D, at least the software engineering part, such
  that all important events are logged, see https://docs.python.org/2/howto/logging.html#logging-basic-tutorial
- make project w/solution or text for checkpointing/restart: solver must
  at every Xth time level store everything needed for restart, i.e.,
  all input arguments in a dict pickled to file with the dill module
  (it can handle functions for I, f, etc.). Try it out first, then write.
- make exercises for analysis of wave eqs! None now...
- make .mp4 versions of all movies in mov-wave - otherwise they don't work in Safari (my theory, they don't work now)
- plotting of 3D surface wave with matplotlib, see wave2D_project/arnfinaa_*
  for example, need mayavi example too
  http://docs.enthought.com/mayavi/mayavi/mlab.html
- need verification via constant solution right after Neumann conditions
  are introduced or in the general 1D wave eq solver section (better! can
  explain in test_constant in the primitive Neumann equation solver).
  Explain in detail. Make more tests. Or make an
  exercise. Same as in the wave equation project.
  Remember slides too! Make section in softeng1
  in the general model there and use constant solution as debugging tool.
- write out Problem med symmetry boundary conditions - it is too
  complicated for an exercise. Make an exercise for symmetry in 2D.
- All topics from the wave equation project should be 1D or 2D
  exercises or explained in the text.
- movies with 4 plots and cases at once, show exact use of
  how images can be combined (nice show case for pure scripting too) - softeng2
- Remove all function_UI calls in main, it's too complicated, just
  import functions in ipython or in another script (run_*, test_*)
- Check that codes in the text (1D and 2D have been updated)
  are in accordance with the source.
- Think about a more project based course: say oblig2 is the goal of
  this chapter; state the problems and numerical difficulties, maybe
  we can do that for all chapters (motivating example; what can be
  solved and what are the numerical challenges/problems)
* Check that all nosetests work!
x All the solvers take Nx and C as input and adjust dt. It is much
  easier to compare different C values if dt is the same and dx
  varies! Redo all the solvers to have this feature. Then we can
  easily make movies/figs with several C values. Also, if c differs,
  it is essential to keep dt the same for different physical cases.
  Make some functionality early for storing the solutions in a file.
  Can load several files and make comparison movies.
x update text and slides accordingly

- incorporate the "Springer" BC doc to explain the effect of boundary
  conditions
- add a simple PML BC: multiply the solution by a damping factor
  outside the domain (test in 1D!), incorporate the method in oblig2
- investigate swapping of arrays compared to u[:,:], find out if it works,
  seems so from students
- update text and slides accordingly


- complete energy considerations in wave_analysis
- summarize verification tests for wave1D_vc.py
- periodic boundary conditions a la Gunilla: can we just get the wave back in?
- profile wave2D in detail! Follow the Cython profiling tutorial.
  See http://pynash.org/2013/03/06/timing-and-profiling.html for
  a lot of quick commands in ipython for profiling code! I can use
  that web document to make a separate case study with wave2D, perhaps
  variable coefficients so I can use arithmetic/harmonic avg.
  I also have some separate document with much HPC Python profiling things.
  This is a separate chapter/appendix.
- discuss calling f from advance and all the problems that gives
  in compiled code incl Cython. That will be a section about callbacks.
  Hardcoding the function name solves the problem, but that is not
  general at all... Same comments apply to a variable coefficient function.
  It is easiest to have all functions sampled in arrays.
- Don't use Cython memory view, cf. Dag Sverre mail.
- add exercises about energy, 2D symmetry (Gaussian bell, describe, prove)
- wave_standing.py -> wave1D_standing.py
  wave1D_symmetric.py -> wave1D_symmetry in src and exer
- change 1D codes: set Nx, dt, C, and adjust c. Then
  we can store C=1 solution and repeat with C<1 og plot both in the same
  figure (just different c in these, but that is not seen, only C).
  Or give c and adjust C? Then we must have full control outside the call.
  OK, maybe most natural (yes, C is the derived quantity, then we can *use*
  solver in a smart way with adjusting c).

- illustrate with figures and explain ghost cells in 2D
- staggered grid
- cython doc strings?
- st -> plt

- "Basic Motion Graphics with Python": "http://www.yourmachines.org/tutorials/mgpy.html"
   Basic Motion Graphics with Python contains a lot about making movies
   and animation - check it out

x Implement Neumann via ghost boundaries
- Write with B. Mueller: complex boundaries via ghost points
- check Cython with cpdef func for f and no array for f (and possibly slow
  vectorized computation of f_a), same with Fortran
- add F90 from scipy.org/PerformancePython
- add idx
- exemplify xdmf http://www.xdmf.org/index.php/Write_Xdmf
- use Eigen as C++ matrix library for Python-C++ examples, maybe
  also Armadillo (but FEniCS has replaced Armadilly by Eigen)
  http://eigen.tuxfamily.org/dox/GettingStarted.html
- staggered
- 1st order system: show the method of lines and use of odespy
- exercise with adding u=0 and u_n=0 solutions for radiation,
  similar for 2D (try out!)
- matplotlib animation of f(x), 3 ways from TCSE6
- symmetry, separate module
- exer: piano string with hammer
- exer: gaussian sine source
- exer: spherically symmetric waves
- Newmark for vib and wave (implement and test first - no this is a project for wave since it requires tridiagonal matrix)
- tridiagonal solver in scitools ported to cython, or is scipy user friendly enough? can rely on pure python tridiagonal if not scipy installed