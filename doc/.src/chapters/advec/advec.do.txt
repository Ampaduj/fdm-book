label{ch:advec}

Wave (Chapter ref{ch:wave}) and diffusion (Chapter ref{ch:diffu})
equations are solved reliably by finite difference methods. As soon as
we add a first-order derivative in space, representing *advective
transport* (also known as convective transport), the numerics gets
more complicated, and intuitively attractive methods no longer work
well. We shall show how and why such methods fail and provide
remedies. The present chapter builds on basic knowledge about finite
difference methods for diffusion and wave equations, including the
analysis by Fourier components, truncation error analysis (Appendix
ref{ch:trunc}), and compact difference notation.

======= One-dimensional time-dependent advection equations =======
label{advec:1D}

We consider the pure advection model

!bt
\begin{align}
\frac{\partial u}{\partial t} + v\frac{\partial u}{\partial x} &= 0,\quad
& x\in (0,L),\ t\in (0,T],
label{advec:1D:pde1:u}\\
u(x,0) &= I(x),& x\in (0,L),
label{advec:1D:pde1:U0}\\
u(0,t) &= U_0,& t\in (0,T].
label{advec:1D:pde1:I}
\end{align}
!et
In (ref{advec:1D:pde1:u}), $v$ is a given parameter, typically reflecting
the velocity of transport of a quantity $u$ with a flow.
There is only one boundary condition (ref{advec:1D:pde1:U0}) since
the spatial derivative is only first order in the PDE (ref{advec:1D:pde1:u}).
The information at $x=0$ and the initial condition get
transported in the positive $x$ direction
if $v>0$ through the domain.

It is easiest to find the solution of (ref{advec:1D:pde1:u}) if we remove the
boundary condition and consider a process on the
infinite domain $(-\infty, \infty)$. The solution is simply

!bt
\begin{equation}
u(x,t) = I(x-vt)\tp
label{advec:1D:pde1:sol}
\end{equation}
!et
This is also the solution we expect locally in a finite domain before boundary
conditions have reflected or modified the wave.

[hpl: Should perhaps have more about boundary conditions and exact solutions,
but this is a difficult topic for first-order PDEs.]

===== Simplest scheme: forward in time, centered in space =====
label{advec:1D:FTCS}

=== Method ===

A first attempt to solve a PDE like (ref{advec:1D:pde1:u}) will normally
be to look for a time-discretization scheme that is explicit so we avoid
solving systems of linear equations. In space, we anticipate that
centered differences are most accurate and therefore best. These
two arguments lead us to a Forward Euler scheme in time and
centered differences in space:

!bt
\begin{equation}
[D_t^+ u + vD_{2x} u = 0]^n_i
\end{equation}
!et
Written out, we see that this expression reads

!bt
\[ u^{n+1} = u^n - \half C (u^n_{i+1}-u_{i-1}),\]
!et
with $C$ as the Courant number

!bt
\[ C = \frac{v\Delta t}{\Delta x}\tp\]
!et

=== Implementation ===

A solver function for our scheme goes as follows.

@@@CODE src-advec/advec1D.py fromto: import numpy@def solver\(

=== Test cases ===

The typical solution $u$ has the shape of $I$ and is transported at
velocity $v$ to the right (if $v>0$). Let us consider two different
initial conditions, one smooth (Gaussian pulse) and one non-smooth
(half-truncated cosine pulse):

!bt
\begin{align}
u(x,0) &= Ae^{-\half\left(\frac{x-L/10}{\sigma}\right)^2},
label{advec:1D:case_gaussian}\\
u(x,0) &= A\cos\left(\frac{5\pi}{L}\left( x - \frac{L}{10}\right)\right),\quad
x < \frac{L}{5} \hbox{ else } 0\tp
label{advec:1D:case_cos}
\end{align}
!et
The parameter $A$ is the maximum value of the initial condition.

Before doing numerical simulations, we scale the PDE
problem and introduce $\bar x = x/L$ and $\bar t= vt/L$,
which gives

!bt
\[ \frac{\partial\bar u}{\partial \bar t} +
\frac{\partial\bar u}{\partial\bar x} = 0\tp\]
!et
The unknown $u$ is scaled by the maximum value of the initial condition:
$\bar u = u/\max |I(x)|$ such that $|\bar u(\bar x, 0)|\in [0,1]$.
The scaled problem is solved by setting $v=1$, $L=1$, and $A=1$.
From now on we drop the bars.

To run our test cases and plot the solution, we make the function

@@@CODE src-advec/advec1D.py fromto: def run_FECS@def run\(

=== Bug? ===

Running either of the test cases, the plot becomes a mess, and
the printout of $u$ values in the `plot` function reveals that
$u$ grows very quickly. We may reduce $\Delta t$ and make it
very small, yet the solution just grows.
Such behavior points to a bug in the code.
However, choosing a coarse mesh and performing a time step by
hand calculations produce the same numbers as in the code, so
it seems that the implementation is correct.
The hypothesis is therefore that the solution is unstable.

===== Analysis of the scheme =====
label{advec:1D:FTCS:anal}

It is easy to show that a typical Fourier component

!bt
\[ u(x,t)= B\sin (k(x-ct))\]
!et
is a solution of our PDE for any spatial wave length $\lambda = 2\pi /k$
and any amplitude $B$.
A general solution can be thought to be build of a collection of long and
short waves such waves with different amplitudes. Algebraically, the work
simplifies if we introduce the complex Fourier component

!bt
\[ u(x,t)=\Aex^n e^{ikx},\]
!et
with

!bt
\[ \Aex=Be^{-ikv\Delta t} = Be^{iCkx}\tp\]
!et
Note that $|\Aex| \leq 1$.

It turns out that many schemes also allows a Fourier wave component as
solution, and we can use the numerical value of $A$ to learn about the
quality of the scheme. Hence, to analyze the difference scheme we just
have implemented, we look at how treats the Fourier component

!bt
\[ u_q^n = A^n e^{ikq\Delta x}\tp\]
!et

Inserting the numerical component in the scheme,

!bt
\[ [D_t^+ A^n e^{ikq\Delta x} + v D_{2x}A^n e^{ikq\Delta x}]^n_i,\]
!et
and making use of (ref{form:exp:fd1c:center})
results in

!bt
\[ [e^{ikq\Delta x} (\frac{A-1}{\Delta t} + v\frac{1}{\Delta x}i\sin (k\Delta x))]^n_i,\]
!et
which implies

!bt
\[ A = 1 - iC\sin(k\Delta x)\tp\]
!et
The numerical solution features the formula $A^n$. To find out whether
$A^n$ means growth in time, we rewrite $A$ in polar form: $A=A_re^{i\phi}$,
for real numbers $A_r$ and $\phi$,
since we then have $A^n = A_r^ne^{i\phi n}$. The magnitude of $A^n$ is
$A_r^n$. In our case, $A_r = (1 + C^2\sin^2(kx))^{1/2} > 1$, so
$A_r^n$ will increase in time, whereas the
exact solution will not. Regardless of $\Delta t$, we get unstable
numerical solutions.

===== Leapfrog in time, centered differences in space =====
label{advec:1D:leapfrog}

=== Method ===

Another explicit scheme is to do a ``leapfrog'' jump over $2\Delta t$ in
time and combine it with central differences in space:

!bt
\[ [D_{2t} u + vD_{2x} u = 0,\]
!et
which results in the updating formula

!bt
\[ u^{n+1} = u^{n-1} - C(u_{i+1}-u_{i-1})\tp\]
!et
A special scheme is needed to compute $u^1$, but we leave that problem for
now.

=== Implementation ===

We now need to have three time levels and must modify our solver a bit:

!bc pycod
Nt = int(round(T/float(dt)))
t = np.linspace(0, Nt*dt, Nt+1)   # Mesh points in time
...
u   = np.zeros(Nx+1)
u_1 = np.zeros(Nx+1)
u_2 = np.zeros(Nx+1)
...
for n in range(0, Nt):
    if scheme == 'FECS':
        for i in range(1, Nx):
            u[i] = u_1[i] - 0.5*C*(u_1[i+1] - u_1[i-1])
    elif scheme == 'LFCS':
        if n == 0:
            # Use some scheme for the first step
            for i in range(1, Nx):
                ...
        else:
            for i in range(1, Nx+1):
                u[i] = u_2[i] - C*(u_1[i] - u_1[i-1])

    # Switch variables before next step
    u_2, u_1, u = u_1, u, u_2
!ec

=== Running a test case ===

Let us try a coarse mesh such that the smooth Gaussian initial condition
is represented by 1 at mesh node 1 and 0 at all other nodes. This
triangular initial condition should then be advected to the right.
Choosing scaled variables as $\Delta t=0.1$, $T=1$, and $C=1$ gives
the plot in Figure ref{advec:1D:case_gaussian:fig:LFCS}, which
is in fact identical to the exact solution (!).

FIGURE: [fig-advec/solver_FE_Upw, width=500 frac=0.8] Leapfrog scheme with $\Delta t = 0.1$ and $C=1$. label{advec:1D:case_gaussian:fig:LFCS}


=== Analysis ===

We can perform a Fourier analysis again. Inserting the numerical
Fourier component in the Leapfrog scheme, we get

!bt
\[ A^2 - i2C\sin(k\Delta x) A - 1 = 0,\]
!et
and

!bt
\[ A = -iC\sin(k\Delta x) \pm \sqrt{1-C^2\sin^2(k\Delta x)}\tp\]
!et
Rewriting to polar form, $A=A_re^{i\phi}$, we see that $A_r=1$, so the
numerical component is not increasing or decreasing in time, which is
exactly what we want. However, for $C>1$, the square root can become
complex valued, so stability is obtained only as long as $C\leq 1$.

[hpl: The complete numerical solution? How are the two roots combined?]

We introduce $p=k\Delta x$. The amplification factor now reads

!bt
\[ A = -iC\sin p \pm \sqrt{1-C^2\sin^2 p},\]
!et
and is to be compared to the exact amplification factor

!bt
\[ \Aex = e^{-ikv\Delta t} = e^{-ikC\Delta x} = e^{-iCp}\tp\]
!et
Section ref{advec:1D:disprel} compares many numerical amplification factors
with the exact expression.


===== Upwind differences in space =====
label{advec:1D:FTUP}
idx{upwind difference}

Since the PDE reflects transport of information along with a flow in
positive $x$ direction, when $v>0$, it could be natural to go (what is called)
upstream and not
downstream in a spatial derivative to collect information about the
change of the function. That is, we approximate

!bt
\[
\frac{\partial u}{\partial x}(x_i,t_n)\approx [D^-_x u]^n_i = \frac{u^n_{i} - u^n_{i-1}}{\Delta x}\tp\]
!et
This is called an *upwind difference* (the corresponding difference in the
time direction would be called a backward difference, and we could use that
name in space too, but *upwind* is the common name for a difference against
the flow in advection problems). This spatial approximation does magic
compared to
the scheme we had with Forward Euler in time and centered difference in space.
With an upwind difference,

!bt
\begin{equation} [D^+_t u + vD^-_x u = 0]^n_i,
label{advec:1D:upwind}
\end{equation}
!et
written out as

!bt
\[ u^{n+1} = u^n_i - C(u^{n}_{i}-u^{n}_{i-1}),\]
!et
gives a robust scheme that is stable if $C\leq 1$.
As with the Leapfrog scheme, it becomes exact if $C=1$, see
Figure ref{advec:1D:case_gaussian:fig:LFCS}.

The amplification factor can be computed using the
formula (ref{form:exp:fd1:bw}),

!bt
\[ \frac{A - 1}{\Delta t} + \frac{v}{\Delta x}(1 - e^{-ik\Delta x}) = 0,\]
!et
which means

!bt
\[ A = 1 - C(1 - \cos(p) - i\sin(p))\tp\]
!et
For $C<1$ there is, unfortunately,
non-physical damping of discrete Fourier components. This damping can
be quite severe.

!bnotice Interpretation of upwind difference as artificial diffusion
One can interpret the upwind difference as extra, artificial diffusion
in the equation. Solving

!bt
\[ \frac{\partial u}{\partial t} + v\frac{\partial u}{\partial x}
= \nu\frac{\partial^2 u}{\partial x^2},\]
!et
by a forward difference time and centered differences in space,

!bt
\[ D^+_t u + vD_{2x} u = \nu D_xD_x u]^n_i,\]
!et
gives actually the upwind scheme (ref{advec:1D:upwind}) if
$\nu = v\Delta x/2$. That is, solving the PDE $u_t + vu_x=0$
by centered differences in space and forward difference in time is
unsuccessful, but by adding some artificial diffusion $\nu u_{xx}$,
the method becomes stable.
!enotice

===== Periodic boundary conditions =====
label{advec:1D:periodic_BC}

So far, we have given then value of on the left boundary, $u_0^n$, and used
the scheme to propagate the solution signal through the domain.
Often, we want to follow such signals for long time series, and periodic
boundary conditions are then relevant since then enable a signal that
leaves the right boundary to immediately enter the left boundary and propagate
through the domain again.

The periodic boundary condition is

!bt
\[ u(0,t) = u(L,t),\quad u_0^n = u_{N_x}^ntp\]
!et
It means that we in the first equation, involving $u_0^n$, insert $u_{N_x}^n$,
and that we in the last equation, involving $u^{n+1}_{N_x}$ insert $u^{n+1}_0$.
Normally, we can do this in the simple way that `u_1[0]` is updated as
`u_1[Nx]` at the beginning of a new time level.

In some schemes we may need $u^{n}_{N_x+1}$ and $u^{n}_{-1}$. Periodicity
then means that these values are equal to $u^n_1$ and $u^n_{N_x-1}$,
respectively. For the upwind scheme it is sufficient to set
`u_1[0]=u_1[Nx]` at a new time level before computing `u[1]`, which ensures
that `u[1]` becomes right and at the next time level `u[0]` at the current
time level is correctly updated.
For the Leapfrog scheme we must update `u[0]` and `u[Nx]` using the scheme:

!bc pycod
if periodic_bc:
    i = 0
    u[i] = u_2[i] - C*(u_1[i+1] - u_1[Nx-1])
for i in range(1, Nx):
    u[i] = u_2[i] - C*(u_1[i+1] - u_1[i-1])
if periodic_bc:
    u[Nx] = u[0]
!ec


===== A Crank-Nicolson discretization in time and centered differences in space =====
label{advec:1D:CN}

Another obvious candidate for time discretization is the Crank-Nicolson
method combined with centered differences in space:

!bt
\[ [D_t u]^n_i + v\half([D_{2x} u]^{n+1}_i + [D_{2x} u]^{n}_i) = 0\tp\]
!et
It can be nice to include the Backward Euler scheme too, via the
$\theta$-rule,

!bt
\[ [D_t u]^n_i + v\theta [D_{2x} u]^{n+1}_i + v(1-\theta)[D_{2x} u]^{n}_i = 0\tp\]
!et
This gives rise to an *implicit* scheme,

!bt
\[ u^{n+1}_i + \frac{\theta}{2} C (u^{n+1}_{i+1} - u^{n+1}_{i-1})
= u^n_i - \frac{1-\theta}{2} C (u^{n}_{i+1} - u^{n}_{i-1})\]
!et
for $i=1,\ldots,N_x-1$. At the boundaries we use periodic conditions:

!bt
\[ u^{n+1}_0 = u^{n+1}_{N_x},\]
!et
however, this destroys the tridiagonal structure of the coefficient matrix.
We therefore try the rough approximation

!bt
\[ u^{n+1}_0 = u^{n}_{N_x},\quad u^{n+1}_{N_x}=u^n_0\tp\]
!et
Otherwise, we need to prescribe $u_0^{n+1}$ and $u_{N_x}^{n+1}$.

The elements on the diagonal in the matrix become:

!bt
\[ A_{i,i} = 1,\quad i=0,\ldots,N_x\tp\]
!et
On the subdiagonal and superdiagonal we have

!bt
\[ A_{i-1,i} = -\frac{\theta}{2} C,\quad A_{i+1,i} = \frac{\theta}{2} C,\quad i=1,\ldots,N_x-1,\]
!et
with $A_{0,1}=0$ and $A_{N_x-1,N_x}=0$ due to the known boundary conditions.
And finally, the right-hand side becomes

!bt
\begin{align*}
b_0 &= u^n_{N_x}\\
b_i &= u^n_i - \frac{1-\theta}{2} C (u^{n}_{i+1} - u^{n}_{i-1}),\quad i=1,\ldots,N_x-1\\
b_{N_x} &= u^n_0
\end{align*}
!et

The dispersion relation follows from inserting $u^n_i = A^ne^{ikx}$
and using the formula (ref{form:exp:fd1c:center}) for the spatial
differences:

!bt
\[ A = \frac{1 - (1-\theta) i C\sin p}{1 + theta i C\sin p}\tp\]
!et

===== The Lax-Wendroff method =====
label{advec:1D:LaxW}

The Lax-Wendroff method is based on three ideas:

 o Express $u^{n+1}_i$ in terms of quantities at $t=t_n$ by
   means of a Taylor polynomial of second degree.
 o Replace time-derivatives at $t=t_n$ by spatial derivatives,
   using the PDE.
 o Discretize the spatial derivatives by second-order differences.

Let us do this:

!bt
\[ u^{n+1} = u^n_i + \Delta t\left(\frac{\partial u}{\partial t}\right)^n_i
+ \frac{1}{2}\Delta t^2\left(\frac{\partial^2 u}{\partial t^2}\right)^n_i\tp\]
!et
From the PDE we have that

!bt
\[ A = 1 - iC\sin p - 2C^2\sin^2 (p/2)\tp\]
!et

===== Analysis of dispersion relations =====
label{advec:1D:disprel}

We have developed expressions for $A(C,p)$ in the exact solution
$u_q^n=A^ne^{ikq\Delta x}$ of the discrete equations. These
expressions are valuable for investigating the quality of the numerical
solutions. Note that the Fourier component that solves the original
PDE problem has no damping and moves with constant velocity $v$. There
are two basic errors in the numerical Fourier component: there may be
damping and the wave velocity may depend on $C$ and $p=k\Delta x$.

The shortest wavelength that can be represented is $\lambda = 2\Delta x$.
The corresponding $k$ is $k=2\pi/\lambda = \pi/\Delta x$, so $p=k\Delta x\in
(0,\pi]$.

Given a complex $A$ as a function of $C$ and $p$, how can we visualize
it? The two key ingredients in $A$ is the magnitude, reflecting damping or
growth of the wave, and the angle, closely related to the
velocity of the wave. The Fourier component

!bt
\[ D^n e^{ik(x-ct)}\]
!et
has damping $D$ and wave velocity $c$. Let us express our $A$ in
polar form, $A = A_re^{i\phi}$, and insert this expression in
our discrete component $u_q^n = A^ne^{ikq\Delta x} = A^ne^{ikx}$:

!bt
\[
u^n_q = A_r^n e^{i\phi n} e^{ikx} = A_r^n e^{i(kx - n\phi)} =
A_r^ne^{i(k(x - ct))},\]
!et
for

!bt
\[
c = \frac{\phi}{k\Delta t}\tp
\]
!et
Now,

!bt
\[ k\Delta t = \frac{Ck\Delta x}{v}=\frac{Cp}{v},\]
!et
so

!bt
\[ c = \frac{\phi v}{Cp}\tp\]
!et
An appropriate dimensionless quantity to plot is $c/v$:

!bt
\[ \frac{c}{v} = \frac{\phi}{Cp}\tp\]
!et

FIGURE: [fig-advec/disprel_C0_99, width=800 frac=1] Dispersion relations for $C=0.99$. label{advec:1D:disprel:C099}

FIGURE: [fig-advec/disprel_C0_9, width=800 frac=1] Dispersion relations for $C=0.9$. label{advec:1D:disprel:C09}

FIGURE: [fig-advec/disprel_C0_8, width=800 frac=1] Dispersion relations for $C=0.8$. label{advec:1D:disprel:C08}

FIGURE: [fig-advec/disprel_C0_5, width=800 frac=1] Dispersion relations for $C=0.5$. label{advec:1D:disprel:C05}

FIGURE: [fig-advec/disprel_C0_99, width=800 frac=1] Dispersion relations for $C=0.99$. label{advec:1D:disprel:C99}

The total damping after some time $T=n\Delta t$ is reflected by
$A_r(C,p)^n$. Since normally $A_r<1$, the damping goes like
$A_r^{1/\Delta t}$ and approaches zero as $\Delta t\rightarrow 0$.
[hpl: No, how do we explain that reducing $\Delta t$ reduces the
damping, while keeping $C$ fixed?]

======= One-dimensional stationary advection-diffusion equation =======
label{advec:1D:stationary}

======= Two-dimensional advection-diffusion equations =======
label{advec:2D}

======= Applications of advection equations =======
label{advec:app}
