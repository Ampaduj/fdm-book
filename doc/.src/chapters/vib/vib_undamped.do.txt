# 2DO:
# _undamped -> _simple everywhere
# Long time integration by adaptive RK: will that improve the
# phase error? Do experiments where we measure the wavelength
# and plot it as function of time. Can we vectorize the
# max/min pt computation?

Vibration problems lead to differential equations with solutions that
oscillate in time, typically in a damped or undamped sinusoidal
fashion.  Such solutions put certain demands on the numerical methods
compared to other phenomena whose solutions are monotone or very smooth.
Both the frequency and amplitude of the oscillations need to be
accurately handled by the numerical schemes. The forthcoming text
presents a range of different methods, from classical ones
(Runge-Kutta and midpoint/Crank-Nicolson methods), to more
modern and popular symplectic (geometric) integration schemes (Leapfrog,
Euler-Cromer, and
# #if FORMAT in ("latex", "pdflatex")
St\"{o}rmer-Verlet
# #else
Stoermer-Verlet
# #endif
methods), but with a clear emphasis on the latter. Vibration problems
occur throughout mechanics and physics, but the methods discussed
in this text are also fundamental for constructing successful algorithms
for partial differential equations
of wave nature in multiple spatial dimensions.

[hpl: Need to discuss errors also for the damped and nonlinear models. At least the frequency errors must be illustrated here as well and investigated numerically, either in text or exercises.]

======= Finite difference discretization =======
label{vib:model1}

Many of the numerical challenges faced when computing oscillatory
solutions to ODEs and PDEs can be captured by the very simple ODE
$u^{\prime\prime} + u =0$. This ODE is thus chosen as our starting
point for method development, implementation, and analysis.

===== A basic model for vibrations =====

idx{vibration ODE} idx{oscillations} idx{mechanical vibrations}

The simplest model of a vibrating mechanical system has the following form:

!bt
\begin{equation}
u^{\prime\prime} + \omega^2u = 0,\quad u(0)=I,\ u^{\prime}(0)=0,\ t\in (0,T]
\tp
label{vib:ode1}
\end{equation}
!et
Here, $\omega$ and $I$ are given constants.
Section ref{vib:app:mass_spring} derives (ref{vib:ode1}) from physical
principles and explains what the constants mean.

idx{period (of oscillations)}
idx{frequency (of oscillations)}
idx{Hz (unit)}

The exact solution of (ref{vib:ode1}) is

!bt
\begin{equation}
u(t) = I\cos (\omega t)
\tp
label{vib:ode1:uex}
\end{equation}
!et
That is, $u$ oscillates with constant amplitude $I$ and
angular frequency $\omega$.
The corresponding period of oscillations (i.e., the time between two
neighboring peaks in the cosine function) is $P=2\pi/\omega$.
The number of periods per second
is $f=\omega/(2\pi)$ and measured in the unit Hz.
Both $f$ and $\omega$ are referred to as frequency, but $\omega$
is more precisely named *angular frequency*, measured in rad/s.

In vibrating mechanical systems modeled by (ref{vib:ode1}), $u(t)$
very often represents a position or a displacement of a particular
point in the system. The derivative $u^{\prime}(t)$ then has the
interpretation of velocity, and $u^{\prime\prime}(t)$ is the associated
acceleration.  The model (ref{vib:ode1}) is not only
applicable to vibrating mechanical systems, but also to oscillations
in electrical circuits.

===== A centered finite difference scheme =====
label{vib:ode1:fdm}

To formulate a finite difference method for the model
problem  (ref{vib:ode1}) we follow the ref[four steps explained in Section
ref{decay:schemes:FE}][ in cite{Langtangen_decay}]["four steps": "${doc_notes}/sphinx-decay/main_decay.html#the-forward-euler-scheme" explained in cite{Langtangen_decay}].

idx{mesh!finite differences} idx{mesh function}

=== Step 1: Discretizing the domain ===

The domain is discretized by
introducing a uniformly partitioned time mesh.
The points in the mesh are $t_n=n\Delta t$, $n=0,1,\ldots,N_t$,
where $\Delta t = T/N_t$ is the constant length of the time steps.
We introduce a mesh function $u^n$ for $n=0,1,\ldots,N_t$, which
approximates the exact solution at the mesh points. (Note that
$n=0$ is the known initial condition, so $u^n$ is identical to the mathematical
$u$ at this point.) The mesh
function $u^n$ will be computed from algebraic equations derived from
the differential equation problem.


=== Step 2: Fulfilling the equation at discrete time points ===

The ODE is to be satisfied at each mesh point where the solution
must be found:

!bt
\begin{equation}
u^{\prime\prime}(t_n) + \omega^2u(t_n) = 0,\quad n=1,\ldots,N_t
\tp
label{vib:ode1:step2}
\end{equation}
!et

idx{centered difference} idx{finite differences!centered}

=== Step 3: Replacing derivatives by finite differences ===

The derivative $u^{\prime\prime}(t_n)$ is to be replaced by a finite
difference approximation. A common second-order accurate approximation
to the second-order derivative is

!bt
\begin{equation}
u^{\prime\prime}(t_n) \approx \frac{u^{n+1}-2u^n + u^{n-1}}{\Delta t^2}
\tp
label{vib:ode1:step3}
\end{equation}
!et
Inserting (ref{vib:ode1:step3}) in (ref{vib:ode1:step2})
yields

!bt
\begin{equation}
\frac{u^{n+1}-2u^n + u^{n-1}}{\Delta t^2} = -\omega^2 u^n
\tp
label{vib:ode1:step3b}
\end{equation}
!et

We also need to replace the derivative in the initial condition by
a finite difference. Here we choose a centered difference, whose
accuracy is similar to the centered difference we used for $u^{\prime\prime}$:

!bt
\begin{equation}
\frac{u^1-u^{-1}}{2\Delta t} = 0
label{vib:ode1:step3c}
\tp
\end{equation}
!et

=== Step 4: Formulating a recursive algorithm ===

To formulate the computational algorithm, we assume that we
have already computed $u^{n-1}$ and $u^n$, such that $u^{n+1}$ is the
unknown value to be solved for:

!bt
\begin{equation}
u^{n+1} = 2u^n - u^{n-1} - \Delta t^2\omega^2 u^n
\tp
label{vib:ode1:step4}
\end{equation}
!et
The computational algorithm is simply to apply (ref{vib:ode1:step4})
successively for $n=1,2,\ldots,N_t-1$. This numerical scheme sometimes
goes under the name
# #if FORMAT in ("latex", "pdflatex")
St\"{o}rmer's
# #else
Stoermer's
# #endif
method, "Verlet integration":
"http://en.wikipedia.org/wiki/Verlet_integration", or the Leapfrog method
(one should note
that Leapfrog is used for many quite different methods for quite
different differential equations!).

=== Computing the first step ===

We observe that (ref{vib:ode1:step4}) cannot be used for $n=0$ since
the computation of $u^1$ then involves the undefined value $u^{-1}$
at $t=-\Delta t$. The discretization of the initial condition
then comes to our rescue: (ref{vib:ode1:step3c}) implies $u^{-1} = u^1$
and this relation can be combined with (ref{vib:ode1:step4})
for $n=0$ to yield a value for $u^1$:

!bt
\begin{equation*} u^1 = 2u^0 - u^{1} - \Delta t^2 \omega^2 u^0,\end{equation*}
!et
which reduces to

!bt
\begin{equation}
u^1 = u^0 - \half \Delta t^2 \omega^2 u^0
\tp
label{vib:ode1:step4b}
\end{equation}
!et
Exercise ref{vib:exer:step4b:alt} asks you to perform an alternative derivation
and also to generalize the initial condition to $u^{\prime}(0)=V\neq 0$.

=== The computational algorithm ===

The steps for solving (ref{vib:ode1}) become

  o $u^0=I$
  o compute $u^1$ from (ref{vib:ode1:step4b})
  o for $n=1,2,\ldots,N_t-1$: compute $u^{n+1}$ from (ref{vib:ode1:step4})

The algorithm is more precisely expressed directly in Python:

!bc cod
t = linspace(0, T, Nt+1)  # mesh points in time
dt = t[1] - t[0]          # constant time step
u = zeros(Nt+1)           # solution

u[0] = I
u[1] = u[0] - 0.5*dt**2*w**2*u[0]
for n in range(1, Nt):
    u[n+1] = 2*u[n] - u[n-1] - dt**2*w**2*u[n]
!ec

!bwarning Remark on using `w` for $\omega$ in computer code
In the code, we use `w` as the symbol for $\omega$.
The reason is that the authors prefer `w` for readability
and comparison with the mathematical $\omega$ instead of
the full word `omega` as variable name.
!ewarning

=== Operator notation ===

We may write the scheme using a compact difference notation
% if BOOK == "book":
listed in Appendix ref{sec:form:fdop}
% endif
(see also ref[Section ref{decay:fd:op}][ in cite{Langtangen_decay}][
"examples": "${doc_notes}/sphinx-decay/main_decay.html#compact-operator-notation-for-finite-differences" in cite{Langtangen_decay}]).
The difference (ref{vib:ode1:step3}) has the operator
notation $[D_tD_t u]^n$ such that we can write:

!bt
\begin{equation}
[D_tD_t u  + \omega^2 u = 0]^n
\tp
label{vib:ode1:step4:op}
\end{equation}
!et
Note that $[D_tD_t u]^n$ means applying a central difference with step $\Delta t/2$ twice:

!bt
\[ [D_t(D_t u)]^n = \frac{[D_t u]^{n+\half} - [D_t u]^{n-\half}}{\Delta t}\]
!et
which is written out as
!bt
\[
\frac{1}{\Delta t}\left(\frac{u^{n+1}-u^n}{\Delta t} - \frac{u^{n}-u^{n-1}}{\Delta t}\right) = \frac{u^{n+1}-2u^n + u^{n-1}}{\Delta t^2}
\tp
\]
!et

The discretization of initial conditions can in the operator notation
be expressed as

!bt
\begin{equation}
[u = I]^0,\quad [D_{2t} u = 0]^0,
\end{equation}
!et
where the operator $[D_{2t} u]^n$ is defined as

!bt
\begin{equation}
[D_{2t} u]^n = \frac{u^{n+1} - u^{n-1}}{2\Delta t}
\tp
\end{equation}
!et


======= Implementation =======
label{vib:impl1}

===== Making a solver function =====
label{vib:impl1:solver}

The algorithm from the previous section is readily translated to
a complete Python function for computing and returning
$u^0,u^1,\ldots,u^{N_t}$ and $t_0,t_1,\ldots,t_{N_t}$, given the
input $I$, $\omega$, $\Delta t$, and $T$:

@@@CODE src-vib/vib_undamped.py fromto: import numpy@def solver_adjust_w
We have imported `numpy` and `matplotlib` under the names `np` and `plt`,
respectively, as this is very common in the Python scientific
computing community and a good programming habit (since we explicitly
see where the different functions come from).  An alternative is to do
`from numpy import *` and a similar ``import all'' for Matplotlib to
avoid the `np` and `plt` prefixes and make the code as close as
possible to MATLAB. (See ref[Section ref{softeng1:basic:modprefix}][ in
cite{Langtangen_decay}][the section
"Prefixing imported functions by the module name": "http://hplgit.github.io/decay-book/doc/pub/book/html/._decay-book009.html#softeng1:basic:modprefix" in the book
"Finite Difference Computing with Exponential Decay Models": "http://tinyurl.com/nclmcng/web" cite{Langtangen_decay}] for a discussion of the two
types of import in Python.)

A function for plotting the numerical and the exact solution is also
convenient to have:

@@@CODE src-vib/vib_undamped.py fromto: def u_exact@def test_three_steps
A corresponding main program calling these functions to simulate
a given number of periods (`num_periods`) may take the form

!bc pycod
I = 1
w = 2*pi
dt = 0.05
num_periods = 5
P = 2*pi/w    #  one period
T = P*num_periods
u, t = solver(I, w, dt, T)
visualize(u, t, I, w, dt)
!ec

Adjusting some of the input parameters via the command line can be
handy. Here is a code segment using the `ArgumentParser` tool in
the `argparse` module to define option value (`--option value`)
pairs on the command line:

!bc pycod
import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--I', type=float, default=1.0)
parser.add_argument('--w', type=float, default=2*pi)
parser.add_argument('--dt', type=float, default=0.05)
parser.add_argument('--num_periods', type=int, default=5)
a = parser.parse_args()
I, w, dt, num_periods = a.I, a.w, a.dt, a.num_periods
!ec
Such parsing of the command line is explained in more detail in
ref[Section ref{softeng1:basic:UI:options_cml}][ in cite{Langtangen_decay}][ the
section "Option-value pairs on the command line": "${decay_book_url}/html/._decay-book009.html#softeng1:basic:UI:options_cml" in "Finite Difference Computing with Exponential Decay Models": "http://tinyurl.com/nclmcng/web" cite{Langtangen_decay}].

A typical execution goes like

!bc sys
Terminal> python vib_undamped.py --num_periods 20 --dt 0.1
!ec

idx{vectorization}

=== Computing $u^{\prime}$ ===

In mechanical vibration applications one is often interested in
computing the velocity $v(t)=u^{\prime}(t)$ after $u(t)$ has been
computed.  This can be done by a central difference,

!bt
\begin{equation}
v(t_n)=u^{\prime}(t_n) \approx v^n = \frac{u^{n+1}-u^{n-1}}{2\Delta t} = [D_{2t}u]^n
\tp
\end{equation}
!et
This formula applies for all inner mesh points, $n=1,\ldots,N_t-1$.
For $n=0$, $v(0)$ is given by the initial condition on $u^{\prime}(0)$,
and for $n=N_t$ we can use a one-sided, backward difference:

!bt
\[ v^n=[D_t^-u]^n = \frac{u^{n} - u^{n-1}}{\Delta t}\tp\]
!et

Typical (scalar) code is

!bc pycod
v = np.zeros_like(u)  # or v = np.zeros(len(u))
# Use central difference for internal points
for i in range(1, len(u)-1):
    v[i] = (u[i+1] - u[i-1])/(2*dt)
# Use initial condition for u'(0) when i=0
v[0] = 0
# Use backward difference at the final mesh point
v[-1] = (u[-1] - u[-2])/dt
!ec
Since the loop is slow for large $N_t$, we can get rid of the loop by
vectorizing the central difference. The above code segment goes as
follows in its vectorized version (see ref[Problem
ref{decay:exer:dudt}][ in cite{Langtangen_decay}][the problem
"Differentiate a function":
"${decay_book_url}/html/._decay-book005.html#decay:exer:dudt" in "Finite
Difference Computing with Exponential Decay Models":
"http://tinyurl.com/nclmcng/web" cite{Langtangen_decay}] for
explanation of details):

!bc pycod
v = np.zeros_like(u)
v[1:-1] = (u[2:] - u[:-2])/(2*dt)  # central difference
v[0] = 0                           # boundary condition u'(0)
v[-1] = (u[-1] - u[-2])/dt         # backward difference
!ec


===== Verification =====
label{vib:ode1:verify}

idx{test function}
idx{pytest}
idx{nose}
idx{verification!hand calculations}
idx{unit testing}


=== Manual calculation ===

The simplest type of verification, which is also instructive for understanding
the algorithm, is to compute $u^1$, $u^2$, and $u^3$
with the aid of a calculator
and make a function for comparing these results with those from the `solver`
function. The `test_three_steps` function in
the file "`vib_undamped.py`": "${src_vib}/vib_undamped.py"
shows the details of how we use the hand calculations to test the code:

@@@CODE src-vib/vib_undamped.py fromto: def test_three_steps@def convergence_rates
This function is a proper *test function*,
compliant with the pytest and nose testing
framework for Python code, because

 * the function name begins with `test_`
 * the function takes no arguments
 * the test is formulated as a boolean condition and executed by `assert`

% if BOOK == "book":
We shall in this book implement all software verification via such
proper test functions, also known as unit testing.
% endif
See ref[Section ref{softeng1:verify:pytest}][ in cite{Langtangen_decay}][the
section "Unit tests and test functions": "${decay_book_url}/html/._decay-book009.html#softeng1:verify:pytest" in
"Finite Difference Computing with Exponential Decay Models": "http://tinyurl.com/nclmcng/web" cite{Langtangen_decay}]
for more details on how to construct test functions and utilize nose
or pytest for automatic execution of tests. Our recommendation is to
use pytest. With this choice, you can
run all test functions in `vib_undamped.py` by

!bc sys
Terminal> py.test -s -v vib_undamped.py
============================= test session starts ======...
platform linux2 -- Python 2.7.9 -- ...
collected 2 items

vib_undamped.py::test_three_steps PASSED
vib_undamped.py::test_convergence_rates PASSED

=========================== 2 passed in 0.19 seconds ===...
!ec

idx{verification!polynomial solutions}

=== Testing very simple polynomial solutions ===

Constructing test problems where the exact solution is constant or
linear helps initial debugging and verification as one expects any
reasonable numerical method to reproduce such solutions to machine
precision.  Second-order accurate methods will often also reproduce a
quadratic solution.  Here $[D_tD_tt^2]^n=2$, which is the exact
result. A solution $u=t^2$ leads to $u^{\prime\prime}+\omega^2 u=2 + (\omega
t)^2\neq 0$.  We must therefore add a source in the equation: $u^{\prime\prime} +
\omega^2 u = f$ to allow a solution $u=t^2$ for $f=2 + (\omega t)^2$.  By
simple insertion we can show that the mesh function $u^n = t_n^2$ is
also a solution of the discrete equations.  Problem
ref{vib:exer:undamped:verify:linquad} asks you to carry out all
details to show that linear and quadratic solutions are solutions
of the discrete equations. Such results are very useful for debugging
and verification. You are strongly encouraged to do this problem now!

idx{verification!convergence rates}

=== Checking convergence rates ===

Empirical computation of convergence rates yields a good method for
verification. The method and its computational details are explained
in detail ref[in Section ref{decay:convergence:rate}][ in
cite{Langtangen_decay}][for a simple ODE model in the section
"Computing convergence rates":
"${decay_book_url}/html/._decay-book007.html#decay:convergence:rate"
in "Finite Difference Computing with Exponential Decay Models":
"http://tinyurl.com/nclmcng/web" cite{Langtangen_decay}].  Readers not
familiar with the concept should look up this reference before
proceeding.

In the present problem, computing convergence rates means that we must

 * perform $m$ simulations, halving the time steps as: $\Delta t_i=2^{-i}\Delta t_0$, $i=1,\ldots,m-1$, and $\Delta t_i$ is the time step used in simulation $i$;
 * compute the $L^2$ norm of the error,
   $E_i=\sqrt{\Delta t_i\sum_{n=0}^{N_t-1}(u^n-\uex(t_n))^2}$ in each case;
 * estimate the convergence rates $r_i$ based on two consecutive
   experiments $(\Delta t_{i-1}, E_{i-1})$ and $(\Delta t_{i}, E_{i})$,
   assuming $E_i=C(\Delta t_i)^{r}$ and $E_{i-1}=C(\Delta t_{i-1})^{r}$.
   From these equations it follows that
   $r = \ln (E_{i-1}/E_i)/\ln (\Delta t_{i-1}/\Delta t_i)$. Since this $r$
   will vary with $i$, we equip it with an index and call it $r_{i-1}$,
   where $i$ runs from $1$ to $m-1$.

The computed rates $r_0,r_1,\ldots,r_{m-2}$ hopefully converge to the
number 2 in the present
problem, because theory (from Section ref{vib:ode1:analysis}) shows
that the error of the numerical method we use behaves like $\Delta t^2$.
The convergence of the sequence $r_0,r_1,\ldots,r_{m-2}$
demands that the time steps
$\Delta t_i$ are sufficiently small for the error model $E_i=C(\Delta t_i)^r$
to be valid.

All the implementational details of computing the sequence
$r_0,r_1,\ldots,r_{m-2}$ appear below.

@@@CODE src-vib/vib_undamped.py fromto: def convergence_rates@def test_convergence

The error analysis in Section ref{vib:ode1:analysis} is quite
detailed and suggests that $r=2$.
##but other methods like truncation error
##analysis
##% if BOOK == "book":
##(see Appendix ref{trunc:vib:undamped})
##% endif
##also points to $r=2$,
##as well as the related quick reasoning that we have used a
It is also a intuitively reasonable result, since we used a
second-order accurate finite difference approximation $[D_tD_tu]^n$ to
the ODE and a second-order accurate finite difference formula for the
initial condition for $u^{\prime}$.

In the present problem, when $\Delta t_0$ corresponds to 30 time steps
per period, the returned `r` list has all its values equal to 2.00
(if rounded to two decimals). This amazingly accurate result means that all
$\Delta t_i$ values are well into the asymptotic regime where the
error model $E_i = C(\Delta t_i)^r$ is valid.

We can now construct a proper test function that computes convergence rates
and checks that the final (and usually the best) estimate is sufficiently
close to 2. Here, a rough tolerance of 0.1 is enough. This unit test
goes like

@@@CODE src-vib/vib_undamped.py fromto: def test_convergence@def plot_convergence_rates
The complete code appears in the file `vib_undamped.py`.

idx{`plotslopes.py`}
idx{slope marker (in convergence plots)}

=== Visualizing convergence rates with slope markers ===

Tony S. Yu has written a script "`plotslopes.py`": "http://goo.gl/A4Utm7"
that is very useful to indicate the slope of a graph, especially
a graph like $\ln E = r\ln \Delta t + \ln C$ arising from the model
$E=C\Delta t^r$. A copy of the script resides in the "`src/vib`": "${src_vib}"
directory. Let us use it to compare the original method for $u'' + \omega^2u =0$
with the same method applied to the equation with a modified
$\omega$. We make log-log plots of the error versus $\Delta t$.
For each curve we attach a slope marker using the `slope_marker((x,y), r)`
function from `plotslopes.py`, where `(x,y)` is the position of the
marker and `r` and the slope ($(r,1)$), here (2,1) and (4,1).

@@@CODE src-vib/vib_undamped.py fromto: plot_convergence_rates@plt\.savefig

Figure ref{vib:ode1:verify:fig:convrate_curve} displays the two curves
with the markers. The match of the curve slope and the marker slope is
excellent.

FIGURE: [fig-vib/vib_adjusted_w_rate_curves, width=500 frac=0.7] Empirical convergence rate curves with special slope marker. label{vib:ode1:verify:fig:convrate_curve}

===== Scaled model =====

It is advantageous to use dimensionless variables in simulations,
because fewer parameters need to be set. The present problem is made
dimensionless by introducing dimensionless variables $\bar t = t/t_c$
and $\bar u = u/u_c$, where $t_c$ and $u_c$ are characteristic scales
for $t$ and $u$, respectively. We refer to ref[Section
ref{sec:scale:vib:undamped}][ in cite{Langtangen_scaling}][the section
"Undamped vibrations without forcing":
"http://hplgit.github.io/scaling-book/doc/pub/book/html/._scaling-book006.html#sec:scale:vib:undamped"
in the book "Scaling of differential equations":
"http://tinyurl.com/qfjgxmf/web" cite{Langtangen_scaling}] for all
details about this scaling.

The scaled ODE problem reads

!bt
\[ \frac{u_c}{t_c^2}\frac{d^2\bar u}{d\bar t^2} + u_c\bar u = 0,\quad
u_c\bar u(0) = I,\ \frac{u_c}{t_c}\frac{d\bar u}{d\bar t}(0)=0\tp\]
!et
A common choice is to take $t_c$ as one period of
the oscillations, $t_c = 2\pi/w$, and $u_c=I$.
This gives the dimensionless model

!bt
\begin{equation}
\frac{d^2\bar u}{d\bar t^2} + 4\pi^2 \bar u = 0,\quad \bar u(0)=1,\
\bar u^{\prime}(0)=0\tp
label{vib:ode1:model:scaled}
\end{equation}
!et
Observe that there are no physical parameters in (ref{vib:ode1:model:scaled})!
We can therefore perform
a single numerical simulation $\bar u(\bar t)$ and afterwards
recover any $u(t; \omega, I)$ by

!bt
\[ u(t;\omega, I) = u_c\bar u(t/t_c) = I\bar u(\omega t/(2\pi))\tp\]
!et

We can easily check this assertion: the solution of the scaled problem
is $\bar u(\bar t) = \cos(2\pi\bar t)$. The formula for $u$ in terms
of $\bar u$ gives $u = I\cos(\omega t)$, which is nothing but the solution
of the original problem with dimensions.

The scaled model can by run by calling `solver(I=1, w=2*pi, dt, T)`.
Each period is now 1 and `T` simply counts the number of periods.
Choosing `dt` as `1./M` gives `M` time steps per period.


======= Visualization of long time simulations =======
label{vib:ode1:longseries}

Figure ref{vib:ode1:2dt} shows a comparison of the exact and numerical
solution for the scaled model (ref{vib:ode1:model:scaled}) with
$\Delta t=0.1, 0.05$.
From the plot we make the following observations:

 * The numerical solution seems to have correct amplitude.
 * There is an angular frequency error which is reduced by decreasing the time step.
 * The total angular frequency error grows with time.

By angular frequency error we mean that the numerical angular frequency differs
from the exact $\omega$. This is evident by looking
at the peaks of the numerical solution: these have incorrect
positions compared with the peaks of the exact cosine solution. The
effect can be mathematically expressed by writing the numerical solution
as $I\cos\tilde\omega t$, where $\tilde\omega$ is not exactly
equal to $\omega$. Later, we shall mathematically
quantify this numerical angular frequency $\tilde\omega$.

FIGURE: [fig-vib/vib_freq_err1, width=800 frac=1.0] Effect of halving the time step. label{vib:ode1:2dt}

===== Using a moving plot window =====

In vibration problems it is often of interest to investigate the system's
behavior over long time intervals. Errors in the angular frequency accumulate
and become more visible as time grows. We can investigate long
time series by introducing a moving plot window that can move along with
the $p$ most recently computed periods of the solution. The
"SciTools": "https://github.com/hplgit/scitools" package contains
a convenient tool for this: `MovingPlotWindow`. Typing
`pydoc scitools.MovingPlotWindow` shows a demo and a description of its use.
The function below utilizes the moving plot window and is in fact
called by the `main` function in the `vib_undamped` module
if the number of periods in the simulation exceeds 10.

@@@CODE src-vib/vib_undamped.py fromto: def visualize_front\(@def visualize_front_ascii

We run the scaled problem (the default values for the command-line arguments
`--I` and `--w` correspond to the scaled problem) for 40 periods with 20
time steps per period:

!bc sys
Terminal> python vib_undamped.py --dt 0.05 --num_periods 40
!ec
The moving plot window is invoked, and we can follow the numerical and exact
solutions as time progresses. From this demo we see that
the angular frequency error is small in the beginning, and that it becomes more
prominent with time. A new run with $\Delta t=0.1$ (i.e., only 10 time steps per period)
clearly shows that the phase errors become significant even earlier
in the time series, deteriorating the solution further.

===== Making animations =====
label{vib:ode1:anim}

idx{making movies}
idx{animation}
idx{WebM (video format)}
idx{Ogg (video format)}
idx{MP4 (video format)}
idx{Flash (video format)}
idx{video formats}

=== Producing standard video formats ===

The `visualize_front` function stores all the plots in
files whose names are numbered:
`tmp_0000.png`, `tmp_0001.png`, `tmp_0002.png`,
and so on. From these files we may make a movie. The Flash
format is popular,

!bc sys
Terminal> ffmpeg -r 25 -i tmp_%04d.png -c:v flv movie.flv
!ec
The `ffmpeg` program can be replaced by the `avconv` program in
the above command if desired (but at the time of this writing it seems
to be more momentum in the `ffmpeg` project).
The `-r` option should come first and
describes the number of frames per second in the movie (even if we
would like to have slow movies, keep this number as large as 25,
otherwise files are skipped from the movie). The
`-i` option describes the name of the plot files.
Other formats can be generated by changing the video codec
and equipping the video file with the right extension:

|---------------------------------------|
| Format | Codec and filename           |
|----l-----------l----------------------|
|  Flash | `-c:v flv movie.flv`         |
|  MP4   | `-c:v libx264 movie.mp4`     |
|  WebM  | `-c:v libvpx movie.webm`     |
|  Ogg   | `-c:v libtheora movie.ogg`   |
|---------------------------------------|

idx{HTML5 video tag}

The video file can be played by some video player like `vlc`, `mplayer`,
`gxine`, or `totem`, e.g.,

!bc sys
Terminal> vlc movie.webm
!ec
A web page can also be used to play the movie. Today's standard is
to use the HTML5 `video` tag:

!bc htmlcod
<video autoplay loop controls
       width='640' height='365' preload='none'>
<source src='movie.webm'  type='video/webm; codecs="vp8, vorbis"'>
</video>
!ec
Modern browsers do not support all of the video formats.
MP4 is needed to successfully play the videos on Apple devices
that use the Safari browser.
WebM is the preferred format for Chrome, Opera, Firefox, and Internet
Explorer v9+. Flash was a popular format, but older browsers that
required Flash can play MP4. All browsers that work with Ogg can also
work with WebM. This means that to have a video work in all browsers,
the video should be available in the MP4 and WebM formats.
The proper HTML code reads

!bc htmlcod
<video autoplay loop controls
       width='640' height='365' preload='none'>
<source src='movie.mp4'   type='video/mp4;
 codecs="avc1.42E01E, mp4a.40.2"'>
<source src='movie.webm'  type='video/webm;
 codecs="vp8, vorbis"'>
</video>
!ec
The MP4 format should appear first to ensure that Apple devices will
load the video correctly.

!bwarning Caution: number the plot files correctly
To ensure that the individual plot frames are shown in correct order,
it is important to number the files with zero-padded numbers
(0000, 0001, 0002, etc.). The printf format `%04d` specifies an
integer in a field of width 4, padded with zeros from the left.
A simple Unix wildcard file specification like `tmp_*.png`
will then list the frames in the right order. If the numbers in the
filenames were not zero-padded, the frame `tmp_11.png` would appear
before `tmp_2.png` in the movie.
!ewarning

=== Playing PNG files in a web browser ===

idx{`scitools movie` command}

The `scitools movie` command can create a movie player for a set
of PNG files such that a web browser can be used to watch the movie.
This interface has the advantage that the speed of the movie can
easily be controlled, a feature that scientists often appreciate.
The command for creating an HTML with a player for a set of
PNG files `tmp_*.png` goes like

!bc sys
Terminal> scitools movie output_file=vib.html fps=4 tmp_*.png
!ec
The `fps` argument controls the speed of the movie (``frames per second'').

To watch the movie, load the video file `vib.html` into some browser, e.g.,
!bc sys
Terminal> google-chrome vib.html  # invoke web page
!ec
Clicking on `Start movie` to see the result. Moving this movie to
some other place requires moving `vib.html` *and all the PNG files*
`tmp_*.png`:
!bc sys
Terminal> mkdir vib_dt0.1
Terminal> mv tmp_*.png vib_dt0.1
Terminal> mv vib.html vib_dt0.1/index.html
!ec

=== Making animated GIF files ===

The `convert` program from the ImageMagick software suite can be
used to produce animated GIF files from a set of PNG files:

!bc sys
Terminal> convert -delay 25 tmp_vib*.png tmp_vib.gif
!ec
The `-delay` option needs an argument of the delay between each frame,
measured in 1/100 s, so 4 frames/s here gives 25/100 s delay.
Note, however, that in this particular example
with $\Delta t=0.05$ and 40 periods,
making an animated GIF file out of
the large number of PNG files is a very heavy process and not
considered feasible. Animated GIFs are best suited for animations with
not so many frames and where you want to see each frame and play them
slowly.

[hpl: Combine two simulations side by side!]

===== Using Bokeh to compare graphs =====


Instead of a moving plot frame, one can use tools that allow panning
by the mouse. For example, we can show four periods of several signals in
several plots and then scroll with the mouse through the rest of the
simulation *simultaneously* in all the plot windows.
The "Bokeh": "http://bokeh.pydata.org/en/latest/docs/quickstart.html" plotting library offers such tools, but the plots must be displayed in
a web browser. The documentation of Bokeh is excellent, so here we just
show how the library can be used to compare a set of $u$ curves corresponding
to long time simulations. (By the way, the guidance to correct
pronunciation of Bokeh in
the "documentation": "http://bokeh.pydata.org/en/0.10.0/docs/faq.html#how-do-you-pronounce-bokeh" and on "Wikipedia": "https://en.wikipedia.org/wiki/Bokeh" is not directly compatible with a "YouTube video": "https://www.youtube.com/watch?v=OR8HSHevQTM"...).

Imagine we have performed experiments for a set of $\Delta t$ values.
We want each curve, together with the exact solution, to appear in
a plot, and then arrange all plots in a grid-like fashion:

FIGURE: [fig-vib/bokeh_gridplot1, width=800 frac=1]

Furthermore, we want the axes to couple such that if we move into
the future in one plot, all the other plots follows (note the
displaced $t$ axes!):

FIGURE: [fig-vib/bokeh_gridplot2, width=800 frac=1]

# #if FORMAT == 'html'
Here in HTML format we can include the interactive Bokeh plot. Use
the mouse inside one of the plots to scroll into the future!

FIGURE: [fig-vib/bokeh_gridplot_interactive, width=800 frac=1] Interactive Bokeh plot.
# #endif

A function for creating a Bokeh plot, given a list of `u` arrays
and corresponding `t` arrays, is implemented below.
The code combines data fro different simulations, described
compactly in a list of strings `legends`.

@@@CODE src-vib/vib_undamped.py fromto: def bokeh_plot@def demo_bokeh
A particular example using the `bokeh_plot` function appears below.

@@@CODE src-vib/vib_undamped.py fromto: def demo_bokeh@if __name

===== Using a line-by-line ascii plotter =====

Plotting functions vertically, line by line, in the terminal window
using ascii characters only is a simple, fast, and convenient
visualization technique for long time series. Note that the time
axis then is positive downwards on the screen, so we can let the
solution be visualized ``forever''.
The tool
`scitools.avplotter.Plotter` makes it easy to create such plots:

@@@CODE src-vib/vib_undamped.py fromto: def visualize_front_ascii@def bokeh_plot
The call `p.plot` returns a line of text, with the $t$ axis marked and
a symbol `+` for the first function (`u`) and `o` for the second
function (the exact solution). Here we append to this text
a time counter reflecting how many periods the current time point
corresponds to. A typical output ($\omega =2\pi$, $\Delta t=0.05$)
looks like this:

!bc dat
                              |                       o+      14.0
                              |                      + o      14.0
                              |                  +    o       14.1
                              |             +     o           14.1
                              |     +        o                14.2
                             +|       o                       14.2
                     +        |                               14.2
              +       o       |                               14.3
         +     o              |                               14.4
      +   o                   |                               14.4
     +o                       |                               14.5
     o +                      |                               14.5
      o    +                  |                               14.6
          o      +            |                               14.6
               o        +     |                               14.7
                      o       | +                             14.7
                              |        +                      14.8
                              |       o       +               14.8
                              |              o     +          14.9
                              |                   o   +       14.9
                              |                       o+      15.0
!ec


===== Empirical analysis of the solution =====
label{vib:ode1:empirical}

For oscillating functions like those in Figure ref{vib:ode1:2dt} we may
compute the amplitude and frequency (or period) empirically.
That is, we run through the discrete solution points $(t_n, u_n)$ and
find all maxima and minima points. The distance between two consecutive
maxima (or minima) points can be used as estimate of the local period,
while half the difference between the $u$ value at a maximum and a nearby
minimum gives an estimate of the local amplitude.

The local maxima are the points where
!bt
\begin{equation}
u^{n-1} < u^n > u^{n+1},\quad n=1,\ldots,N_t-1,
\end{equation}
!et
and the local minima are recognized by
!bt
\begin{equation}
u^{n-1} > u^n < u^{n+1},\quad n=1,\ldots,N_t-1
\tp
\end{equation}
!et
In computer code this becomes

!bc pycod
def minmax(t, u):
    minima = []; maxima = []
    for n in range(1, len(u)-1, 1):
        if u[n-1] > u[n] < u[n+1]:
            minima.append((t[n], u[n]))
        if u[n-1] < u[n] > u[n+1]:
            maxima.append((t[n], u[n]))
    return minima, maxima
!ec
Note that the two returned objects are lists of tuples.

Let $(t_i, e_i)$, $i=0,\ldots,M-1$, be the sequence of all
the $M$ maxima points, where $t_i$
is the time value and $e_i$ the corresponding $u$ value.
The local period can be defined as $p_i=t_{i+1}-t_i$.
With Python syntax this reads

!bc pycod
def periods(maxima):
    p = [extrema[n][0] - maxima[n-1][0]
         for n in range(1, len(maxima))]
    return np.array(p)
!ec
The list `p` created by a list comprehension is converted to an array
since we probably want to compute with it, e.g., find the corresponding
frequencies `2*pi/p`.

Having the minima and the maxima, the local amplitude can be
calculated as the difference between two neighboring minimum and
maximum points:

!bc pycod
def amplitudes(minima, maxima):
    a = [(abs(maxima[n][1] - minima[n][1]))/2.0
         for n in range(min(len(minima),len(maxima)))]
    return np.array(a)
!ec
The code segments are found in the file "`vib_empirical_analysis.py`":
"${src_vib}/vib_empirical_analysis.py".

Since `a[i]` and `p[i]` correspond to
the $i$-th amplitude estimate and the $i$-th period estimate, respectively,
it is most convenient to visualize the `a` and `p` values with the
index `i` on the horizontal axis.
(There is no unique time point associated with either of these estimate
since values at two different time points were used in the
computations.)

In the analysis of very long time series, it is advantageous to
compute and plot `p` and `a` instead of $u$ to get an impression of
the development of the oscillations. Let us do this for the scaled
problem and $\Delta t=0.1, 0.05, 0.01$.
A ready-made function

!bc pycod
plot_empirical_freq_and_amplitude(u, t, I, w)
!ec
computes the empirical amplitudes and periods, and creates a plot
where the amplitudes and angular frequencies
are visualized together with the exact amplitude `I`
and the exact angular frequency `w`. We can make a little program
for creating the plot:

!bc pypro
from vib_undamped import solver, plot_empirical_freq_and_amplitude
from math import pi
dt_values = [0.1, 0.05, 0.01]
u_cases = []
t_cases = []
for dt in dt_values:
    # Simulate scaled problem for 40 periods
    u, t = solver(I=1, w=2*pi, dt=dt, T=40)
    u_cases.append(u)
    t_cases.append(t)
plot_empirical_freq_and_amplitude(u_cases, t_cases, I=1, w=2*pi)
!ec
Figure ref{vib:ode1:fig:freq_ampl} shows the result: we clearly see that
lowering $\Delta t$ improves the angular frequency significantly, while the
amplitude seems to be more accurate.
The lines with
$\Delta t=0.01$, corresponding to 100 steps per period, can hardly be
distinguished from the exact values. The next section shows how we
can get mathematical insight into why amplitudes are good while frequencies
are more inaccurate.

FIGURE: [fig-vib/empirical_ampl_freq, width=800 frac=1.0] Empirical angular frequency (left) and amplitude (right) for three different time steps. label{vib:ode1:fig:freq_ampl}

# Use it for very long time integration of CN! And of RK4!

======= Analysis of the numerical scheme =======
label{vib:ode1:analysis}

===== Deriving a solution of the numerical scheme =====
label{vib:ode1:analysis:solderiv}

After having seen the phase error grow with time in the previous
section, we shall now quantify this error through mathematical
analysis.  The key tool in the analysis will be to establish an exact
solution of the discrete equations.  The difference equation
(ref{vib:ode1:step4}) has constant coefficients and is
homogeneous. Such equations are known to have solutions on the form
$u^n=CA^n$, where $A$ is some number
to be determined from the difference equation and $C$ is found as the
initial condition ($C=I$).  Recall that $n$ in $u^n$ is a
superscript labeling the time level, while $n$ in $A^n$ is an
exponent.

With oscillating functions as solutions, the algebra will
be considerably simplified if we seek an $A$ on the form

!bt
\[ A=e^{i\tilde\omega \Delta t},\]
!et
and solve for the numerical frequency $\tilde\omega$ rather than
$A$. Note that $i=\sqrt{-1}$ is the imaginary unit. (Using a
complex exponential function gives simpler arithmetics than working
with a sine or cosine function.)
We have

!bt
\[
A^n = e^{i\tilde\omega \Delta t\, n}=e^{i\tilde\omega t_n} =
\cos (\tilde\omega t_n) + i\sin(\tilde \omega t_n)
\tp
\]
!et
The physically relevant numerical solution can
be taken as the real part of this complex expression.

The calculations go as

!bt
\begin{align*}
[D_tD_t u]^n &= \frac{u^{n+1} - 2u^n + u^{n-1}}{\Delta t^2}\\
&= I\frac{A^{n+1} - 2A^n + A^{n-1}}{\Delta t^2}\\
&= \frac{I}{\Delta t^{2}}(e^{i\tilde\omega(t_n+\Delta t)} - 2e^{i\tilde\omega t_n} + e^{i\tilde\omega(t_n-\Delta t)})\\
&= Ie^{i\tilde\omega t_n}\frac{1}{\Delta t^2}\left(e^{i\tilde\omega\Delta t} + e^{i\tilde\omega(-\Delta t)} - 2\right)\\
&= Ie^{i\tilde\omega t_n}\frac{2}{\Delta t^2}\left(\cosh(i\tilde\omega\Delta t) -1 \right)\\
&= Ie^{i\tilde\omega t_n}\frac{2}{\Delta t^2}\left(\cos(\tilde\omega\Delta t) -1 \right)\\
&= -Ie^{i\tilde\omega t_n}\frac{4}{\Delta t^2}\sin^2(\frac{\tilde\omega\Delta t}{2})
\end{align*}
!et
The last line follows from the relation
$\cos x - 1 = -2\sin^2(x/2)$ (try `cos(x)-1` in
"wolframalpha.com": "http://www.wolframalpha.com" to see the formula).

The scheme (ref{vib:ode1:step4})
with $u^n=Ie^{i\tilde\omega\Delta t\, n}$ inserted now gives

!bt
\begin{equation}
-Ie^{i\tilde\omega t_n}
\frac{4}{\Delta t^2}\sin^2(\frac{\tilde\omega\Delta t}{2})
+ \omega^2 Ie^{i\tilde\omega t_n} = 0,
\end{equation}
!et
which after dividing by $Ie^{i\tilde\omega t_n}$ results in
!bt
\begin{equation}
\frac{4}{\Delta t^2}\sin^2(\frac{\tilde\omega\Delta t}{2}) = \omega^2
\tp
\end{equation}
!et
The first step in solving for the unknown $\tilde\omega$ is
!bt
\[ \sin^2(\frac{\tilde\omega\Delta t}{2}) = \left(\frac{\omega\Delta t}{2}\right)^2
\tp
\]
!et
Then, taking the square root, applying the inverse sine function, and
multiplying by $2/\Delta t$, results in
!bt
\begin{equation}
\tilde\omega = \pm \frac{2}{\Delta t}\sin^{-1}\left(\frac{\omega\Delta t}{2}\right)
\tp
label{vib:ode1:tildeomega}
\end{equation}
!et

===== The error in the numerical frequency =====
label{vib:ode1:analysis:numfreq}

The first observation of (ref{vib:ode1:tildeomega}) tells that there
is a phase error since the numerical frequency $\tilde\omega$ never
equals the exact frequency $\omega$. But how good is the approximation
(ref{vib:ode1:tildeomega})? That is, what is the error $\omega -
\tilde\omega$ or $\tilde\omega/\omega$?  Taylor series expansion for
small $\Delta t$ may give an expression that is easier to understand
than the complicated function in (ref{vib:ode1:tildeomega}):

!bc ipy
>>> from sympy import *
>>> dt, w = symbols('dt w')
>>> w_tilde_e = 2/dt*asin(w*dt/2)
>>> w_tilde_series = w_tilde_e.series(dt, 0, 4)
>>> print w_tilde_series
w + dt**2*w**3/24 + O(dt**4)
!ec
This means that

# See vib_symbolic.py for computations with sympy
!bt
\begin{equation}
\tilde\omega = \omega\left( 1 + \frac{1}{24}\omega^2\Delta t^2\right)
+ \Oof{\Delta t^4}
\tp
label{vib:ode1:tildeomega:series}
\end{equation}
!et
The error in the numerical frequency is of second-order in $\Delta t$,
and the error vanishes as $\Delta t\rightarrow 0$.  We see that
$\tilde\omega > \omega$ since the term $\omega^3\Delta t^2/24 >0$ and
this is by far the biggest term in the series expansion for small
$\omega\Delta t$. A numerical frequency that is too large gives an
oscillating curve that oscillates too fast and therefore ``lags
behind'' the exact oscillations, a feature that can be seen in the
left plot in Figure ref{vib:ode1:2dt}.

Figure ref{vib:ode1:tildeomega:plot} plots the discrete frequency
(ref{vib:ode1:tildeomega}) and its approximation
(ref{vib:ode1:tildeomega:series}) for $\omega =1$ (based on the
program "`vib_plot_freq.py`": "${src_vib}/vib_plot_freq.py").
Although $\tilde\omega$ is a function of $\Delta t$ in
(ref{vib:ode1:tildeomega:series}), it is misleading to think of
$\Delta t$ as the important discretization parameter. It is the
product $\omega\Delta t$ that is the key discretization
parameter. This quantity reflects the *number of time steps per
period* of the oscillations.  To see this, we set $P=N_P\Delta t$,
where $P$ is the length of a period, and $N_P$ is the number of time
steps during a period.  Since $P$ and $\omega$ are related by
$P=2\pi/\omega$, we get that $\omega\Delta t = 2\pi/N_P$, which shows
that $\omega\Delta t$ is directly related to $N_P$.

The plot shows that at least $N_P\sim 25-30$ points per period are
necessary for reasonable accuracy, but this depends on the length of
the simulation ($T$) as the total phase error due to the frequency
error grows linearly with time (see Exercise
ref{vib:exer:phase:err:growth}).

FIGURE: [fig-vib/discrete_freq, width=400] Exact discrete frequency and its second-order series expansion. label{vib:ode1:tildeomega:plot}


===== Empirical convergence rates and adjusted $\omega$ =====

The expression (ref{vib:ode1:tildeomega:series}) suggest that
adjusting omega to

!bt
\[ \omega\left( 1 - \frac{1}{24}\omega^2\Delta t^2\right),\]
!et
could have effect on the *convergence rate* of the global error in $u$
(cf. Section ref{vib:ode1:verify}). With the `convergence_rates` function
in `vib_undamped.py` we can easily check this. A special solver, with
adjusted $w$, is available as the function `solver_adjust_w`. A
call to `convergence_rates` with this solver reveals that the rate is
4.0! With the original, physical $\omega$ the rate is 2.0  - as expected
from using second-order finite difference approximations,
as expected from the forthcoming derivation of the global error,
and as expected from truncation error analysis
% if BOOK == "book":
analysis as explained in Appendix ref{trunc:vib:undamped}.
% else:
analysis.
% endif

Adjusting $\omega$ is an ideal trick for this simple problem, but when
adding damping and nonlinear terms, we have no simple formula for the
impact on $\omega$, and therefore we cannot use the trick.

===== Exact discrete solution =====
label{vib:ode1:analysis:sol}

Perhaps more important than the $\tilde\omega = \omega + {\cal O}(\Delta t^2)$
result found above is the fact that we have an exact discrete solution of
the problem:

!bt
\begin{equation}
u^n = I\cos\left(\tilde\omega n\Delta t\right),\quad
\tilde\omega = \frac{2}{\Delta t}\sin^{-1}\left(\frac{\omega\Delta t}{2}\right)
\tp
label{vib:ode1:un:exact}
\end{equation}
!et
We can then compute the error mesh function

!bt
\begin{equation}
e^n = \uex(t_n) - u^n =
I\cos\left(\omega n\Delta t\right) - I\cos\left(\tilde\omega n\Delta t\right)\tp
label{vib:ode1:en}
\end{equation}
!et
From the formula $\cos 2x - \cos 2y = -2\sin(x-y)\sin(x+y)$ we can
rewrite $e^n$ so the expression is easier to interpret:

!bt
\begin{equation}
e^n = -2I\sin\left(t\half\left( \omega - \tilde\omega\right)\right)
\sin\left(t\half\left( \omega + \tilde\omega\right)\right)\tp
label{vib:ode1:en2}
\end{equation}
!et

The error mesh function is ideal for verification purposes and you are
strongly encouraged to make a test based on (ref{vib:ode1:un:exact})
by doing Exercise ref{vib:exer:discrete:omega}.


===== Convergence =====
label{vib:ode1:analysis:conv}


We can use (ref{vib:ode1:tildeomega:series}), (ref{vib:ode1:en}), or
(ref{vib:ode1:en2}) to show *convergence* of the numerical scheme,
i.e., $e^n\rightarrow 0$ as $\Delta t\rightarrow 0$, which implies
that the numerical solution approaches the exact solution as $\Delta
t$ approaches to zero.  We have that

!bt
\[
\lim_{\Delta t\rightarrow 0}
\tilde\omega = \lim_{\Delta t\rightarrow 0}
\frac{2}{\Delta t}\sin^{-1}\left(\frac{\omega\Delta t}{2}\right)
= \omega,
\]
!et
by L'Hopital's rule. This result could also been computed "WolframAlpha": "http://www.wolframalpha.com/input/?i=%282%2Fx%29*asin%28w*x%2F2%29+as+x-%3E0", or
we could use the limit functionality in `sympy`:

!bc pyshell
>>> import sympy as sym
>>> dt, w = sym.symbols('x w')
>>> sym.limit((2/dt)*sym.asin(w*dt/2), dt, 0, dir='+')
w
!ec
Also (ref{vib:ode1:tildeomega:series}) can be used to establish
that $\tilde\omega\rightarrow\omega$ when $\Delta t\rightarrow 0$.
It then follows from the expression(s) for $e^n$ that $e^n\rightarrow 0$.

===== The global error =====

idx{error!global}

To achieve more analytical insight into the nature of the global
error, we can Taylor expand the error mesh function
(ref{vib:ode1:en}).  Since $\tilde\omega$ in
(ref{vib:ode1:tildeomega}) contains $\Delta t$ in the denominator we
use the series expansion for $\tilde\omega$ inside the cosine
function. A relevant `sympy` session is

!bc pyshell
>>> from sympy import *
>>> dt, w, t = symbols('dt w t')
>>> w_tilde_e = 2/dt*asin(w*dt/2)
>>> w_tilde_series = w_tilde_e.series(dt, 0, 4)
>>> w_tilde_series
w + dt**2*w**3/24 + O(dt**4)
!ec
Series expansions in `sympy` have the inconvenient `O()` term that
prevents further calculations with the series. We can use the
`removeO()` command to get rid of the `O()` term:

!bc pyshell
>>> w_tilde_series = w_tilde_series.removeO()
>>> w_tilde_series
dt**2*w**3/24 + w
!ec
Using this `w_tilde_series` expression for $\tilde w$ in
(ref{vib:ode1:en}), dropping $I$ (which is a common factor), and
performing a series expansion of the error yields

!bc pyshell
>>> error = cos(w*t) - cos(w_tilde_series*t)
>>> error.series(dt, 0, 6)
dt**2*t*w**3*sin(t*w)/24 + dt**4*t**2*w**6*cos(t*w)/1152 + O(dt**6)
!ec
Since we are mainly interested in the leading-order term in
such expansions (the term with lowest power in $\Delta t$, which
goes most slowly to zero), we use the `.as_leading_term(dt)`
construction to pick out this term:

!bc pyshell
>>> error.series(dt, 0, 6).as_leading_term(dt)
dt**2*t*w**3*sin(t*w)/24
!ec

The last result
means that the leading order global (true) error at a point $t$
is proportional to $\omega^3t\Delta t^2$. Considering only the
discrete $t_n$ values for $t$, $t_n$ is related
to $\Delta t$ through $t_n=n\Delta t$. The factor
$\sin(\omega t)$ can at most be 1, so we use this value to
bound the leading-order expression to its maximum value

!bt
\[ e^n = \frac{1}{24}n\omega^3\Delta t^3\tp\]
!et
This is the dominating term of the error *at a point*.

We are interested in the accumulated global error, which can be taken
as the $\ell^2$ norm of $e^n$.  The norm is simply computed by summing
contributions from all mesh points:

!bt
\[ ||e^n||_{\ell^2}^2 = \Delta t\sum_{n=0}^{N_t} \frac{1}{24^2}n^2\omega^6\Delta t^6
=\frac{1}{24^2}\omega^6\Delta t^7 \sum_{n=0}^{N_t} n^2\tp\]
!et
The sum $\sum_{n=0}^{N_t} n^2$ is approximately equal to
$\frac{1}{3}N_t^3$. Replacing $N_t$ by $T/\Delta t$ and taking
the square root gives the expression

!bt
\[ ||e^n||_{\ell^2} = \frac{1}{24}\sqrt{\frac{T^3}{3}}\omega^3\Delta t^2\tp\]
!et
This is our expression for the global (or integrated) error.
A primary result from this expression is that the global error
is proportional to $\Delta t^2$.

[hpl: Are dimensions correctly preserved in these derivations? Seems that
the error is not the dimension of $u$...]


===== Stability =====

Looking at (ref{vib:ode1:un:exact}), it appears that the numerical
solution has constant and correct amplitude, but an error in the
angular frequency. A constant amplitude is not necessarily the case,
however! To see this, note that if only $\Delta t$ is large enough,
the magnitude of the argument to $\sin^{-1}$ in
(ref{vib:ode1:tildeomega}) may be larger than 1, i.e., $\omega\Delta
t/2 > 1$. In this case, $\sin^{-1}(\omega\Delta t/2)$ has a complex
value and therefore $\tilde\omega$ becomes complex.  Type, for
example, `asin(x)` in "wolframalpha.com":
"http://www.wolframalpha.com" to see basic properties of $\sin^{-1}
(x)$).

A complex $\tilde\omega$ can be written $\tilde\omega = \tilde\omega_r
+ i\tilde\omega_i$. Since $\sin^{-1}(x)$ has a *negative* imaginary
part for $x>1$, $\tilde\omega_i < 0$, which means that
$e^{i\tilde\omega t}=e^{-\tilde\omega_i t}e^{i\tilde\omega_r t}$ will
lead to exponential growth in time because $e^{-\tilde\omega_i t}$
with $\tilde\omega_i <0$ has a positive exponent.

idx{stability criterion}

!bnotice Stability criterion
We do not tolerate growth in the amplitude since such growth is not
present in the exact solution. Therefore, we
must impose a *stability criterion* so that
the argument in the inverse sine function leads
to real and not complex values of $\tilde\omega$. The stability
criterion reads

!bt
\begin{equation}
\frac{\omega\Delta t}{2} \leq 1\quad\Rightarrow\quad
\Delta t \leq \frac{2}{\omega}
\tp
\end{equation}
!et
!enotice

With $\omega =2\pi$, $\Delta t > \pi^{-1} = 0.3183098861837907$ will give
growing solutions. Figure ref{vib:ode1:dt:unstable}
displays what happens when $\Delta t =0.3184$,
which is slightly above the critical value: $\Delta t =\pi^{-1} + 9.01\cdot
10^{-5}$.

FIGURE: [fig-vib/vib_unstable, width=400] Growing, unstable solution because of a time step slightly beyond the stability limit. label{vib:ode1:dt:unstable}

===== About the accuracy at the stability limit =====

An interesting question is whether the stability condition $\Delta t <
2/\omega$ is unfortunate, or more precisely: would it be meaningful to
take larger time steps to speed up computations?  The answer is a
clear no. At the stability limit, we have that $\sin^{-1}\omega\Delta
t/2 = \sin^{-1} 1 = \pi/2$, and therefore $\tilde\omega = \pi/\Delta
t$. (Note that the approximate formula
(ref{vib:ode1:tildeomega:series}) is very inaccurate for this value of
$\Delta t$ as it predicts $\tilde\omega = 2.34/pi$, which is a 25
percent reduction.) The corresponding period of the numerical solution
is $\tilde P=2\pi/\tilde\omega = 2\Delta t$, which means that there is
just one time step $\Delta t$ between a peak (maximum) and a
"through": "https://simple.wikipedia.org/wiki/Wave_(physics)"
(minimum) in the numerical solution. This is the shortest possible
wave that can be represented in the mesh! In other words, it is not
meaningful to use a larger time step than the stability limit.

Also, the error in angular frequency when $\Delta t = 2/\omega$ is
severe: Figure ref{vib:ode1:dt:stablimit} shows a comparison of the
numerical and analytical solution with $\omega = 2\pi$ and $\Delta t =
2/\omega = \pi^{-1}$. Already after one period, the numerical solution
has a through while the exact solution has a peak (!).  The error in
frequency when $\Delta t$ is at the stability limit becomes $\omega -
\tilde\omega = \omega(1-\pi/2)\approx -0.57\omega$.  The corresponding
error in the period is $P - \tilde P \approx 0.36P$.  The error after
$m$ periods is then $0.36mP$. This error has reached half a period
when $m=1/(2\cdot 0.36)\approx 1.38$, which theoretically confirms the
observations in Figure ref{vib:ode1:dt:stablimit} that the numerical
solution is a through ahead of a peak already after one and a half
period. Consequently, $\Delta t$ should be chosen much less than the
stability limit to achieve meaningful numerical computations.

FIGURE: [fig-vib/vib_stability_limit, width=400] Numerical solution with $\Delta t$ exactly at the stability limit. label{vib:ode1:dt:stablimit}


!bsummary
From the accuracy and stability
analysis we can draw three important conclusions:

 o The key parameter in the formulas is $p=\omega\Delta t$.
   The period of oscillations is $P=2\pi/\omega$, and the
   number of time steps per period is $N_P=P/\Delta t$.
   Therefore, $p=\omega\Delta t = 2\pi/N_P$, showing that the
   critical parameter is the number of time steps per period.
   The smallest possible $N_P$ is 2, showing that $p\in (0,\pi]$.
 o Provided $p\leq 2$, the amplitude of the numerical solution is
   constant.
 o The ratio of the numerical angular frequency and the exact
   one is
   $\tilde\omega/\omega \approx 1 + \frac{1}{24}p^2$.
   The error $\frac{1}{24}p^2$ leads to wrongly displaced peaks of the numerical
   solution, and the error in peak location grows linearly with time
   (see Exercise ref{vib:exer:phase:err:growth}).
!esummary


======= Alternative schemes based on 1st-order equations =======
label{vib:model2x2}

A standard technique for solving second-order ODEs is to rewrite them
as a system of first-order ODEs and then choose a solution strategy
from the vast collection of methods for first-order ODE systems.
Given the second-order ODE problem

!bt
\[ u^{\prime\prime} + \omega^2 u = 0,\quad u(0)=I,\ u^{\prime}(0)=0,\]
!et
we introduce the auxiliary variable $v=u^{\prime}$ and express the ODE problem
in terms of first-order derivatives of $u$ and $v$:

!bt
\begin{align}
u^{\prime} &= v,
label{vib:model2x2:ueq}\\
v^{\prime} &= -\omega^2 u
label{vib:model2x2:veq}
\tp
\end{align}
!et
The initial conditions become $u(0)=I$ and $v(0)=0$.



===== The Forward Euler scheme =====

A Forward Euler approximation to our $2\times 2$ system of ODEs
(ref{vib:model2x2:ueq})-(ref{vib:model2x2:veq}) becomes

!bt
\begin{align}
\lbrack D_t^+ u &= v\rbrack^n,\\
\lbrack D_t^+ v &= -\omega^2 u\rbrack^n,
\end{align}
!et
or written out,

!bt
\begin{align}
u^{n+1} &= u^n + \Delta t v^n,
label{vib:undamped:FE1}\\
v^{n+1} &= v^n -\Delta t \omega^2 u^n
label{vib:undamped:FE2}
\tp
\end{align}
!et


Let us briefly compare this Forward Euler method with the centered
difference scheme for the second-order differential equation. We have
from (ref{vib:undamped:FE1}) and (ref{vib:undamped:FE2}) applied at
levels $n$ and $n-1$ that

!bt
\[ u^{n+1} = u^n + \Delta t v^n = u^n + \Delta t (v^{n-1} -\Delta t \omega^2 u^{n-1})\tp\]
!et
Since from (ref{vib:undamped:FE1})
!bt
\[ v^{n-1} = \frac{1}{\Delta t}(u^{n}-u^{n-1}),\]
!et
it follows that

!bt
\[ u^{n+1} = 2u^n - u^{n-1} -\Delta t^2\omega^2 u^{n-1},\]
!et
which is very close to the centered difference scheme, but the last
term is evaluated at $t_{n-1}$ instead of $t_n$.  Rewriting, so that
$\Delta t^2\omega^2u^{n-1}$ appears alone on the right-hand side, and
then dividing by $\Delta t^2$, the new left-hand side is an
approximation to $u^{\prime\prime}$ at $t_n$, while the right-hand
side is sampled at $t_{n-1}$.  All terms should be sampled at the same
mesh point, so using $\omega^2 u^{n-1}$ instead of $\omega^2 u^n$
points to a kind of mathematical error in the derivation of the
scheme. This error turns out to be rather crucial for the accuracy of
the Forward Euler method applied to vibration problems (Section
ref{vib:model2x2:compare} has examples).

The reasoning above does not imply that the Forward Euler scheme is not
correct, but more that it is almost equivalent to a second-order accurate
scheme for the second-order ODE formulation, and that the error
committed has to do with a wrong sampling point.

===== The Backward Euler scheme =====

A Backward Euler approximation to the ODE system is equally easy to
write up in the operator notation:

!bt
\begin{align}
\lbrack D_t^- u &= v\rbrack^{n+1},\\
\lbrack D_t^- v &= -\omega u\rbrack^{n+1} \tp
\end{align}
!et
This becomes a coupled system for $u^{n+1}$ and $v^{n+1}$:

!bt
\begin{align}
u^{n+1} - \Delta t v^{n+1} &= u^{n},
label{vib:undamped:BE1}\\
v^{n+1} + \Delta t \omega^2 u^{n+1} &= v^{n}
label{vib:undamped:BE2}
\tp
\end{align}
!et

We can compare (ref{vib:undamped:BE1})-(ref{vib:undamped:BE2}) with
the centered scheme (ref{vib:ode1:step4}) for the second-order
differential equation.  To this end, we eliminate $v^{n+1}$ in
(ref{vib:undamped:BE1}) using (ref{vib:undamped:BE2}) solved with
respect to $v^{n+1}$.  Thereafter, we eliminate $v^n$ using
(ref{vib:undamped:BE1}) solved with respect to $v^{n+1}$ and also
replacing $n+1$ by $n$ and $n$ by $n-1$.  The resulting equation
involving only $u^{n+1}$, $u^n$, and $u^{n-1}$ can be ordered as

!bt
\[ \frac{u^{n+1}-2u^n+u^{n-1}}{\Delta t^2} = -\omega^2 u^{n+1},\]
!et
which has almost the same form as the centered scheme for the
second-order differential equation, but the right-hand side is
evaluated at $u^{n+1}$ and not $u^n$. This inconsistent sampling
of terms has a dramatic effect on the numerical solution, as we
demonstrate in Section ref{vib:model2x2:compare}.

===== The Crank-Nicolson scheme =====
label{vib:undamped:CN}

The Crank-Nicolson scheme takes this form in the operator notation:

!bt
\begin{align}
\lbrack D_t u &= \overline{v}^t\rbrack^{n+\half},\\
\lbrack D_t v &= -\omega^2 \overline{u}^t\rbrack^{n+\half}
\tp
\end{align}
!et
Writing the equations out and rearranging terms,
shows that this is also a coupled system of two linear equations
at each time level:

!bt
\begin{align}
u^{n+1} - \half\Delta t v^{n+1} &= u^{n} + \half\Delta t v^{n},\\
v^{n+1} + \half\Delta t \omega^2 u^{n+1} &= v^{n}
- \half\Delta t \omega^2 u^{n}
\tp
\end{align}
!et

We may compare also this scheme to the centered discretization of
the second-order ODE. It turns out that the Crank-Nicolson scheme is
equivalent to the discretization

!bt
\begin{equation}
\frac{u^{n+1} - 2u^n + u^{n-1}}{\Delta t^2} = - \omega^2
\frac{1}{4}(u^{n+1} + 2u^n + u^{n-1}) = -\omega^2 u^{n} +
\Oof{\Delta t^2}\tp
label{vib:undamped:CN:equiv_utt}
\end{equation}
!et
That is, the Crank-Nicolson is equivalent to (ref{vib:ode1:step4})
for the second-order ODE, apart from an extra term of size
$\Delta t^2$, but this is an error of the same order as in
the finite difference approximation on the left-hand side of the
equation anyway. The fact that the Crank-Nicolson scheme is so
close to (ref{vib:ode1:step4}) makes it a much better method than
the Forward or Backward Euler methods for vibration problems,
as will be illustrated in Section ref{vib:model2x2:compare}.

Deriving (ref{vib:undamped:CN:equiv_utt}) is a bit tricky.
We start with rewriting the Crank-Nicolson equations as follows

!bt
\begin{align}
u^{n+1} - u^n &= \frac{1}{2}\Delta t(v^{n+1} + v^n),
label{vib:undamped:CN3a}\\
v^{n+1}  &= v^n -\frac{1}{2}\Delta t\omega^2 (u^{n+1} + u^n),
label{vib:undamped:CN4a}
\end{align}
!et
and add the latter at the previous time level as well:

!bt
\begin{equation}
v^{n}  = v^{n-1} -\frac{1}{2}\Delta t\omega^2(u^{n} + u^{n-1})
label{vib:undamped:CN4b1}
\end{equation}
!et
We can also rewrite (ref{vib:undamped:CN3a}) at the previous time level
as

!bt
\begin{equation}
v^{n} + v^{n-1} = \frac{2}{\Delta t}(u^{n} - u^{n-1})\tp
label{vib:undamped:CN4b}
\end{equation}
!et
Inserting (ref{vib:undamped:CN4a}) for $v^{n+1}$ in
(ref{vib:undamped:CN3a}) and
(ref{vib:undamped:CN4b1}) for $v^{n}$ in
(ref{vib:undamped:CN3a}) yields after some reordering:

!bt
\[ u^{n+1} - u^n = \frac{1}{2}(-\frac{1}{2}\Delta t\omega^2
(u^{n+1} + 2u^n + u^{n-1}) + v^n + v^{n-1})\tp\]
!et
Now, $v^n + v^{n-1}$ can be eliminated by means of
(ref{vib:undamped:CN4b}). The result becomes

!bt
\begin{equation}
u^{n+1} - 2u^n + u^{n-1} = -\Delta t^2\omega^2
\frac{1}{4}(u^{n+1} + 2u^n + u^{n-1})\tp
label{vib:undamped:CN5}
\end{equation}
!et
It can be shown that

!bt
\[ \frac{1}{4}(u^{n+1} + 2u^n + u^{n-1}) \approx u^n + \Oof{\Delta t^2},\]
!et
meaning that (ref{vib:undamped:CN5}) is an approximation to
the centered scheme (ref{vib:ode1:step4}) for the second-order ODE where
the sampling error in the term $\Delta t^2\omega^2 u^n$ is of the same
order as the approximation errors in the finite differences, i.e.,
$\Oof{\Delta t^2}$. The Crank-Nicolson scheme written as
(ref{vib:undamped:CN5}) therefore has consistent sampling of all
terms at the same time point $t_n$.


===== Comparison of schemes =====
label{vib:model2x2:compare}

We can easily compare methods like the ones above (and many more!)
with the aid of the
"Odespy": "https://github.com/hplgit/odespy" package. Below is
a sketch of the code.

@@@CODE src-vib/vib_undamped_odespy.py fromto: import odespy@# Compute energy
There is quite some more code dealing with plots also, and we refer
to the source file "`vib_undamped_odespy.py`": "${src_vib}/vib_undamped_odespy.py"
for details. Observe that keyword arguments in `f(u,t,w=1)` can
be supplied through a solver parameter `f_kwargs` (dictionary of
additional keyword arguments to `f`).

Specification of the Forward Euler, Backward Euler, and
Crank-Nicolson schemes is done like this:

!bc pycod
solvers = [
    odespy.ForwardEuler(f),
    # Implicit methods must use Newton solver to converge
    odespy.BackwardEuler(f, nonlinear_solver='Newton'),
    odespy.CrankNicolson(f, nonlinear_solver='Newton'),
    ]
!ec

idx{phase plane plot}

The `vib_undamped_odespy.py` program makes two plots of the computed
solutions with the various methods in the `solvers` list: one plot
with $u(t)$ versus $t$, and one *phase plane plot* where $v$ is
plotted against $u$.  That is, the phase plane plot is the curve
$(u(t),v(t))$ parameterized by $t$. Analytically, $u=I\cos(\omega t)$
and $v=u^{\prime}=-\omega I\sin(\omega t)$.  The exact curve
$(u(t),v(t))$ is therefore an ellipse, which often looks like a circle
in a plot if the axes are automatically scaled. The important feature,
however, is that the exact curve $(u(t),v(t))$ is closed and repeats
itself for every period. Not all numerical schemes are capable of
doing that, meaning that the amplitude instead shrinks or grows with
time.

Figure ref{vib:ode1:1st:odespy:theta:phaseplane} show the
results. Note that Odespy applies the label MidpointImplicit for what
we have specified as `CrankNicolson` in the code (`CrankNicolson` is
just a synonym for class `MidpointImplicit` in the Odespy code).  The
Forward Euler scheme in Figure
ref{vib:ode1:1st:odespy:theta:phaseplane} has a pronounced spiral
curve, pointing to the fact that the amplitude steadily grows, which
is also evident in Figure ref{vib:ode1:1st:odespy:theta}.  The
Backward Euler scheme has a similar feature, except that the spriral
goes inward and the amplitude is significantly damped.  The changing
amplitude and the spiral form decreases with decreasing time step.
The Crank-Nicolson scheme looks much more accurate.  In fact, these
plots tell that the Forward and Backward Euler schemes are not
suitable for solving our ODEs with oscillating solutions.

FIGURE: [fig-vib/vib_theta_1_pp, width=800 frac=1.0] Comparison of classical schemes in the phase plane for two time step values. label{vib:ode1:1st:odespy:theta:phaseplane}

FIGURE: [fig-vib/vib_theta_1_u, width=800 frac=1.0] Comparison of solution curves for classical schemes. label{vib:ode1:1st:odespy:theta}


===== Runge-Kutta methods =====

We may run two other popular standard methods for first-order ODEs,
the 2nd- and 4th-order Runge-Kutta methods, to see how they
perform. Figures ref{vib:ode1:1st:odespy:RK:phaseplane} and
ref{vib:ode1:1st:odespy:RK} show the solutions with larger $\Delta t$
values than what was used in the previous two plots.

FIGURE: [fig-vib/vib_RK_1_pp, width=800 frac=1.0] Comparison of Runge-Kutta schemes in the phase plane. label{vib:ode1:1st:odespy:RK:phaseplane}

FIGURE: [fig-vib/vib_RK_1_u, width=800 frac=1.0] Comparison of Runge-Kutta schemes. label{vib:ode1:1st:odespy:RK}


# #ifdef notready
How the
amplitude develops in longer time integrations is illustrated in
Figures ref{vib:ode1:1st:odespy:RK:long:phaseplane} and
ref{vib:ode1:1st:odespy:RK:long}. The markers are dropped in these
plots because there are so many mesh points with markers when $T$
corresponds to 10 periods.

FIGURE: [fig-vib/vib_RK_10_pp, width=800 frac=1.0] Long-time behavior of Runge-Kutta schemes in the phase plane. label{vib:ode1:1st:odespy:RK:long:phaseplane}

FIGURE: [fig-vib/vib_RK_10_u, width=800 frac=1.0] Long-time behavior of Runge-Kutta schemes. label{vib:ode1:1st:odespy:RK:long}

# #endif

The visual impression is that the 4th-order Runge-Kutta method is very
accurate, under all circumstances in these tests, while the 2nd-order
scheme suffers from amplitude errors unless the time step is very
small.


The corresponding results for the Crank-Nicolson scheme are shown in
Figure ref{vib:ode1:1st:odespy:CN:long:phaseplane}.  It is clear that
the Crank-Nicolson scheme outperforms the 2nd-order Runge-Kutta
method. Both schemes have the same order of accuracy $\Oof{\Delta
t^2}$, but their differences in the accuracy that matters in a real
physical application is very clearly pronounced in this example.
Exercise ref{vib:exer:undamped:odespy} invites you to investigate how
the amplitude is computed by a series of famous methods for
first-order ODEs.

[hpl: Wrong aspact of scales in bottom left plot in Figure ref{vib:ode1:1st:odespy:CN:long:phaseplane}? Seems so.]

FIGURE: [fig-vib/vib_CN_10_pp, width=800 frac=1.0] Long-time behavior of the Crank-Nicolson scheme in the phase plane. label{vib:ode1:1st:odespy:CN:long:phaseplane}

## This one has different types of plot compared...
##FIGURE: [fig-vib/vib_CN_10_u, width=800 frac=1.0] Long-time behavior of the Crank-Nicolson scheme. label{vib:ode1:1st:odespy:CN:long}


===== Analysis of the Forward Euler scheme =====

We may try to find exact solutions of the discrete equations
(ref{vib:undamped:FE1})-(ref{vib:undamped:FE2}) in the Forward Euler
method to better understand why this otherwise useful method has so
bad performance for vibration ODEs. An ``ansatz'' for the solution of
the discrete equations is

!bt
\begin{align*}
u^n &= IA^n,\\
v^n &= qIA^n,
\end{align*}
!et
where $q$ and $A$ are scalars to be determined. We could have used a complex
exponential form $e^{i\tilde\omega n\Delta t}$ since we get
oscillatory solutions, but the oscillations grow in the Forward Euler
method, so the numerical frequency $\tilde\omega$ will be complex
anyway (producing an exponentially growing amplitude). Therefore, it is
easier to just work with potentially complex $A$ and $q$ as introduced
above.

The Forward Euler scheme leads to

!bt
\begin{align*}
A &= 1 + \Delta t q,\\
A &= 1 - \Delta t\omega^2 q^{-1}\tp
\end{align*}
!et
We can easily eliminate $A$, get $q^2 + \omega^2=0$, and solve for

!bt
\[ q = \pm i\omega,\]
!et
which gives

!bt
\[ A = 1 \pm \Delta t i\omega\tp\]
!et
We shall take the real part of $A^n$ as the solution. The two values
of $A$ are complex conjugates, and the real part of $A^n$ will be the
same for both roots. This is easy to realize if we rewrite the complex
numbers in polar form, which is also convenient for further analysis
and understanding.  The polar form $re^{i\theta}$ of a complex number
$x+iy$ has $r=\sqrt{x^2+y^2}$ and $\theta = \tan^{-1}(y/x)$.  Hence,
the polar form of the two values for $A$ becomes

!bt
\[ 1 \pm \Delta t i\omega = \sqrt{1+\omega^2\Delta t^2}e^{\pm i\tan^{-1}(\omega\Delta t)}\tp\]
!et
Now it is very easy to compute $A^n$:

!bt
\[ (1 \pm \Delta t i\omega)^n = (1+\omega^2\Delta t^2)^{n/2}e^{\pm ni\tan^{-1}(\omega\Delta t)}\tp\]
!et
Since $\cos (\theta n) = \cos (-\theta n)$, the real parts of the two
numbers become the same. We therefore continue with the solution that has
the plus sign.

The general solution is $u^n = CA^n$, where $C$ is a constant
determined from the initial condition: $u^0=C=I$. We have $u^n=IA^n$
and $v^n=qIA^n$. The final solutions are just the real part of the
expressions in polar form:

!bt
\begin{align}
u^n & =
I(1+\omega^2\Delta t^2)^{n/2}\cos (n\tan^{-1}(\omega\Delta t)),\\
v^n &=- \omega
I(1+\omega^2\Delta t^2)^{n/2}\sin (n\tan^{-1}(\omega\Delta t))\tp
\end{align}
!et
The expression $(1+\omega^2\Delta t^2)^{n/2}$ causes growth of
the amplitude, since a number greater than one is raised to a positive
exponent $n/2$. We can develop a series expression to better understand
the formula for the amplitude. Introducing $p=\omega\Delta t$ as the
key variable and using `sympy` gives

!bc pyshell
>>> from sympy import *
>>> p = symbols('p', real=True)
>>> n = symbols('n', integer=True, positive=True)
>>> amplitude = (1 + p**2)**(n/2)
>>> amplitude.series(p, 0, 4)
1 + n*p**2/2 + O(p**4)
!ec
The amplitude goes like $1 + \half n\omega^2\Delta t^2$, clearly growing
linearly in time (with $n$).

We can also investigate the error in the angular frequency by a
series expansion:

!bc pyshell
>>> n*atan(p).series(p, 0, 4)
n*(p - p**3/3 + O(p**4))
!ec
This means that the solution for $u^n$ can be written as

!bt
\[ u^n = (1 + \half n\omega^2\Delta t^2 + \Oof{\Delta t^4})
\cos\left(\omega t - \frac{1}{3}\omega t\Delta t^2 + \Oof{\Delta t^4}\right)
\tp\]
!et
The error in the angular frequency is of the same order as in the
scheme (ref{vib:ode1:step4}) for the second-order ODE, but the error
in the amplitude is severe.


======= Energy considerations =======
label{vib:model1:energy}

idx{mechanical energy} idx{energy principle}

The observations of various methods in the previous section can be
better interpreted if we compute a quantity reflecting
the total *energy of the system*. It turns out that this quantity,

!bt
\[ E(t) = \half(u^{\prime})^2 + \half\omega^2u^2,\]
!et
is *constant* for all $t$. Checking that $E(t)$ really remains constant
brings evidence that the numerical computations are sound.
It turns out that $E$ is proportional to the mechanical energy
in the system. Conservation of energy is
much used to check numerical simulations, so it is well invested time to
dive into this subject.

===== Derivation of the energy expression =====
label{vib:model1:energy:expr}

We start out with multiplying

!bt
\[ u^{\prime\prime} + \omega^2 u = 0,\]
!et
by $u^{\prime}$ and integrating from $0$ to $T$:

!bt
\[ \int_0^T u^{\prime\prime}u^{\prime} dt + \int_0^T\omega^2 u u^{\prime} dt = 0\tp\]
!et
Observing that

!bt
\[ u^{\prime\prime}u^{\prime} = \frac{d}{dt}\half(u^{\prime})^2,\quad uu^{\prime} = \frac{d}{dt} {\half}u^2,\]
!et
we get

!bt
\[
\int_0^T (\frac{d}{dt}\half(u^{\prime})^2 + \frac{d}{dt} \half\omega^2u^2)dt = E(T) - E(0)=0,
\]
!et
where we have introduced

!bt
\begin{equation}
E(t) = \half(u^{\prime})^2 + \half\omega^2u^2\tp
label{vib:model1:energy:balance1}
\end{equation}
!et
The important result from this derivation is that the total energy
is constant:

!bt
\[ E(t) = E(0)\tp\]
!et

!bwarning $E(t)$ is closely related to the system's energy
The quantity $E(t)$ derived above is physically not the mechanical energy of a
vibrating mechanical system, but the energy per unit mass. To see this,
we start with Newton's second law $F=ma$ ($F$ is the sum of forces, $m$
is the mass of the system, and $a$ is the acceleration).
The displacement $u$ is related to $a$ through
$a=u^{\prime\prime}$. With a spring force as the only force we have $F=-ku$, where
$k$ is a spring constant measuring the stiffness of the spring.
Newton's second law then implies the differential equation

!bt
\[ -ku = mu^{\prime\prime}\quad\Rightarrow mu^{\prime\prime} + ku = 0\tp\]
!et
This equation of motion can be turned into an energy balance equation
by finding the work done by each term during a time interval $[0,T]$.
To this end, we multiply the equation by $du=u^{\prime}dt$ and integrate:

!bt
\[ \int_0^T muu^{\prime}dt + \int_0^T kuu^{\prime}dt = 0\tp\]
!et
The result is

!bt
\[ \tilde E(t) = E_k(t) + E_p(t) = 0,\]
!et
where

!bt
\begin{equation}
E_k(t) = \frac{1}{2}mv^2,\quad v=u^{\prime},
label{vib:model1:energy:kinetic}
\end{equation}
!et
is the *kinetic energy* of the system, and

!bt
\begin{equation}
E_p(t) = {\half}ku^2
label{vib:model1:energy:potential}
\end{equation}
!et
is the *potential energy*. The sum $\tilde E(t)$ is the total mechanical energy.
The derivation demonstrates the famous energy principle that, under
the right physical circumstances, any
change in the kinetic energy is due to a change in potential energy
and vice versa. (This principle breaks down when we introduce damping
in the system, as we do in Section ref{vib:model2}.)

The equation $mu^{\prime\prime}+ku=0$ can be divided by $m$ and written as
$u^{\prime\prime} + \omega^2u=0$ for $\omega=\sqrt{k/m}$. The energy expression
$E(t)=\half(u^{\prime})^2 + \half\omega^2u^2$ derived earlier is then
$\tilde E(t)/m$, i.e., mechanical energy per unit mass.
!ewarning

=== Energy of the exact solution  ===

Analytically, we have $u(t)=I\cos\omega t$, if $u(0)=I$ and $u^{\prime}(0)=0$,
so we can easily check the energy evolution and confirm that $E(t)$
is constant:

!bt
\[ E(t) = {\half}I^2 (-\omega\sin\omega t)^2
+ \half\omega^2 I^2 \cos^2\omega t
= \half\omega^2 (\sin^2\omega t + \cos^2\omega t) = \half\omega^2
\tp
\]
!et

=== Growth of energy in the Forward Euler scheme ===

The energy at time level $n+1$ in the Forward Euler scheme can easily
be shown to increase:

!bt
\begin{align*}
E^{n+1} &= \half(v^{n+1})^2 + \half\omega^2 (u^{n+1})^2\\
&= \half(v^n - \omega^2\Delta t u^n)^2 + \half\omega^2(u^n + \Delta t v^n)^2\\
&= (1 + \Delta t^2\omega^2)E^n\tp
\end{align*}
!et

# #ifdef EXTRA
===== Discrete total energy =====

The total energy $E(t)$ can be computed as soon as
$u^n$ is available. Using $(u^{\prime})^n\approx [D_{2t} u^n]$ we have

!bt
\[ E^n = \half([D_{2t} u]^n)^2 + \half\omega^2 (u^n)^2\tp\]
!et
The errors involved in $E^n$ get a contribution $\Oof{\Delta t^2}$
from the difference approximation of $u^{\prime}$ and a contribution from
the numerical error in $u^n$. With a second-order scheme for computing
$u^n$, the overall error in $E^n$ is expected to be $\Oof{\Delta t^2}$.

Let us investigate the conservation of discrete total energy when the
second-order equation $u^{\prime\prime}+\omega^2=0$ is solved by the
central scheme (ref{vib:ode1:step4}).

!bt
\begin{align*}
E^{n} &= \half\left(\frac{u^{n+1}-u^{n-1}}{2\Delta t}\right)^2 +
\half\omega^2 (u^n)^2\\
&= \frac{1}{2\Delta t^2}(2u^n - 2u^{n-1} + \Delta t^2\omega^2 u^n)^2 +
\half\omega^2 (2u^{n-1} - u^{n-2} - \Delta t^2\omega^2 u^{n-1})^2\\
&= ...
\end{align*}
!et
see `vib_energy_sympy.py`, but it does not work. This is equivalent
to forward-backward and that preserves a modified energy functional,
see URL: "http://en.wikipedia.org/wiki/Semi-implicit_Euler_method".

See the `Euler_Cromer_energy.pdf` file in `literature` how energy
considerations are done for the first-order system. We may
redo this, read first and judge, it's not really clear how much
insight the discrete calc give. Maybe it is better to just compute
$E$. It seems that working with the 2nd-order system regarding
energy is not so easy, drop that.

Tedious to show things analytically with energy. Plot $E(t)$
for various methods to compare.

Here are my own calculations:

!bt
\[ E^n = \frac{1}{2}(v^n)^2 + \frac{1}{2}\omega^2 (u^n)^2\tp\]
!et

!bt
\begin{align*}
E^{n+1} &= \frac{1}{2}((v^{n+1})^2 + \omega^2 (u^{n+1})^2)\\
&= \frac{1}{2}((v^n - \Delta t\omega^2 u^n)^2 + \omega^2(u^n + \Delta tv^n)^2)\\
&= \frac{1}{2}( (v^n)^2 -2v^n\Delta t\omega^2 u^n + \Delta t^2\omega^4 (u^n)^2
+ \omega^2 (u^n)^2 + 2\omega^2\Delta t u^nv^n + \omega^2\Delta t^2 (v^n)^2)\\
&= \frac{1}{2}( (v^n)^2  + + \omega^2 (u^n)^2 + \Delta t^2\omega^2
((v^n)^2) + \omega^2 (u^n)^2)\\
&= E_n(1 + \Delta t^2\omega^2)
\end{align*}
!et

!bt
\begin{align*}
E^{n+1} &= \frac{1}{2}((v^{n+1})^2 + \omega^2 (u^{n+1})^2)\\
&= \frac{1}{2}((v^n - \Delta t\omega^2 u^{n})^2 + \omega^2(u^n + \Delta tv^{n+1})^2)\\
&= \frac{1}{2}( (v^n)^2 -2v^n\Delta t\omega^2 u^{n} + \Delta t^2\omega^4 (u^{n})^2
+ \omega^2 (u^n)^2 + 2\omega^2\Delta t u^nv^{n+1} + \omega^2\Delta t^2 (v^{n+1})^2)\\
&= \frac{1}{2}( (v^n)^2 + \omega^2 (u^n)^2
\Delta t^2\omega^2 ((v^{n+1})^2 + \omega^2(u^{n})^2)
+ 2\omega^2\Delta t u^n(v^{n+1} - v^n))\\
&= E_n +
\frac{1}{2}\Delta t^2\omega^2 ((v^{n+1})^2 + \omega^2(u^{n})^2)
+ u^n\frac{v^{n+1} - v^n}{\Delta t})\\
&= E_n +
\frac{1}{2}\Delta t^2\omega^2 ((v^{n+1})^2 + \omega^2(u^{n})^2)
-\omega^2\Delta t(u^n)^2\\
\end{align*}
!et
Maybe look at modified energy functional where $-\frac{1}{2}\omega^2\Delta t vu$
is subtracted.

# #endif

===== An error measure based on energy =====
label{vib:model1:energy:measure}

The constant energy is well expressed by its initial value $E(0)$, so that
the error in mechanical energy can be computed as a mesh function by

!bt
\begin{equation}
e_E^n = \half\left(\frac{u^{n+1}-u^{n-1}}{2\Delta t}\right)^2
+ \half\omega^2 (u^n)^2 - E(0),
\quad n=1,\ldots,N_t-1,
\end{equation}
!et
where

!bt
\[ E(0) = {\half}V^2 + \half\omega^2I^2,\]
!et
if $u(0)=I$ and $u^{\prime}(0)=V$. Note that we have used a centered
approximation to $u^{\prime}$: $u^{\prime}(t_n)\approx [D_{2t}u]^n$.

A useful norm of the mesh function $e_E^n$ for the discrete mechanical
energy can be the maximum absolute value of $e_E^n$:

!bt
\[ ||e_E^n||_{\ell^\infty} = \max_{1\leq n <N_t} |e_E^n|\tp\]
!et
Alternatively, we can compute other norms involving integration over
all mesh points, but we are often interested in worst case deviation
of the energy, and then the maximum value is of particular relevance.

A vectorized Python implementation of $e_E^n$ takes the form

!bc pycod
# import numpy as np and compute u, t
dt = t[1]-t[0]
E = 0.5*((u[2:] - u[:-2])/(2*dt))**2 + 0.5*w**2*u[1:-1]**2
E0 = 0.5*V**2 + 0.5**w**2*I**2
e_E = E - E0
e_E_norm = np.abs(e_E).max()
!ec

The convergence rates of the quantity `e_E_norm` can be used for
verification.  The value of `e_E_norm` is also useful for comparing
schemes through their ability to preserve energy. Below is a table
demonstrating the relative error in total energy for various schemes
(computed by the "`vib_undamped_odespy.py`":
"${src_vib}/vib_undamped_odespy.py" program). The test problem is
$u^{\prime\prime} + 4\pi^2 u =0$ with $u(0)=1$ and $u'(0)=0$, so the
period is 1 and $E(t)\approx 4.93$. We clearly see that the
Crank-Nicolson and the Runge-Kutta schemes are superior to the Forward
and Backward Euler schemes already after one period.

|-----------------------------------------------|
| Method | $T$ | $\Delta t$ | $\max \left\vert e_E^n\right\vert/e_E^0$ |
|---l-------l-------l------------l--------------|
| Forward Euler | $1$ | $0.025$ | $1.678\cdot 10^{0}$ |
| Backward Euler | $1$ | $0.025$ | $6.235\cdot 10^{-1}$ |
| Crank-Nicolson | $1$ | $0.025$ | $1.221\cdot 10^{-2}$ |
| Runge-Kutta 2nd-order | $1$ | $0.025$ | $6.076\cdot 10^{-3}$ |
| Runge-Kutta 4th-order | $1$ | $0.025$ | $8.214\cdot 10^{-3}$ |
|-----------------------------------------------|

However, after 10 periods, the picture is much more dramatic:

|-----------------------------------------------|
| Method | $T$ | $\Delta t$ | $\max \left\vert e_E^n\right\vert/e_E^0$ |
|---l-------l-------l------------l--------------|
| Forward Euler | $10$ | $0.025$ | $1.788\cdot 10^{4}$ |
| Backward Euler | $10$ | $0.025$ | $1.000\cdot 10^{0}$ |
| Crank-Nicolson | $10$ | $0.025$ | $1.221\cdot 10^{-2}$ |
| Runge-Kutta 2nd-order | $10$ | $0.025$ | $6.250\cdot 10^{-2}$ |
| Runge-Kutta 4th-order | $10$ | $0.025$ | $8.288\cdot 10^{-3}$ |
|-----------------------------------------------|

The Runge-Kutta and Crank-Nicolson methods hardly change their energy
error with $T$, while the error in the Forward Euler method grows to
huge levels and a relative error of 1 in the Backward Euler method
points to $E(t)\rightarrow 0$ as $t$ grows large.

Running multiple values of $\Delta t$, we can get some insight into
the convergence of the energy error:

|-----------------------------------------------|
| Method | $T$ | $\Delta t$ | $\max \left\vert e_E^n\right\vert/e_E^0$ |
|---l-------l-------l------------l--------------|
| Forward Euler | $10$ | $0.05$ | $1.120\cdot 10^{8}$ |
| Forward Euler | $10$ | $0.025$ | $1.788\cdot 10^{4}$ |
| Forward Euler | $10$ | $0.0125$ | $1.374\cdot 10^{2}$ |
| Backward Euler | $10$ | $0.05$ | $1.000\cdot 10^{0}$ |
| Backward Euler | $10$ | $0.025$ | $1.000\cdot 10^{0}$ |
| Backward Euler | $10$ | $0.0125$ | $9.928\cdot 10^{-1}$ |
| Crank-Nicolson | $10$ | $0.05$ | $4.756\cdot 10^{-2}$ |
| Crank-Nicolson | $10$ | $0.025$ | $1.221\cdot 10^{-2}$ |
| Crank-Nicolson | $10$ | $0.0125$ | $3.125\cdot 10^{-3}$ |
| Runge-Kutta 2nd-order | $10$ | $0.05$ | $6.152\cdot 10^{-1}$ |
| Runge-Kutta 2nd-order | $10$ | $0.025$ | $6.250\cdot 10^{-2}$ |
| Runge-Kutta 2nd-order | $10$ | $0.0125$ | $7.631\cdot 10^{-3}$ |
| Runge-Kutta 4th-order | $10$ | $0.05$ | $3.510\cdot 10^{-2}$ |
| Runge-Kutta 4th-order | $10$ | $0.025$ | $8.288\cdot 10^{-3}$ |
| Runge-Kutta 4th-order | $10$ | $0.0125$ | $2.058\cdot 10^{-3}$ |
|-----------------------------------------------|

A striking fact from this table is that the error of the Forward Euler
method is reduced by the same factor as $\Delta t$ is reduced by,
while the error in the Crank-Nicolson method has a reduction
proportional to $\Delta t^2$ (we cannot say anything for the Backward
Euler method). However, for the RK2 method, halving $\Delta t$ reduces
the error by almost a factor of 10 (!), and for the RK4 method the
reduction seems proportional to $\Delta t^2$ only (and the trend is
confirmed by running smaller time steps, so for $\Delta t = 3.9\cdot
10^{-4}$ the relative error of RK2 is a factor 10 smaller than that of
RK4!).

# #ifdef EXTRA
# This is not correct - E(t) goes like dt**2, unlikely...

What is the corresponding relative error in energy of the centered
scheme (ref{vib:ode1:step4}) for the second-order ODE $u^{\prime\prime}
+\omega^2 u=0$? We know that the solution has exact amplitude:
$u^n = I\cos(\tilde\omega t_n)$. Using that

!bt
\[ u^n=e^{i\tilde\omega t_n}:\quad [D_{2t} u]^n = u^n\frac{1}{\Delta t}i\sin{(\tilde\omega\Delta t)},\]
!et
% if BOOK == "book":
(see formula (ref{form:exp:fd1c:center}) in Appendix ref{sec:form:fdexp}),
% endif
we get

!bt
\begin{align*}
e_E^n &= \frac{1}{2}(-\Delta t^{-2}\sin^2(\tilde\omega\Delta t)
+ \omega^2)I^2e^{2\tilde\omega t_n} - \frac{1}{2}\omega^2I^2\\
&= ((\tilde\omega - \omega)^2 - \frac{1}{3}\tilde\omega^4\Delta t^2
 + \Oof{\Delta t^4})\frac{1}{2}I^2e^{2\tilde\omega t_n}
 - \frac{1}{2}\omega^2I^2\tp
\end{align*}
!et

!bc
Series for sin^2(x): x**2 - x**4/3 + 2*x**6/45 + O(x**8)
!ec
# #endif

# Should build a verification test on the energy error.

# Link phase plane plot to energy
#A phase plane plot shows the curve $(u(t), u^{\prime}(t))$.

# #ifdef EXTRA
===== A discrete expression for the energy =====

[hpl: I don't think this will lead to any good.]

We may take the discrete numerical solution and plug into the
energy formula. It fulfills the formula if we compute $u^{\prime}$
by differentiation. However, if we use a numerical formula for the
derivative, there will be an approximation error.
One can analyze this by expanding $\cos(\tilde\omega(t\pm\Delta)$
and get the numerical derivative as $-2\sin\tilde\omega t\sin\omega\Delta t$.
Then $\sin^x$ can be expressed as $\sin^2x/2$ (for which we have
expressions!) by $1-\cos^2x$ and $\cos x = 1-2\sin^2x/2$. Uncertain
if this is a very valuable expression since it only tells the error
if we compute the energy in a code based on numerical approximation to
$u^{\prime}$.
# #endif

======= The Euler-Cromer method =======
label{vib:model2x2:EulerCromer}

While the Runge-Kutta methods and the Crank-Nicolson scheme work well
for the vibration equation modeled as a first-order ODE system, both
were inferior to the straightforward centered difference scheme for
the second-order equation $u^{\prime\prime}+\omega^2u=0$. However,
there is a similarly successful scheme available for the first-order
system $u^{\prime}=v$, $v^{\prime}=-\omega^2u$, to be presented below.
The ideas of the scheme and their further developments have become
very popular in particle and rigid body dynamics and hence widely
used by physicists.


idx{forward-backward Euler-Cromer scheme}
idx{Euler-Cromer scheme}

===== Forward-backward discretization =====

The idea is to apply a Forward Euler discretization to the first
equation and a Backward Euler discretization to the second. In
operator notation this is stated as

!bt
\begin{align}
\lbrack D_t^+u &= v\rbrack^n,\\
\lbrack D_t^-v &= -\omega^2 u\rbrack^{n+1}
\tp
\end{align}
!et
We can write out the formulas and collect the unknowns on the left-hand side:

!bt
\begin{align}
u^{n+1} &= u^n + \Delta t v^n,
label{vib:model2x2:EulerCromer:ueq1}\\
v^{n+1} &= v^n -\Delta t \omega^2u^{n+1}
label{vib:model2x2:EulerCromer:veq1}
\tp
\end{align}
!et
We realize that after $u^{n+1}$ has been computed from
(ref{vib:model2x2:EulerCromer:ueq1}), it may be used directly
in
(ref{vib:model2x2:EulerCromer:veq1}) to compute $v^{n+1}$.

In physics, it is more common to update the $v$ equation first, with a
forward difference, and thereafter the $u$ equation, with a backward
difference that applies the most recently computed $v$ value:

!bt
\begin{align}
v^{n+1} &= v^n -\Delta t \omega^2u^{n},
label{vib:model2x2:EulerCromer:veq1b}\\
u^{n+1} &= u^n + \Delta t v^{n+1}\tp
label{vib:model2x2:EulerCromer:ueq1b}
\end{align}
!et
The advantage of ordering the ODEs as in
(ref{vib:model2x2:EulerCromer:veq1b})-(ref{vib:model2x2:EulerCromer:ueq1b})
becomes evident when considering complicated models. Such models are
included if we write our vibration ODE more generally as

!bt
\[ u^{\prime\prime} + g(u, u^{\prime}, t)=0\tp\]
!et
We can rewrite this second-order ODE as two first-order ODEs,

!bt
\begin{align*}
v^{\prime} &= -g(u,v,t),\\
u^{\prime} &= v\tp
\end{align*}
!et
This rewrite allows the following scheme to be used:

!bt
\begin{align*}
v^{n+1} &= v^n -\Delta t\, g(u^n,v^n,t),\\
u^{n+1} &= u^n + \Delta t\, v^{n+1}\tp
\end{align*}
!et
We realize that the first update works well with any $g$ since old
values $u^n$ and $v^n$ are used. Switching the equations would
demand $u^{n+1}$ and $v^{n+1}$ values in $g$ and result in nonlinear
algebraic equations to be solved at each time level.



#Despite using a backward difference, there is no need to solve a coupled
#system for $u^{n+1}$ and $v^{n+1}$ because the structure of the ODEs
#allows (ref{vib:model2x2:EulerCromer:ueq1})

idx{symplectic scheme}

The scheme
(ref{vib:model2x2:EulerCromer:veq1b})-(ref{vib:model2x2:EulerCromer:ueq1b})
goes under several names: forward-backward scheme, "semi-implicit
Euler method":
"http://en.wikipedia.org/wiki/Semi-implicit_Euler_method",
semi-explicit Euler, symplectic Euler,
# #if FORMAT in ("latex", "pdflatex")
Newton-St\"{o}rmer-Verlet,
# #else
Newton-Stoermer-Verlet,
# #endif
and Euler-Cromer.  We shall stick to the latter name.
Since both time
discretizations are based on first-order difference approximation, one
may think that the scheme is only of first-order, but this is not
true: the use of a forward and then a backward difference make errors
cancel so that the overall error in the scheme is $\Oof{\Delta
t^2}$. This is explained below. [hpl: This is not correct!]

How does the Euler-Cromer method preserve the total energy?
We may run the example from Section ref{vib:model1:energy:measure}:

|-----------------------------------------------|
| Method | $T$ | $\Delta t$ | $\max \left\vert e_E^n\right\vert/e_E^0$ |
|---l-------l-------l------------l--------------|
| Euler-Cromer | $10$ | $0.05$ | $2.530\cdot 10^{-2}$ |
| Euler-Cromer | $10$ | $0.025$ | $6.206\cdot 10^{-3}$ |
| Euler-Cromer | $10$ | $0.0125$ | $1.544\cdot 10^{-3}$ |
|-----------------------------------------------|

The relative error in the total energy decreases as $\Delta t^2$,
and the error level is slightly lower than for the Crank-Nicolson and
Runge-Kutta methods.


===== Equivalence with the scheme for the second-order ODE =====
label{vib:model2x2:EulerCromer:equiv}

We shall now show that the Euler-Cromer scheme for the system of
first-order equations is equivalent to the centered finite difference
method for the second-order vibration ODE (!).

We may eliminate the $v^n$ variable from
(ref{vib:model2x2:EulerCromer:ueq1})-(ref{vib:model2x2:EulerCromer:veq1})
or
(ref{vib:model2x2:EulerCromer:veq1b})-(ref{vib:model2x2:EulerCromer:ueq1b}).
The $v^{n+1}$ term in (ref{vib:model2x2:EulerCromer:veq1b}) can
be eliminated from (ref{vib:model2x2:EulerCromer:ueq1b}):

!bt
\begin{equation}
u^{n+1} = u^n + \Delta t (v^n - \omega^2\Delta t u^n)\tp
label{vib:model2x2:EulerCromer:elim1}
\end{equation}
!et
The $v^{n}$ quantity can be expressed by $u^n$ and $u^{n-1}$
using (ref{vib:model2x2:EulerCromer:ueq1b}):
!bt
\[ v^{n} = \frac{u^n - u^{n-1}}{\Delta t},
\]
!et
and when this is inserted in (ref{vib:model2x2:EulerCromer:elim1}) we get
!bt
\begin{equation}
u^{n+1} = 2u^n - u^{n-1} - \Delta t^2 \omega^2u^{n},
\end{equation}
!et
which is nothing but the centered scheme (ref{vib:ode1:step4})!  The
two seemingly different numerical methods are mathematically
equivalent. Consequently, the previous analysis of
(ref{vib:ode1:step4}) also applies to the Euler-Cromer method. In
particular, the amplitude is constant, given that the stability
criterion is fulfilled, but there is always an angular frequency error
(ref{vib:ode1:tildeomega:series}). Exercise
ref{vib:exer:EulerCromer:analysis} gives guidance on how to derive the
exact discrete solution of the two equations in the Euler-Cromer
method.

Although the Euler-Cromer scheme and the method (ref{vib:ode1:step4})
are equivalent, there could be differences in the way they handle the
initial conditions. Let is look into this topic.  The initial
condition $u^{\prime}=0$ means $u^{\prime}=v=0$.  From
(ref{vib:model2x2:EulerCromer:veq1b}) we get

!bt
\[ v^1=v^0-\Delta t\omega^2 u^0
=\Delta t\omega^2 u^0,\]
!et
and from (ref{vib:model2x2:EulerCromer:ueq1b})
it follows that

!bt
\[ u^1=u^0 + \Delta t v^1 = u^0 - \omega^2\Delta t^2 u^0\tp\]
!et
When we previously used a centered approximation of $u^{\prime}(0)=0$
combined with the discretization (ref{vib:ode1:step4}) of the
second-order ODE, we got a slightly different result: $u^1=u^0 -
\frac{1}{2}\omega^2\Delta t^2 u^0$. The difference is
$\frac{1}{2}\omega^2\Delta t^2 u^0$, which is of second order in
$\Delta t$, seemingly consistent with the overall error in the scheme
for the differential equation model.

A different view can also be taken.  If we approximate
$u^{\prime}(0)=0$ by a backward difference, $(u^0-u^{-1})/\Delta t
=0$, we get $u^{-1}=u^0$, and when combined with
(ref{vib:ode1:step4}), it results in $u^1=u^0 - \omega^2\Delta t^2
u^0$. This means that the Euler-Cromer method based on
(ref{vib:model2x2:EulerCromer:ueq1b})-(ref{vib:model2x2:EulerCromer:veq1b})
corresponds to using only a first-order approximation to the initial
condition in the method from Section ref{vib:ode1:fdm}.

Correspondingly, using the formulation
(ref{vib:model2x2:EulerCromer:ueq1})-(ref{vib:model2x2:EulerCromer:veq1})
with $v^n=0$ leads to $u^1=u^0$, which can be interpreted as using a
forward difference approximation for the initial condition
$u^{\prime}(0)=0$.  Both Euler-Cromer formulations lead to slightly
different values for $u^1$ compared to the method in Section
ref{vib:ode1:fdm}.  The error is $\frac{1}{2}\omega^2\Delta t^2 u^0$.

===== Implementation =====
label{vib:model2x2:EulerCromer:impl}

=== Solver function ===

The function below, found in "`vib_undamped_EulerCromer.py`": "${src_vib}/vib_undamped_EulerCromer.py", implements the Euler-Cromer scheme
(ref{vib:model2x2:EulerCromer:veq1b})-(ref{vib:model2x2:EulerCromer:ueq1b}):

@@@CODE src-vib/vib_undamped_EulerCromer.py fromto: import numpy@def solver_ic

=== Verification ===

Since the Euler-Cromer scheme is equivalent to the finite difference
method for the second-order ODE $u^{\prime\prime}+\omega^2u=0$ (see Section
ref{vib:model2x2:EulerCromer:equiv}), the performance of the above
`solver` function is the same as for the `solver` function in Section
ref{vib:impl1}. The only difference is the formula for the first time
step, as discussed above.  This deviation in the Euler-Cromer scheme
means that the discrete solution listed in Section
ref{vib:ode1:analysis:sol} is not a solution of the Euler-Cromer
scheme!

To verify the implementation of the Euler-Cromer method we can adjust
`v[1]` so that the computer-generated values can be compared with the
formula (ref{vib:ode1:un:exact}) from in Section
ref{vib:ode1:analysis:sol}. This adjustment is done in an alternative
solver function, `solver_ic_fix` in `vib_EulerCromer.py`. Since we now
have an exact solution of the discrete equations available, we can
write a test function `test_solver` for checking the equality of
computed values with the formula (ref{vib:ode1:un:exact}):

@@@CODE src-vib/vib_undamped_EulerCromer.py fromto: def test_solver@def demo

Another function, `demo`, visualizes the difference between the
Euler-Cromer scheme and the scheme (ref{vib:ode1:step4}) for the
second-oder ODE, arising from the mismatch in the first time level.

=== Using Odespy ===

The Euler-Cromer method is also available in the Odespy package.  The
important thing to remember, when using this implementation, is that
we must order the unknowns as $v$ and $u$, so the `u` vector at each
time level consists of the velocity $v$ as first component and the
displacement $u$ as second component:

!bc pycod
# Define ODE
def f(u, t, w=1):
    v, u = u
    return [-w**2*u, v]

# Initialize solver
I = 1
w = 2*np.pi
import odespy
solver = odespy.EulerCromer(f, f_kwargs={'w': w})
solver.set_initial_condition([0, I])

# Compute time mesh
P = 2*np.pi/w  # duration of one period
dt = P/timesteps_per_period
Nt = num_periods*timesteps_per_period
T = Nt*dt
import numpy as np
t_mesh = np.linspace(0, T, Nt+1)

# Solve ODE
u, t = solver.solve(t_mesh)
u = u[:,1]  # Extract displacement
!ec

=== Convergence rates ===

We may use the `convergence_rates` function in the file
`vib_undamped.py` to investigate the convergence rate of the
Euler-Cromer method, see the `convergence_rate` function in the file
`vib_undamped_EulerCromer.py`.  Since we could eliminate $v$ to get a
scheme for $u$ that is equivalent to the finite difference method for
the second-order equation in $u$, we would expect the convergence
rates to be the same, i.e., $\mathcal{O}(\Delta t^2)$. However,
measuring the convergence rate of $u$ in the Euler-Cromer scheme shows
that it is $\mathcal{O}(\Delta t)$!  Adjusting the initial condition
does not change the rate. Adjusting $\omega$, as outlined in Section
ref{vib:ode1:analysis:numfreq}, gives a 4th-order method there, while
there is no increase in the measured rate in the Euler-Cromer
scheme. It is obvious that the Euler-Cromer scheme is dramatically
much better than the two other first-order methods, Forward Euler and
Backward Euler, but this is not reflected in the convergence rate of
$u$.


# is anything really gained? is v of higher order compared
# with differentiating u in the 2nd order ODE? most likely,
# v is 2nd order, v from 2nd-order ODE is 1st order

# #if FORMAT in ("pdflatex", "latex")
===== The St\"{o}rmer-Verlet algorithm =====
# #else
===== The Stoermer-Verlet algorithm =====
# #endif
label{vib:model2x2:StormerVerlet}

# See velverlet_EulerCromer_....pdf for discussion and relation to EC

idx{Stoermer-Verlet algorithm}

Another very popular algorithm for vibration problems, especially
for long time simulations, is the
# #if FORMAT in ("pdflatex", "latex")
St\"{o}mer-Verlet
# #else
Stoermer-Verlet
# #endif
algorithm. It has become *the* method among physicists
for molecular simulations as well as particle and rigid body dynamics.

The method can be derived by applying the Euler-Cromer idea
twice, in a symmetric fashion, during the interval $[t_n,t_{n+1}]$:

 o solve $v^{\prime}=-\omega u$ by a Forward Euler step in $[t_n,t_{n+\half}]$
 o solve $u^{\prime}=v$ by a Backward Euler step in $[t_n,t_{n+\half}]$
 o solve $u^{\prime}=v$ by a Forward Euler step in $[t_{n+\half}, t_{n+1}]$
 o solve $v^{\prime}=-\omega u$ by a Backward Euler step in $[t_{n+\half}, t_{n+1}]$

With mathematics,

!bt
\begin{align*}
\frac{v^{n+\half}-v^n}{\half\Delta t} &= -\omega^2 u^n,\\
\frac{u^{n+\half}-u^n}{\half\Delta t} &= v^{n+\half},\\
\frac{u^{n+1}-u^{n-\half}}{\half\Delta t} &= v^{n+\half},\\
\frac{v^{n+1}-v^{n+\half}}{\half\Delta t} &= -\omega^2 u^{n+1}\tp
\end{align*}
!et
The two steps in the middle can be combined to

!bt
\[ \frac{u^{n+1}-u^{n-1}}{\Delta t} = v^{n+\half},\]
!et
and consequently

!bt
\begin{align}
v^{n+\half} &= v^n - \half\Delta t \omega^2 u^n,\\
u^{n+1} &= u^{n} + \Delta t v^{n+\half},\\
v^{n+1} &= v^{n+\half} - \half\Delta t \omega^2 u^{n+1}\tp
\end{align}
!et
Writing the last equation as $v^n = v^{n-\half} - \half\Delta
t\omega^2 u^n$ and using this $v^n$ in the first equation gives
$v^{n+\half} = v^{n-\half} - \Delta t\omega^2 u^n$, and the scheme can
be written as two steps:

!bt
\begin{align}
v^{n+\half} &= v^{n-\half} - \Delta t \omega^2 u^n,
label{vib:model2x2:StormerVerlet:eqv}\\
u^{n+1} &= u^{n} + \Delta t v^{n+\half},
label{vib:model2x2:StormerVerlet:equ}
\end{align}
!et
which is nothing but straightforward centered differences for the
$2\times 2$ ODE system on a *staggered mesh*, see
Section ref{vib:model2x2:staggered}. We have thus seen that
four different reasonings (discretizing $u^{\prime\prime}+\omega^2 u$
directly, using Euler-Cromer, using
# #if FORMAT in ("pdflatex", "latex")
St\"{o}mer-Verlet,
# #else
Stoermer-Verlet,
# #endif
and using centered differences for the $2times 2$ system on a staggered
mesh) all end up with the same equations! The main difference is that
the traditional Euler-Cromer displays first-order convergence in $\Delta t$
(due to less symmetry in the way $u$ and $v$ are treated)
while the others are $\Oof{\Delta t^2}$ schemes.

[hpl: Nobody shows why Euler-Cromer gives 1st order convergence, except
pointing to the fact that it is obvious from two Euler steps,
but it is also equivalent to
the other schemes 2nd order schemes
when we eliminate $v$. There must be something with
the handling $v$ of that lowers the rate...but if nobody else is capable
of explaining it, we must give in too. At least we have shown that
the popular Stoermer-Verlet method is nothing but our staggered mesh very
natural scheme.]

The most numerical stable scheme, with respect to accumulation of
rounding errors, is
(ref{vib:model2x2:StormerVerlet:eqv})-(ref{vib:model2x2:StormerVerlet:equ}).
It has, according to cite{Hairer_Wanner_Norsett_bookI}, better
properties in this regard than the direct scheme for the second-order
ODE.


# #ifdef EXTRA

Inserting $u^n=Ae^{i\tilde\omega n\Delta t}$ and $v^n=BAe^{i\tilde\omega n\Delta t}$,

!bt
\begin{align*}
Be^{i\half\tilde\omega\Delta t} &= B -\half\Delta t\omega^2,\\
e^{i\half\tilde\omega\Delta t} &= e^{-i\half\tilde\omega\Delta t}
+ B\Delta t,\\
Be^{i\half\tilde\omega\Delta t} &= B - \half\Delta t\omega^2
e^{i\half\tilde\omega\Delta t}
\end{align*}
!et
The middle equation gives

!bt
\[ B = \frac{1}{\Delta t}\sin (\half\tilde\omega\Delta t)\tp\]
!et
The first one can be solved with respect to $\tilde\omega$. The real
part of this equation gives

!bt
\[ \cos(\half\tilde\omega\Delta t) +
\frac{\half p^2}{\sin (\half\tilde\omega\Delta t)} = 1  \]
!et
Can plot as function of $\half\tilde\omega\Delta t$ in $[0,\pi/2]$.
# #endif

======= Staggered mesh =======

A more intuitive discretization than the Euler-Cromer method, yet
equivalent, employs solely centered differences in a natural way
for the $2\times 2$ first-order ODE system.
The scheme is in fact fully equivalent to the second-order scheme for
(ref{stag:vib:ODE2nd}), also for the first time step.
Such a scheme needs to operate on a *staggered mesh* in time.
Staggered meshes are very popular in many physical application, maybe foremost
fluid dynamics and electromagnetics, so the topic is important to learn.


===== The Euler-Cromer scheme on a staggered mesh =====
label{vib:model2x2:staggered}

idx{staggered mesh}
idx{staggered Euler-Cromer scheme}
idx{alternating mesh}

[hpl: Do the equations in different sequence, first vel, then pos.]

In a staggered mesh, the unknowns are sought at different points in
the mesh. Specifically, $u$ is sought at
integer time points $t_n$ and $v$ is sought at $t_{n+1/2}$
*between* two $u$ points.
The unknowns are then $u^1, v^{3/2}, u^2, v^{5/2}$, and so on.
We typically use the notation
$u^n$ and $v^{n+\half}$ for the two unknown mesh functions.
Figure ref{staggered:EC:fig1} presents a graphical sketch of two
mesh functions $u$ and $v$ on a staggered mesh.

FIGURE: [fig-vib/staggered_time, width=500 frac=0.8] Examples on mesh functions on a staggered mesh in time. label{staggered:EC:fig1}


On a staggered mesh it is natural to
use centered difference approximations, expressed
in operator notation as

!bt
\begin{align}
\lbrack D_t u &= v\rbrack^{n+\half},\\
\lbrack D_t v &= -\omega u\rbrack^{n+1}
\tp
\end{align}
!et
or if we switch the sequence of the equations:

!bt
\begin{align}
\lbrack D_t v &= -\omega u\rbrack^{n},\\
\lbrack D_t u &= v\rbrack^{n+\half}
\tp
\end{align}
!et
Writing out the formulas gives

!bt
\begin{align}
v^{n+\frac{1}{2}} &= v^{n-\half} -\Delta t \omega^2u^{n}
label{vib:model2x2:EulerCromer:veq1s2},\\
u^{n+1} &= u^{n} + \Delta t v^{n+\half}
label{vib:model2x2:EulerCromer:ueq1s2}
\tp
\end{align}
!et
#We shall use the names
#*forward-backward Euler-Cromer* and *staggered Euler-Cromer*
#to distinguish the two schemes.

We can eliminate the $v$
values and get back the centered scheme based on the second-order
differential equation $u^{\prime\prime} +\omega^2 u = 0$,
so all these three schemes are equivalent.
However, they differ somewhat in the treatment of the initial
conditions.

Suppose we have $u(0)=I$ and $u'(0)=v(0)=0$ as mathematical
initial conditions. This means $u^0=I$ and

!bt
\[ v(0)\approx \half(v^{-\half} + v^{\half}) = 0,
\quad\Rightarrow\quad v^{-\half} =- v^\half\tp\]
!et
Using the discretized equation (ref{vib:model2x2:EulerCromer:veq1s2}) for
$n=0$ yields

!bt
\[ v^\half = v^{-\half} -\Delta t\omega^2 I,\]
!et
and eliminating $v^{-\half} =- v^{\half}$
results in

!bt
\[ v^\half = -\half\Delta t\omega^2I,\]
!et
and

!bt
\[ u^1 = u^0 - \half\Delta t^2\omega^2 I,\]
!et
which is exactly the same equation for $u^1$ as we had in the
centered scheme based on the second-order differential equation
(and hence corresponds to a centered difference approximation of
the initial condition for $u'(0)$).
The conclusion is that a staggered mesh is fully equivalent with
that scheme, while the forward-backward version gives a slight
deviation in the computation of $u^1$.

We can redo the derivation of the initial conditions when $u'(0)=V$:

!bt
\[ v(0)\approx \half(v^{-\half} + v^{\half}) = V,
\quad\Rightarrow\quad v^{-\half} = 2V - v^\half\tp\]
!et
Using this $v^{-\half}$ in

!bt
\[ v^\half = v^{-\half} -\Delta t\omega^2 I,\]
!et
then gives $v^\half = V - \half\Delta t\omega^2 I$.
The general initial conditions are therefore

!bt
\begin{align}
u^0 &= I,
label{vib:ode2:staggered:u0}\\
v^\half &= V - \half\Delta t\omega^2I
label{vib:ode2:staggered:v0}\tp
\end{align}
!et


===== Implementation of the scheme on a staggered mesh =====

The algorithm goes like this:

 o Set the initial values (ref{vib:ode2:staggered:u0}) and
   (ref{vib:ode2:staggered:v0}).
 o For $n=1,2,\ldots$:
   o Compute $u^{n}$ from (ref{vib:model2x2:EulerCromer:ueq1s2}).
   o Compute $v^{n+\half}$ from (ref{vib:model2x2:EulerCromer:veq1s2}).

=== Implementation with integer indices ===

Translating the schemes (ref{vib:model2x2:EulerCromer:ueq1s2})
and (ref{vib:model2x2:EulerCromer:veq1s2}) to computer code
faces the problem of how to store and access $v^{n+\half}$,
since arrays only allow integer indices with base 0.
We must then introduce a convention: $v^{1+\half}$ is stored
in `v[n]` while $v^{1-\half}$ is stored in `v[n-1]`.
We can then write the algorithm in Python as

!bc pycod
def solver(I, w, dt, T):
    dt = float(dt)
    Nt = int(round(T/dt))
    u = zeros(Nt+1)
    v = zeros(Nt+1)
    t = linspace(0, Nt*dt, Nt+1)  # mesh for u
    t_v = t + dt/2                # mesh for v

    u[0] = I
    v[0] = 0 - 0.5*dt*w**2*u[0]
    for n in range(1, Nt+1):
        u[n] = u[n-1] + dt*v[n-1]
        v[n] = v[n-1] - dt*w**2*u[n]
    return u, t, v, t_v
!ec
Note that $u$ and $v$ are returned together with the mesh points such
that the complete mesh function for $u$ is described by `u` and `t`,
while `v` and `t_v` represent the mesh function for $v$.
=== Implementation with half-integer indices ===

Some prefer to see a closer relationship between the code and
the mathematics for the quantities with half-integer indices.
For example, we would like to replace the updating equation for
`v[n]` by

!bc pycod
v[n+half] = v[n-half] - dt*w**2*u[n]
!ec
This is easy to do if we could be sure that `n+half` means `n` and
`n-half` means `n-1`. A possible solution is to define `half` as a
special object such that an integer plus `half` results in the integer,
while an integer minus `half` equals the integer minus 1.
A simple Python class may realize the `half` object:

!bc pycod
class HalfInt:
    def __radd__(self, other):
        return other

    def __rsub__(self, other):
        return other - 1

half = HalfInt()
!ec
The `__radd__` function is invoked for all expressions `n+half`
("right add" with `self` as `half` and `other` as `n`). Similarly,
the `__rsub__` function is invoked for `n-half` and results in `n-1`.

Using the `half` object, we can implement the algorithms in an even
more readable way:

@@@CODE src-vib/vib_undamped_staggered.py fromto: def solver\(@def test_staggered

Verification of this code is easy as we can just compare the computed
`u` with the `u` produced by the `solver` function in
`vib_undamped.py` (which solves $u''+\omega^2u=0$ directly).  The
values should coincide to machine precision since the two numerical
methods are mathematically equivalent.  We refer to the file
"`vib_undamped_staggered.py`": "${src_vib}/vib_undamped_staggered.py"
for the details of a unit test (`test_staggered`) that checks this property.
