======= Generalization: damping, nonlinearities, and excitation =======
label{vib:model2}

idx{nonlinear restoring force}
idx{nonlinear spring}
idx{forced vibrations}

We shall now generalize the simple model problem from
Section ref{vib:model1} to include a possibly nonlinear damping term $f(u^{\prime})$,
a possibly nonlinear spring (or restoring) force $s(u)$, and
some external excitation $F(t)$:

!bt
\begin{equation}
mu^{\prime\prime} + f(u^{\prime}) + s(u) = F(t),\quad u(0)=I,\ u^{\prime}(0)=V,\ t\in (0,T]
\tp
label{vib:ode2}
\end{equation}
!et
We have also included a possibly nonzero initial value for $u^{\prime}(0)$.
The parameters $m$, $f(u^{\prime})$, $s(u)$, $F(t)$, $I$, $V$, and $T$ are
input data.

There are two main types of damping (friction) forces: linear $f(u^{\prime})=bu$, or
quadratic $f(u^{\prime})=bu^{\prime}|u^{\prime}|$. Spring systems often feature linear
damping, while air resistance usually gives rise to quadratic damping.
Spring forces are often linear: $s(u)=cu$, but nonlinear versions
are also common, the most famous is the gravity force on a pendulum
that acts as a spring with $s(u)\sim \sin(u)$.


===== A centered scheme for linear damping =====
label{vib:ode2:fdm:flin}

Sampling (ref{vib:ode2}) at a mesh point $t_n$, replacing
$u^{\prime\prime}(t_n)$ by $[D_tD_tu]^n$, and $u^{\prime}(t_n)$ by $[D_{2t}u]^n$ results
in the discretization

!bt
\begin{equation}
[mD_tD_t u + f(D_{2t}u) + s(u) = F]^n,
\end{equation}
!et
which written out means

!bt
\begin{equation}
m\frac{u^{n+1}-2u^n + u^{n-1}}{\Delta t^2}
+ f(\frac{u^{n+1}-u^{n-1}}{2\Delta t}) + s(u^n) = F^n,
label{vib:ode2:step3b}
\end{equation}
!et
where $F^n$ as usual means $F(t)$ evaluated at $t=t_n$.
Solving (ref{vib:ode2:step3b}) with respect to the unknown
$u^{n+1}$ gives a problem: the $u^{n+1}$ inside the $f$ function
makes the equation *nonlinear* unless $f(u^{\prime})$ is a linear function,
$f(u^{\prime})=bu^{\prime}$. For now we shall assume that $f$ is linear in $u^{\prime}$.
Then

!bt
\begin{equation}
m\frac{u^{n+1}-2u^n + u^{n-1}}{\Delta t^2}
+ b\frac{u^{n+1}-u^{n-1}}{2\Delta t} + s(u^n) = F^n,
label{vib:ode2:step3b2}
\end{equation}
!et
which gives an explicit formula for $u$ at each
new time level:

!bt
\begin{equation}
u^{n+1} = (2mu^n + (\frac{b}{2}\Delta t - m)u^{n-1} +
\Delta t^2(F^n - s(u^n)))(m + \frac{b}{2}\Delta t)^{-1}
label{vib:ode2:step4}
\tp
\end{equation}
!et

For the first time step we need to discretize $u^{\prime}(0)=V$
as $[D_{2t}u = V]^0$ and combine
with (ref{vib:ode2:step4}) for $n=0$. The discretized initial condition
leads to

!bt
\begin{equation}
u^{-1} = u^{1} - 2\Delta t V,
label{vib:ode2:ic:du}
\end{equation}
!et
which inserted in (ref{vib:ode2:step4}) for $n=0$ gives an equation
that can be solved for
$u^1$:

!bt
\begin{equation}
u^1 = u^0 + \Delta t\, V
+ \frac{\Delta t^2}{2m}(-bV - s(u^0) + F^0)
\tp
label{vib:ode2:step4b}
\end{equation}
!et

===== A centered scheme for quadratic damping =====
label{vib:ode2:fdm:fquad}

When $f(u^{\prime})=bu^{\prime}|u^{\prime}|$, we get a quadratic equation for $u^{n+1}$
in (ref{vib:ode2:step3b}). This equation can be straightforwardly
solved by the well-known formula for the roots of a quadratic equation.
However, we can also avoid the nonlinearity by introducing
an approximation with an error of order no higher than what we
already have from replacing derivatives with finite differences.

idx{geometric mean}
idx{averaging!geometric}

We start with (ref{vib:ode2}) and only replace
$u^{\prime\prime}$ by $D_tD_tu$, resulting in

!bt
\begin{equation}
[mD_tD_t u + bu^{\prime}|u^{\prime}| + s(u) = F]^n\tp
label{vib:ode2:quad:idea1}
\end{equation}
!et
Here, $u^{\prime}|u^{\prime}|$ is to be computed at time $t_n$. The idea
is now to introduce
a *geometric mean*, defined by

!bt
\[ (w^2)^n \approx w^{n-\half}w^{n+\half},\]
!et
for some quantity $w$ depending on time. The error in the geometric mean
approximation is $\Oof{\Delta t^2}$, the same as in the
approximation $u^{\prime\prime}\approx D_tD_tu$. With $w=u^{\prime}$ it follows
that

!bt
\[ [u^{\prime}|u^{\prime}|]^n \approx u^{\prime}(t_{n+\half})|u^{\prime}(t_{n-\half})|\tp\]
!et
The next step is to approximate
$u^{\prime}$ at $t_{n\pm 1/2}$, and fortunately a centered difference
fits perfectly into the formulas since it involves $u$ values at
the mesh points only. With the approximations


!bt
\begin{equation}
u^{\prime}(t_{n+1/2})\approx [D_t u]^{n+\half},\quad u^{\prime}(t_{n-1/2})\approx [D_t u]^{n-\half},
label{vib:ode2:quad:idea2}
\end{equation}
!et
we get

!bt
\begin{equation}
[u^{\prime}|u^{\prime}|]^n
\approx [D_tu]^{n+\half}|[D_tu]^{n-\half}| = \frac{u^{n+1}-u^n}{\Delta t}
\frac{|u^n-u^{n-1}|}{\Delta t}
\tp
\end{equation}
!et
The counterpart to (ref{vib:ode2:step3b}) is then

!bt
\begin{equation}
m\frac{u^{n+1}-2u^n + u^{n-1}}{\Delta t^2}
+ b\frac{u^{n+1}-u^n}{\Delta t}\frac{|u^n-u^{n-1}|}{\Delta t}
+ s(u^n) = F^n,
label{vib:ode2:step3b:quad}
\end{equation}
!et
which is linear in the unknown $u^{n+1}$. Therefore, we can easily solve
(ref{vib:ode2:step3b:quad})
with respect to $u^{n+1}$ and achieve the explicit updating formula

!bt
\begin{align}
u^{n+1} &=  \left( m + b|u^n-u^{n-1}|\right)^{-1}\times \nonumber\\
& \qquad \left(2m u^n - mu^{n-1} + bu^n|u^n-u^{n-1}| + \Delta t^2 (F^n - s(u^n))
\right)
\tp
label{vib:ode2:step4:quad}
\end{align}
!et

# Make exercise to solve complicated u^1 equation with Bisection/Newton

In the derivation of a special equation for the first
time step we run into some trouble: inserting (ref{vib:ode2:ic:du})
in (ref{vib:ode2:step4:quad}) for $n=0$ results in a complicated nonlinear
equation for $u^1$. By thinking differently about the problem we can
easily get away with the nonlinearity again. We have for $n=0$ that
$b[u^{\prime}|u^{\prime}|]^0 = bV|V|$. Using this value in (ref{vib:ode2:quad:idea1})
gives

!bt
\begin{equation}
[mD_tD_t u + bV|V| + s(u) = F]^0
\tp
\end{equation}
!et
Writing this equation out and using (ref{vib:ode2:ic:du}) results in the
special equation for the first time step:

!bt
\begin{equation}
u^1 = u^0 + \Delta t V + \frac{\Delta t^2}{2m}\left(-bV|V| - s(u^0) + F^0\right)
\tp
label{vib:ode2:step4b:quad}
\end{equation}
!et

===== A forward-backward discretization of the quadratic damping term =====

The previous section first proposed to discretize the quadratic
damping term $|u^{\prime}|u^{\prime}$ using centered differences:
$[|D_{2t}|D_{2t}u]^n$. As this gives rise to a nonlinearity in
$u^{n+1}$, it was instead proposed to use a geometric mean combined
with centered differences.  But there are other alternatives. To get
rid of the nonlinearity in $[|D_{2t}|D_{2t}u]^n$, one can think
differently: apply a backward difference to $|u^{\prime}|$, such that
the term involves known values, and apply a forward difference to
$u^{\prime}$ to make the term linear in the unknown $u^{n+1}$. With
mathematics,

!bt
\begin{equation}
[\beta |u^{\prime}|u^{\prime}]^n \approx \beta |[D_t^-u]^n|[D_t^+ u]^n =
\beta\left\vert\frac{u^n-u^{n-1}}{\Delta t}\right\vert
\frac{u^{n+1}-u^n}{\Delta t}\tp
label{vib:ode2:nonlin:fbdiff}
\end{equation}
!et
The forward and backward differences both have an error proportional
to $\Delta t$ so one may think the discretization above leads to
a first-order scheme.
However, by looking at the formulas, we realize that the forward-backward
differences in (ref{vib:ode2:nonlin:fbdiff})
result in exactly the same scheme as in
(ref{vib:ode2:step3b:quad}) where we
used a geometric mean and centered differences and committed errors
of size $\Oof{\Delta t^2}$. Therefore, the forward-backward
differences in (ref{vib:ode2:nonlin:fbdiff})
act in a symmetric way and actually produce a second-order
accurate discretization of the quadratic damping term.


===== Implementation =====
label{vib:ode2:solver}

idx{`vib.py`}

The algorithm arising from the methods in Sections ref{vib:ode2:fdm:flin}
and ref{vib:ode2:fdm:fquad} is very similar to the undamped case in
Section ref{vib:ode1:fdm}. The difference is
basically a question of different formulas for $u^1$ and
$u^{n+1}$. This is actually quite remarkable. The equation
(ref{vib:ode2}) is normally impossible to solve by pen and paper, but
possible for some special choices of $F$, $s$, and $f$. On the
contrary, the complexity of the
nonlinear generalized model (ref{vib:ode2}) versus the
simple undamped model is not a big deal when we solve the
problem numerically!

The computational algorithm takes the form

  o $u^0=I$
  o compute $u^1$ from (ref{vib:ode2:step4b}) if linear
    damping or (ref{vib:ode2:step4b:quad}) if quadratic damping
  o for $n=1,2,\ldots,N_t-1$:
    o compute $u^{n+1}$ from (ref{vib:ode2:step4}) if linear
      damping or (ref{vib:ode2:step4:quad}) if quadratic damping

Modifying the `solver` function for the undamped case is fairly
easy, the big difference being many more terms and if tests on
the type of damping:

@@@CODE src-vib/vib.py fromto: def solver@def visualize
The complete code resides in the file "`vib.py`": "${src_vib}/vib.py".

===== Verification =====
label{vib:ode2:verify}

=== Constant solution ===

For debugging and initial verification, a constant solution is often
very useful. We choose $\uex(t)=I$, which implies $V=0$.
Inserted in the ODE, we get
$F(t)=s(I)$ for any choice of $f$. Since the discrete derivative
of a constant vanishes (in particular, $[D_{2t}I]^n=0$,
$[D_tI]^n=0$, and $[D_tD_t I]^n=0$), the constant solution also fulfills
the discrete equations. The constant should therefore be reproduced
to machine precision. The function `test_constant` in `vib.py`
implements this test.

=== Linear solution ===

Now we choose a linear solution: $\uex = ct + d$. The initial condition
$u(0)=I$ implies $d=I$, and $u^{\prime}(0)=V$ forces $c$ to be $V$.
Inserting $\uex=Vt+I$ in the ODE with linear damping results in

!bt
\[ 0 + bV + s(Vt+I) = F(t),\]
!et
while quadratic damping requires the source term

!bt
\[ 0 + b|V|V + s(Vt+I) = F(t)\tp\]
!et
Since the finite difference approximations used to compute $u^{\prime}$ all
are exact for a linear function, it turns out that the linear $\uex$
is also a solution of the discrete equations.
Exercise ref{vib:exer:verify:gen:linear} asks you to carry out
all the details.

=== Quadratic solution ===

Choosing $\uex = bt^2 + Vt + I$, with $b$ arbitrary,
fulfills the initial conditions and
fits the ODE if $F$ is adjusted properly. The solution also solves
the discrete equations with linear damping. However, this quadratic
polynomial in $t$ does not fulfill the discrete equations in case
of quadratic damping, because the geometric mean used in the approximation
of this term introduces an error.
Doing Exercise ref{vib:exer:verify:gen:linear} will reveal
the details. One can fit $F^n$ in the discrete equations such that
the quadratic polynomial is reproduced by the numerical method (to
machine precision).

=== Catching bugs ===

How good are the constant and quadratic solutions at catching
bugs in the implementation? Let us check that by introducing some bugs.

 * Use `m` instead of `2*m` in the denominator of `u[1]`: code works for constant
   solution, but fails (as it should) for a quadratic one.
 * Use `b*dt` instead of `b*dt/2` in the updating formula for `u[n+1]`
   in case of linear damping: constant and quadratic both fail.
 * Use `F[n+1]` instead of `F[n]` in case of linear or quadratic damping:
   constant solution works, quadratic fails.

We realize that the constant solution is very useful for catching certain bugs because
of its simplicity (easy to predict what the different terms in the
formula should evaluate to), while the quadratic solution seems
capable of detecting all (?) other kinds of typos in the scheme.
These results demonstrate why we focus so much on exact, simple polynomial
solutions of the numerical schemes in these writings.

# More: classes, cases with pendulum approx u vs sin(u),
# making UI via parampool

===== Visualization =====
label{vib:ode2:viz}

The functions for visualizations differ significantly from
those in the undamped case in the `vib_undamped.py` program because,
in the present general case, we do not have an exact solution to
include in the plots. Moreover, we have no good estimate of
the periods of the oscillations as there will be one period
determined by the system parameters, essentially the
approximate frequency $\sqrt{s'(0)/m}$ for linear $s$ and small damping,
and one period dictated by $F(t)$ in case the excitation is periodic.
This is, however,
nothing that the program can depend on or make use of.
Therefore, the user has to specify $T$ and the window width
to get a plot that moves with the graph and shows
the most recent parts of it in long time simulations.

The `vib.py` code
contains several functions for analyzing the time series signal
and for visualizing the solutions.

===== User interface =====
label{vib:ode2:ui}

idx{`ArgumentParser` (Python class)}
idx{`argparse` (Python module)}

The `main` function is changed substantially from
the `vib_undamped.py` code, since we need to
specify the new data $c$, $s(u)$, and $F(t)$.  In addition, we must
set $T$ and the plot window width (instead of the number of periods we
want to simulate as in `vib_undamped.py`). To figure out whether we
can use one plot for the whole time series or if we should follow the
most recent part of $u$, we can use the `plot_empricial_freq_and_amplitude`
function's estimate of the number of local maxima. This number is now
returned from the function and used in `main` to decide on the
visualization technique.

!bc pycod
def main():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--I', type=float, default=1.0)
    parser.add_argument('--V', type=float, default=0.0)
    parser.add_argument('--m', type=float, default=1.0)
    parser.add_argument('--c', type=float, default=0.0)
    parser.add_argument('--s', type=str, default='u')
    parser.add_argument('--F', type=str, default='0')
    parser.add_argument('--dt', type=float, default=0.05)
    parser.add_argument('--T', type=float, default=140)
    parser.add_argument('--damping', type=str, default='linear')
    parser.add_argument('--window_width', type=float, default=30)
    parser.add_argument('--savefig', action='store_true')
    a = parser.parse_args()
    from scitools.std import StringFunction
    s = StringFunction(a.s, independent_variable='u')
    F = StringFunction(a.F, independent_variable='t')
    I, V, m, c, dt, T, window_width, savefig, damping = \
       a.I, a.V, a.m, a.c, a.dt, a.T, a.window_width, a.savefig, \
       a.damping

    u, t = solver(I, V, m, c, s, F, dt, T)
    num_periods = empirical_freq_and_amplitude(u, t)
    if num_periods <= 15:
        figure()
        visualize(u, t)
    else:
        visualize_front(u, t, window_width, savefig)
    show()
!ec
The program `vib.py` contains
the above code snippets and can solve the model problem
(ref{vib:ode2}). As a demo of `vib.py`, we consider the case
$I=1$, $V=0$, $m=1$, $c=0.03$, $s(u)=\sin(u)$, $F(t)=3\cos(4t)$,
$\Delta t = 0.05$, and $T=140$. The relevant command to run is

!bc sys
Terminal> python vib.py --s 'sin(u)' --F '3*cos(4*t)' --c 0.03
!ec
This results in a "moving window following the function":
"${doc_notes}/mov-vib/vib_generalized_dt0.05/index.html" on the screen.
Figure ref{vib:ode2:fig:demo} shows a part of the time series.

FIGURE: [fig-vib/vib_gen_demo, width=600 frac=1.0] Damped oscillator excited by a sinusoidal function. label{vib:ode2:fig:demo}

===== The Euler-Cromer scheme for the generalized model =====
label{vib:ode2:EulerCromer}

The ideas of the Euler-Cromer method from Section ref{vib:model2x2:EulerCromer}
carry over to the generalized model. We write (ref{vib:ode2})
as two equations for $u$ and $v=u^{\prime}$. The first equation is taken as the
one with $v^{\prime}$ on the left-hand side:

!bt
\begin{align}
v^{\prime} &= \frac{1}{m}(F(t)-s(u)-f(v)),
label{vib:ode2:EulerCromer:veq}\\
u^{\prime} &= v\tp
label{vib:ode2:EulerCromer:ueq}
\end{align}
!et
Again, the idea is to step (ref{vib:ode2:EulerCromer:veq}) forward using
a standard Forward Euler method, while we update $u$ from
(ref{vib:ode2:EulerCromer:ueq}) with a Backward Euler method,
utilizing the recent, computed $v^{n+1}$ value. In detail,

!bt
\begin{align}
\frac{v^{n+1}-v^n}{\Delta t} &= \frac{1}{m}(F(t_n)-s(u^n)-f(v^n)),
label{vib:ode2:EulerCromer:dveq0a}\\
\frac{u^{n+1}-u^n}{\Delta t} &= v^{n+1},
label{vib:ode2:EulerCromer:dueq0a}
\end{align}
!et
resulting in the explicit scheme

!bt
\begin{align}
v^{n+1} &= v^n + \Delta t\frac{1}{m}(F(t_n)-s(u^n)-f(v^n)),
label{vib:ode2:EulerCromer:dveq}\\
u^{n+1} &= u^n + \Delta t\,v^{n+1}\tp
label{vib:ode2:EulerCromer:dueq0}
\end{align}
!et
We immediately note one very favorable feature of this scheme: all the
nonlinearities in $s(u)$ and $f(v)$ are evaluated at a previous time
level. This makes the Euler-Cromer method easier to apply and
hence much more convenient than the centered scheme for the second-order
ODE (ref{vib:ode2}).

The initial conditions are trivially set as

!bt
\begin{align}
v^0 &= V,\\
u^0 &= I\tp
\end{align}
!et

[hpl: odespy for the generalized problem]

# Discussion of which method is best:
# http://gamedev.stackexchange.com/questions/33694/pros-and-cons-of-different-integrators

# #if FORMAT in ("pdflatex", "latex")
===== The St\"{o}rmer-Verlet algorithm for the generalized model =====
# #else
===== The Stoermer-Verlet algorithm for the generalized model =====
# #endif
label{vib:model2x2:gen:StormerVerlet}

We can easily apply the ideas from Section ref{vib:model2x2:StormerVerlet} to
extend that method to the generalized model

!bt
\begin{align*}
v^{\prime} &= \frac{1}{m}(F(t)-s(u)-f(v)),\\
u^{\prime} &= v\tp
\end{align*}
!et
However, since the scheme is essentially centered differences for
the ODE system on a staggered mesh, we do not go into detail here,
but refer to Section ref{vib:ode2:staggered}.

===== A staggered Euler-Cromer scheme for a generalized model =====
label{vib:ode2:staggered}

The more general model for vibration problems,

!bt
\begin{equation}
mu'' + f(u') + s(u) = F(t),\quad u(0)=I,\ u'(0)=V,\ t\in (0,T],
\end{equation}
!et
can be rewritten as a first-order ODE system

!bt
\begin{align}
v' &= m^{-1}\left(F(t) - f(v) - s(u)\right),
label{vib:ode2:staggered:veq}\\
u' &= v\tp
label{vib:ode2:staggered:ueq}
\end{align}
!et
It is natural to introduce a staggered mesh (see Section ref{vib:model2x2:staggered}) and seek $u$ at mesh points $t_n$ (the numerical value is
denoted by $u^n$) and $v$ between mesh points at $t_{n+1/2}$ (the numerical
value is denoted by $v^{n+\half}$).
A centered difference approximation to (ref{vib:ode2:staggered:ueq})-(ref{vib:ode2:staggered:veq}) can then be written in operator notation as

!bt
\begin{align}
\lbrack D_tv &= m^{-1}\left(F(t) - f(v) - s(u)\right)\rbrack^n,
label{vib:ode2:staggered:dveq}\\
\lbrack D_t u &= v\rbrack^{n+\half}\tp
label{vib:ode2:staggered:dueq}
\end{align}
!et
Written out,

!bt
\begin{align}
\frac{v^{n+\half} - v^{n-\half}}{\Delta t}
&= m^{-1}\left(F^n - f(v^n) - s(u^n)\right),
label{vib:ode2:staggered:dveq2}\\
\frac{u^n - u^{n-1}}{\Delta t} &= v^{n+\half}\tp
label{vib:ode2:staggered:dueq2}
\end{align}
!et

With linear damping, $f(v)=bv$, we can use an arithmetic mean
for $f(v^n)$: $f(v^n)\approx = \half(f(v^{n-\half}) +
f(v^{n+\half}))$. The system
(ref{vib:ode2:staggered:dveq2})-(ref{vib:ode2:staggered:dueq2})
can then be solved with respect to the unknowns $u^n$ and $v^{n+\half}$:

!bt
\begin{align}
v^{n+\half} &= \left(1 + \frac{b}{2m}\Delta t\right)^{-1}\left(
v^{n-\half} + {\Delta t}
m^{-1}\left(F^n - {\half}f(v^{n-\half}) - s(u^n)\right)\right),
label{vib:ode2:staggered:v:scheme:lin}\\
u^n & = u^{n-1} + {\Delta t}v^{n-\half}\tp
label{vib:ode2:staggered:u:scheme:lin}
\end{align}
!et

In case of quadratic damping, $f(v)=b|v|v$, we can use a geometric mean:
$f(v^n)\approx b|v^{n-\half}|v^{n+\half}$. Inserting this approximation
in (ref{vib:ode2:staggered:dveq2})-(ref{vib:ode2:staggered:dueq2}) and
solving for the unknowns $u^n$ and $v^{n+\half}$ results in

!bt
\begin{align}
v^{n+\half} &= (1 + \frac{b}{m}|v^{n-\half}|\Delta t)^{-1}\left(
v^{n-\half} + {\Delta t}
m^{-1}\left(F^n - s(u^n)\right)\right),
label{vib:ode2:staggered:v:scheme:quad}\\
u^n & = u^{n-1} + {\Delta t}v^{n-\half}\tp
label{vib:ode2:staggered:u:scheme:quad}
\end{align}
!et

The initial conditions are derived at the end of
Section ref{vib:model2x2:staggered}:

!bt
\begin{align}
u^0 &= I,
label{vib:ode2:staggered:u02}\\
v^\half &= V - \half\Delta t\omega^2I
label{vib:ode2:staggered:v02}\tp
\end{align}
!et

[hpl: Must deal with two things: how to set initial conditions on $v$, and
how to make phase-space plots with $v$ at integer mesh points. See
article.]

===== The PEFRL 4th-order accurate algorithm =====
label{vib:ode2:PEFRL}

A variant of the Euler-Cromer type of algorithm, which provides an
error $\Oof{\Delta t^4}$ if $f(v)=0$, is called PEFRL
cite{PEFRL_2002}. This algorithm is very well suited for integrating
dynamic systems (especially those without damping) over very long time
periods. Define

!bt
\[ g(u,v) = \frac{1}{m}(F(t)-s(u)-f(v))\tp\]
!et
The algorithm is explicit and features these steps:

!bt
\begin{align}
u^{n+1,1} &= u^n       + \xi\Delta t v^n,\\
v^{n+1,1} &= v^n       + \half(1-2\lambda)\Delta t g(u^{n+1,1},v^n),\\
u^{n+1,2} &= u^{n+1,1} + \chi\Delta t v^{n+1,1},\\
v^{n+1,2} &= v^{n+1,1} + \lambda\Delta t g(u^{n+1,2}, v^{n+1,1}),\\
u^{n+1,3} &= u^{n+1,2} + (1-2(\chi + \xi))\Delta t v^{n+1,2},\\
v^{n+1,3} &= v^{n+1,2} + \lambda\Delta t g(u^{n+1,3}, v^{n+1,2}),\\
u^{n+1,4} &= u^{n+1,3} + \chi\Delta t v^{n+1,3},\\
v^{n+1}   &= v^{n+1,3} + \half(1-2\lambda)\Delta t g(u^{n+1,4},v^{n+1,3}),\\
u^{n+1}   &= u^{n+1,4} + \xi\Delta t v^{n+1}
\end{align}
!et
# Compare with eq 22 in article
The parameters $\xi$, $\lambda$, and $\xi$ have the values

!bt
\begin{align}
\xi &= 0.1786178958448091,\\
\lambda &= -0.2123418310626054,\\
\chi &= -0.06626458266981849
\end{align}
!et

======= Exercises and Problems =======

===== Exercise: Implement the solver via classes =====
label{vib:exer:gen:class}
file=vib_class

Reimplement the `vib.py` program using a class `Problem` to hold all
the physical parameters of the problem, a class `Solver` to hold the
numerical parameters and compute the solution, and a class
`Visualizer` to display the solution.

!bhint
Use the ideas and examples ref[from Section ref{decay:prog:se:class}
and ref{decay:prog:se:class2}][ in cite{Langtangen_decay}][for an "ODE
model":
"${decay_book}/._book009.html#classes-for-problem-and-solution-method"
in cite{Langtangen_decay}].  More specifically, make a superclass
`Problem` for holding the scalar physical parameters of a problem and
let subclasses implement the $s(u)$ and $F(t)$ functions as methods.
Try to call up as much existing functionality in `vib.py` as possible.
!ehint

!bsol
The complete code looks like this.

@@@CODE exer-vib/vib_class.py

!esol


===== Problem: Use a backward difference for the damping term =====
label{vib:exer:quad:damping:bw}
file=vib_gen_bwdamping

As an alternative to discretizing the damping terms $\beta u^{\prime}$ and
$\beta |u^{\prime}|u^{\prime}$ by centered differences, we may apply
backward differences:

!bt
\begin{align*}
[u^{\prime}]^n &\approx [D_t^-u]^n,\\
& [|u^{\prime}|u^{\prime}]^n\\
&\approx [|D_t^-u|D_t^-u]^n\\
&= |[D_t^-u]^n|[D_t^-u]^n\tp
\end{align*}
!et
The advantage of the backward difference is that the damping term is
evaluated using known values $u^n$ and $u^{n-1}$ only.
Extend the "`vib.py`": "${src_vib}/vib.py" code with a scheme based
on using backward differences in the damping terms. Add statements
to compare the original approach with centered difference and the
new idea launched in this exercise. Perform numerical experiments
to investigate how much accuracy that is lost by using the backward
differences.


!bsol
The new discretization approach of the linear and quadratic damping
terms calls for new derivations of the updating formulas (for $u$) in
the solver. Since backward difference approximations will be used for
the damping term, we may also use this approximation for the initial
condition on $u^{\prime}(0)$ without deteriorating the convergence
rate any further. Note that introducing backward difference
approximations for the damping term make our computational schemes
first order, as opposed to the original second order schemes which
used central difference approximations also for the damping terms. The
motivation for also using a backward difference approximation for the
initial condition on $u^{\prime}(0)$, is simply that the computational
schemes get much simpler.

With linear damping, the new discretized form of the equation reads

!bt
\begin{equation}
m\frac{u^{n+1}-2u^n+u^{n-1}}{\Delta t^2} + b\frac{u^n - u^{n-1}}{\Delta t} + s(u^n) = F^n,
\nonumber
\end{equation}
!et
which gives us

!bt
\begin{equation}
u^{n+1} = \left(2-\frac{\Delta t b}{m}\right)u^n + \frac{\Delta t^2}{m}\left(F^n - s(u^n)\right) + \left(\frac{\Delta t b}{m} - 1\right)u^{n-1}.
\nonumber
\end{equation}
!et
With $n=0$, the updating formula becomes

!bt
\begin{equation}
u^1 = \left(2-\frac{\Delta t b}{m}\right)u^0 + \frac{\Delta t^2}{m}\left(F^0 - s(u^0)\right) + \left(\frac{\Delta t b}{m} - 1\right)u^{-1},
\nonumber
\end{equation}
!et
which requires some further elaboration because of the unknown $u^{-1}$. We handle this by discretizing the initial condition $u^{\prime}(0) = V$ by a backward difference approximation as

!bt
\begin{equation}
\frac{u^0 - u^{-1}}{\Delta t} = V,
\nonumber
\end{equation}
!et
which implies that

!bt
\begin{equation}
u^{-1} = u^0 - \Delta t V.
\nonumber
\end{equation}
!et
Inserting this expression for $u^{-1}$ in the updating formula for $u^{n+1}$, and simplifying,
gives us the following special formula for the first time step:

!bt
\begin{equation}
u^1 = u^0 + \Delta t V + \frac{\Delta t^2}{m}\left(-bV - s(u^0) + F^0\right).
\nonumber
\end{equation}
!et
Switching to quadratic damping, the new discretized form of the equations becomes

!bt
\begin{equation}
m\frac{u^{n+1}-2u^n+u^{n-1}}{\Delta t^2} + b|\frac{u^n - u^{n-1}}{\Delta t}|\frac{u^n - u^{n-1}}{\Delta t} + s(u^n) = F^n,
\nonumber
\end{equation}
!et
which leads to

!bt
\begin{equation}
u^{n+1} = 2u^n - u^{n-1} - \frac{b}{m}|u^n - u^{n-1}|(u^n - u^{n-1}) + \frac{\Delta t^2}{m}\left(F^n - s(u^n)\right).
\nonumber
\end{equation}
!et
With $n=0$, this updating formula becomes

!bt
\begin{equation}
u^1 = 2u^0 - u^{-1} - \frac{b}{m}|u^0 - u^{-1}|(u^0 - u^{-1}) + \frac{\Delta t^2}{m}\left(F^0 - s(u^0)\right).
\nonumber
\end{equation}
!et
Again, we handle the unknown $u^{-1}$ via the same expression as above, which be derived from a backward difference approximation to the initial condition on the derivative. Inserting this expression for $u^{-1}$ and simplifying, gives the special updating formula for $u^1$ as

!bt
\begin{equation}
u^1 = u^0 + \Delta t V + \frac{\Delta t^2}{m}\left(-b|V|V - s(u^0) + F^0\right).
\nonumber
\end{equation}
!et
We implement these new computational schemes in a new solver function
`solver_bwdamping`, so that the discrete solution for $u$ can be found
by both the original and the new solver. The difference between the
two different solutions is then visualized in the same way as the
original solution in `main`.

The convergence rates computed in `test_mms` demonstrates that our
scheme now is a first order scheme, as $r$ is seen to approach 1.0
with decreasing $\Delta t$.

Both solvers reproduce a constant solution exactly (within machine
precision), whereas sinusoidal and quadratic solutions differ, as
should be expected after comparing the schemes. Pointing out the
``best'' approach is difficult: the backward differences yield a much
simpler mathematical problem to be solved, while the more complicated
method converges faster and gives more accuracy for the same cost. On
the other hand, the backward differences can yield any reasonable
accuracy by lowering $\Delta t$, and the results are obtained within a
few seconds on a laptop.

Here is the complete computer code, arising from copying `vib.py` and changing
the functions that have to be changed:

@@@CODE exer-vib/vib_gen_bwdamping.py

Here is a comparison of standard method (2nd order) and backward differences for damping (1st order) for 10 (left) and 40 (right) time steps per period:

FIGURE: [fig-vib/vib_gen_bwdamping, width=800 frac=1]

!esol


===== Exercise: Use the forward-backward scheme with quadratic damping =====
label{vib:exer:quad:damping:fwbw}
file=vib_gen_bwdamping

We consider the generalized model with quadratic damping, expressed
as a system of two first-order equations as in Section ref{vib:ode2:staggered}:

!bt
\begin{align*}
u^{\prime} &= v,\\
v' &= \frac{1}{m}\left( F(t) - \beta |v|v - s(u)\right)\tp
\end{align*}
!et
However, contrary to what is done in Section ref{vib:ode2:staggered},
we want to apply the idea of a forward-backward discretization:
$u$ is marched forward by a one-sided Forward Euler scheme applied
to the first equation, and
thereafter $v$ can be marched forward by a Backward Euler scheme in the
second
% if BOOK == "book":
equation, see in Section ref{vib:model2x2:EulerCromer}.
% else:
equation.
% endif
Express the idea in operator notation and write out the
scheme. Unfortunately, the backward difference for the $v$ equation
creates a nonlinearity $|v^{n+1}|v^{n+1}$.  To linearize this
nonlinearity, use the known value $v^n$ inside the absolute value
factor, i.e., $|v^{n+1}|v^{n+1}\approx |v^n|v^{n+1}$.  Show that the
resulting scheme is equivalent to the one in Section
ref{vib:ode2:staggered} for some time level $n\geq 1$.

What we learn from this exercise is that the first-order differences
and the linearization trick play together in ``the right way'' such that
the scheme is as good as when we (in Section ref{vib:ode2:staggered})
carefully apply centered differences and a geometric mean on a
staggered mesh to achieve second-order accuracy.
% if BOOK == "book":
There is a
difference in the handling of the initial conditions, though, as
explained at the end of Section ref{vib:model2x2:EulerCromer}.
% endif
