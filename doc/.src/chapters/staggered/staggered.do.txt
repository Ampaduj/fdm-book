======= Ordinary differential equations =======

===== The Euler-Cromer scheme on a standard mesh =====

Consider the fundamental model problem for simple harmonic oscillations,

!bt
\begin{equation}
u'' + \omega^2u = 0,\quad u(0)=I,\ u'(0)=0,
label{stag:vib:ODE2nd}
\end{equation}
!et
where $\omega$ is the frequency of the oscillations (the exact solution
is $u(t)=I\cos\omega t$). This model can equivalently be
formulated as two first-order equations,

!bt
\begin{align}
v' &= -\omega^2 u,
label{stag:vib:EulerCromer:veq} \\
u' &= v\tp
label{stag:vib:EulerCromer:ueq}
\end{align}
!et
The popular Euler-Cromer scheme for this $2\times 2$ system of ODEs
applies an explicit
forward difference in (ref{stag:vib:EulerCromer:veq}) and a
backward difference in (ref{stag:vib:EulerCromer:ueq}):

!bt
\begin{align}
\frac{v^{n+1}- v^n}{\Delta t} &=- \omega^2u^{n},
label{stag:vib:EulerCromer:dveq0}\\
\frac{u^{n+1} - u^n}{\Delta t} &= v^{n+1}\tp
label{stag:vib:EulerCromer:dueq0}
\end{align}
!et
For a time domain $[0,T]$, we have introduced a mesh with points
$0=t_0 < t_1 < \cdots < t_n=T$. The most common case is a mesh with
uniform spacing $\Delta t$: $t_n=n\Delta t$. Then
$v^n$ is an approximation to $v(t)$ at mesh point $t_n$, and
$u^n$ is an approximation to $u(t)$ at the same point.
Note that the backward difference in (ref{stag:vib:EulerCromer:dueq})
leads to an explicit updating formula for $u^{n+1}$
since $v^{n+1}$ is already computed:

!bt
\begin{align}
v^{n+1} &= v^n -\Delta t \omega^2u^{n},
label{stag:vib:EulerCromer:dveq}\\
u^{n+1} &= u^n + \Delta t v^{n+1}\tp
label{stag:vib:EulerCromer:dueq}
\end{align}
!et


The Euler-Cromer scheme is equivalent with the standard second-order
accurate scheme for (ref{stag:vib:ODE2nd}):

!bt
\begin{equation}
u^{n+1} = 2u^n - u^{n-1} - \Delta t^2\omega^2 u^n,\ n=1,2,\ldots,
label{stag:vib:dODE2nd}
\end{equation}
!et
but for the first time step, the method for (ref{stag:vib:ODE2nd})
leads to

!bt
\begin{equation}
u^1= u^0 - \frac{1}{2}\Delta t^2\omega^2u^0,
\end{equation}
!et
while Euler-Cromer gives

!bt
\begin{equation}
u^1= u^0 - \Delta t^2\omega^2u^0,
\end{equation}
!et
which can be interpreted as a first-order, backward difference approximation
of $u'(0)=0$ combined with (ref{stag:vib:dODE2nd}). At later time steps,
however, the alternating use of forward and backward differences in
(ref{stag:vib:EulerCromer:dveq})-(ref{stag:vib:EulerCromer:dueq})
leads to a method with error $\Oof{\Delta t^2}$.



===== The Euler-Cromer scheme on a staggered mesh =====
label{vib:model2x2:staggered}

idx{staggered mesh}
idx{staggered Euler-Cromer scheme}
idx{alternating mesh}

[hpl: Do the equations in different sequence, first vel, then pos.]

The fact that the forward and backward differences used in the Euler-Cromer
method yield a second-order accurate method, is not obvious from intuition.
A much more intuitive discretization employs solely centered differences
and leads to a scheme that is equivalent to the Euler-Cromer scheme.
It is in fact fully equivalent to the second-order scheme for
(ref{stag:vib:ODE2nd}), also for the first time step.
This alternative scheme is based on using a *staggered* (or
alternating) mesh in time.

In a staggered mesh, the unknowns are sought at different points in
the mesh. Specifically, $u$ is sought at
integer time points $t_n$ and $v$ is sought at $t_{n+1/2}$
*between* two $u$ points.
The unknowns are then $u^1, v^{3/2}, u^2, v^{5/2}$, and so on.
We typically use the notation
$u^n$ and $v^{n+\half}$ for the two unknown mesh functions.
Figure ref{staggered:EC:fig1} presents a graphical sketch of two
mesh functions $u$ and $v$ on a staggered mesh.

FIGURE: [fig-staggered/staggered_time, width=500 frac=0.8] Examples on mesh functions on a staggered mesh in time. label{staggered:EC:fig1}


On a staggered mesh it is natural to
use centered difference approximations, expressed
in operator notation as
!bt
\begin{align}
\lbrack D_t u &= v\rbrack^{n+\half},\\
\lbrack D_t v &= -\omega u\rbrack^{n+1}
\tp
\end{align}
!et
Writing out the formulas gives

!bt
\begin{align}
u^{n+1} &= u^{n} + \Delta t v^{n+\half},
label{vib:model2x2:EulerCromer:ueq1s}\\
v^{n+\frac{3}{2}} &= v^{n+\half} -\Delta t \omega^2u^{n+1}
label{vib:model2x2:EulerCromer:veq1s}
\tp
\end{align}
!et
Of esthetic reasons one often writes these equations at the
previous time level to replace the $\frac{3}{2}$ by $\half $ in the
left-most term in the last equation,

!bt
\begin{align}
u^{n} &= u^{n-1} + \Delta t v^{n-\half},
label{vib:model2x2:EulerCromer:ueq1s2}\\
v^{n+\half} &= v^{n-\half} -\Delta t \omega^2u^{n}
label{vib:model2x2:EulerCromer:veq1s2}
\tp
\end{align}
!et
Such a rewrite is only mathematical cosmetics. The important thing
is that this centered scheme has exactly the same computational
structure as the forward-backward scheme. We shall use the names
*forward-backward Euler-Cromer* and *staggered Euler-Cromer*
to distinguish the two schemes.

We can eliminate the $v$
values and get back the centered scheme based on the second-order
differential equation, so all these three schemes are equivalent.
However, they differ somewhat in the treatment of the initial
conditions.

Suppose we have $u(0)=I$ and $u'(0)=v(0)=0$ as mathematical
initial conditions. This means $u^0=I$ and

!bt
\[ v(0)\approx \half(v^{-\half} + v^{\half}) = 0,
\quad\Rightarrow\quad v^{-\half} =- v^\half\tp\]
!et
Using the discretized equation (ref{vib:model2x2:EulerCromer:veq1s2}) for
$n=0$ yields

!bt
\[ v^\half = v^{-\half} -\Delta t\omega^2 I,\]
!et
and eliminating $v^{-\half} =- v^{\half}$
results in $v^\half = -\half\Delta t\omega^2I$ and

!bt
\[ u^1 = u^0 - \half\Delta t^2\omega^2 I,\]
!et
which is exactly the same equation for $u^1$ as we had in the
centered scheme based on the second-order differential equation
(and hence corresponds to a centered difference approximation of
the initial condition for $u'(0)$).
The conclusion is that a staggered mesh is fully equivalent with
that scheme, while the forward-backward version gives a slight
deviation in the computation of $u^1$.

We can redo the derivation of the initial conditions when $u'(0)=V$:

!bt
\[ v(0)\approx \half(v^{-\half} + v^{\half}) = V,
\quad\Rightarrow\quad v^{-\half} = 2V - v^\half\tp\]
!et
Using this $v^{-\half}$ in

!bt
\[ v^\half = v^{-\half} -\Delta t\omega^2 I,\]
!et
then gives $v^\half = V - \half\Delta t\omega^2 I$.
The general initial conditions are therefore

!bt
\begin{align}
u^0 &= I,
label{vib:ode2:staggered:u0}\\
v^\half &= V - \half\Delta t\omega^2I
label{vib:ode2:staggered:v0}\tp
\end{align}
!et


===== Implementation of the scheme on a staggered mesh =====

The algorithm goes like this:

 o Set the initial values (ref{vib:ode2:staggered:u0}) and
   (ref{vib:ode2:staggered:v0}).
 o For $n=1,2,\ldots$:
   o Compute $u^{n}$ from (ref{vib:model2x2:EulerCromer:ueq1s2}).
   o Compute $v^{n+\half}$ from (ref{vib:model2x2:EulerCromer:veq1s2}).

=== Implementation with integer indices ===

Translating the schemes (ref{vib:model2x2:EulerCromer:ueq1s2})
and (ref{vib:model2x2:EulerCromer:veq1s2}) to computer code
faces the problem of how to store and access $v^{n+\half}$,
since arrays only allow integer indices with base 0.
We must then introduce a convention: $v^{1+\half}$ is stored
in `v[n]` while $v^{1-\half}$ is stored in `v[n-1]`.
We can then write the algorithm in Python as

!bc pycod
def solver(I, w, dt, T):
    dt = float(dt)
    Nt = int(round(T/dt))
    u = zeros(Nt+1)
    v = zeros(Nt+1)
    t = linspace(0, Nt*dt, Nt+1)  # mesh for u
    t_v = t + dt/2                # mesh for v

    u[0] = I
    v[0] = 0 - 0.5*dt*w**2*u[0]
    for n in range(1, Nt+1):
        u[n] = u[n-1] + dt*v[n-1]
        v[n] = v[n-1] - dt*w**2*u[n]
    return u, t, v, t_v
!ec
Note that $u$ and $v$ are returned together with the mesh points such
that the complete mesh function for $u$ is described by `u` and `t`,
while `v` and `t_v` represent the mesh function for $v$.

=== Implementation with half-integer indices ===

Some prefer to see a closer relationship between the code and
the mathematics for the quantities with half-integer indices.
For example, we would like to replace the updating equation for
`v[n]` by

!bc pycod
v[n+half] = v[n-half] - dt*w**2*u[n]
!ec
This is easy to do if we could be sure that `n+half` means `n` and
`n-half` means `n-1`. A possible solution is to define `half` as a
special object such that an integer plus `half` results in the integer,
while an integer minus `half` equals the integer minus 1.
A simple Python class may realize the `half` object:

!bc pycod
class HalfInt:
    def __radd__(self, other):
        return other

    def __rsub__(self, other):
        return other - 1

half = HalfInt()
!ec
The `__radd__` function is invoked for all expressions `n+half`
("right add" with `self` as `half` and `other` as `n`). Similarly,
the `__rsub__` function is invoked for `n-half` and results in `n-1`.

Using the `half` object, we can implement the algorithms in an even
more readable way:

@@@CODE src-staggered/vib_undamped_staggered.py fromto: def solver\(@def test_staggered

Verification of this code is easy as we can just compare the computed
`u` with the `u` produced by the `solver` function in
`vib_undamped.py` (which solves $u''+\omega^2u=0$ directly).  The
values should coincide to machine precision since the two numerical
methods are mathematically equivalent.  We refer to the file
"`vib_undamped_staggered.py`": "${src_vib}/vib_undamped_staggered.py"
for the details of a unit test (`test_staggered`) that checks this property.

===== A staggered Euler-Cromer scheme for a generalized model =====
label{vib:ode2:staggered}

The more general model for vibration problems,

!bt
\begin{equation}
mu'' + f(u') + s(u) = F(t),\quad u(0)=I,\ u'(0)=V,\ t\in (0,T],
\end{equation}
!et
can be rewritten as a first-order ODE system

!bt
\begin{align}
u' &= v,
label{vib:ode2:staggered:ueq} \\
v' &= m^{-1}\left(F(t) - f(v) - s(u)\right)\tp
label{vib:ode2:staggered:veq}
\end{align}
!et
It is natural to introduce a staggered mesh (see Section ref{vib:model2x2:staggered}) and seek $u$ at mesh points $t_n$ (the numerical value is
denoted by $u^n$) and $v$ between mesh points at $t_{n+1/2}$ (the numerical
value is denoted by $v^{n+\half}$).
A centered difference approximation to (ref{vib:ode2:staggered:ueq})-(ref{vib:ode2:staggered:veq}) can then be written in operator notation as

!bt
\begin{align}
\lbrack D_t u &= v\rbrack^{n-\half},
label{vib:ode2:staggered:dueq} \\
\lbrack D_tv &= m^{-1}\left(F(t) - f(v) - s(u)\right)\rbrack^n\tp
label{vib:ode2:staggered:dveq}
\end{align}
!et
Written out,

!bt
\begin{align}
\frac{u^n - u^{n-1}}{\Delta t} &= v^{n-\half},
label{vib:ode2:staggered:dueq2} \\
\frac{v^{n+\half} - v^{n-\half}}{\Delta t}
&= m^{-1}\left(F^n - f(v^n) - s(u^n)\right)\tp
label{vib:ode2:staggered:dveq2}
\end{align}
!et
With linear damping, $f(v)=bv$, we can use an arithmetic mean
for $f(v^n)$: $f(v^n)\approx = \half(f(v^{n-\half}) +
f(v^{n+\half}))$. The system
(ref{vib:ode2:staggered:dueq2})-(ref{vib:ode2:staggered:dveq2})
can then be solved with respect to the unknowns $u^n$ and $v^{n+\half}$:

!bt
\begin{align}
u^n & = u^{n-1} + {\Delta t}v^{n-\half},
label{vib:ode2:staggered:u:scheme:lin} \\
v^{n+\half} &= \left(1 + \frac{b}{2m}\Delta t\right)^{-1}\left(
v^{n-\half} + {\Delta t}
m^{-1}\left(F^n - {\half}f(v^{n-\half}) - s(u^n)\right)\right)\tp
label{vib:ode2:staggered:v:scheme:lin}
\end{align}
!et

In case of quadratic damping, $f(v)=b|v|v$, we can use a geometric mean:
$f(v^n)\approx b|v^{n-\half}|v^{n+\half}$. Inserting this approximation
in (ref{vib:ode2:staggered:dueq2})-(ref{vib:ode2:staggered:dveq2}) and
solving for the unknowns $u^n$ and $v^{n+\half}$ results in

!bt
\begin{align}
u^n & = u^{n-1} + {\Delta t}v^{n-\half},
label{vib:ode2:staggered:u:scheme:quad} \\
v^{n+\half} &= (1 + \frac{b}{m}|v^{n-\half}|\Delta t)^{-1}\left(
v^{n-\half} + {\Delta t}
m^{-1}\left(F^n - s(u^n)\right)\right)\tp
label{vib:ode2:staggered:v:scheme:quad}
\end{align}
!et

The initial conditions are derived at the end of
Section ref{vib:model2x2:staggered}:

!bt
\begin{align}
u^0 &= I,
label{vib:ode2:staggered:u02}\\
v^\half &= V - \half\Delta t\omega^2I
label{vib:ode2:staggered:v02}\tp
\end{align}
!et

[hpl: Must deal with two things: how to set initial conditions on $v$, and
how to make phase-space plots with $v$ at integer mesh points. See
article.]

======= Exercises =======

===== Exercise: Use the forward-backward scheme with quadratic damping =====
label{vib:exer:quad:damping:fwbw}
file=vib_gen_bwdamping

We consider the generalized model with quadratic damping, expressed
as a system of two first-order equations as in Section ref{vib:ode2:staggered}:

!bt
\begin{align*}
u^{\prime} &= v,\\
v' &= \frac{1}{m}\left( F(t) - \beta |v|v - s(u)\right)\tp
\end{align*}
!et
However, contrary to what is done in Section ref{vib:ode2:staggered},
we want to apply the idea of a forward-backward discretization:
$u$ is marched forward by a one-sided Forward Euler scheme applied
to the first equation, and
thereafter $v$ can be marched forward by a Backward Euler scheme in the
second
% if BOOK == "book":
equation, see in Section ref{vib:model2x2:EulerCromer}.
% else:
equation.
% endif
Express the idea in operator notation and write out the
scheme. Unfortunately, the backward difference for the $v$ equation
creates a nonlinearity $|v^{n+1}|v^{n+1}$.  To linearize this
nonlinearity, use the known value $v^n$ inside the absolute value
factor, i.e., $|v^{n+1}|v^{n+1}\approx |v^n|v^{n+1}$.  Show that the
resulting scheme is equivalent to the one in Section
ref{vib:ode2:staggered} for some time level $n\geq 1$.

What we learn from this exercise is that the first-order differences
and the linearization trick play together in ``the right way'' such that
the scheme is as good as when we (in Section ref{vib:ode2:staggered})
carefully apply centered differences and a geometric mean on a
staggered mesh to achieve second-order accuracy.
% if BOOK == "book":
There is a
difference in the handling of the initial conditions, though, as
explained at the end of Section ref{vib:model2x2:EulerCromer}.
% endif

======= Partial differential equations =======

FIGURE: [fig-staggered/staggered_space, width=500 frac=0.8] Examples on mesh functions on a staggered mesh in space. label{staggered:wave:fig1}
