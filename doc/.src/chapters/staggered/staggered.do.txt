======= Ordinary differential equations =======

===== The Euler-Cromer scheme on a standard mesh =====

Consider the fundamental model problem for simple harmonic oscillations,

!bt
\begin{equation}
u'' + \omega^2u = 0,\quad u(0)=I,\ u'(0)=0,
label{stag:vib:ODE2nd}
\end{equation}
!et
where $\omega$ is the frequency of the oscillations (the exact solution
is $u(t)=I\cos\omega t$). This model can equivalently be
formulated as two first-order equations,

!bt
\begin{align}
v' &= -\omega^2 u,
label{stag:vib:EulerCromer:veq} \\
u' &= v\tp
label{stag:vib:EulerCromer:ueq}
\end{align}
!et
The popular Euler-Cromer scheme for this $2\times 2$ system of ODEs
applies an explicit
forward difference in (ref{stag:vib:EulerCromer:veq}) and a
backward difference in (ref{stag:vib:EulerCromer:ueq}):

!bt
\begin{align}
\frac{v^{n+1}- v^n}{\Delta t} &=- \omega^2u^{n},
label{stag:vib:EulerCromer:dveq0}\\
\frac{u^{n+1} - u^n}{\Delta t} &= v^{n+1}\tp
label{stag:vib:EulerCromer:dueq0}
\end{align}
!et
For a time domain $[0,T]$, we have introduced a mesh with points
$0=t_0 < t_1 < \cdots < t_n=T$. The most common case is a mesh with
uniform spacing $\Delta t$: $t_n=n\Delta t$. Then
$v^n$ is an approximation to $v(t)$ at mesh point $t_n$, and
$u^n$ is an approximation to $u(t)$ at the same point.
Note that the backward difference in (ref{stag:vib:EulerCromer:dueq})
leads to an explicit updating formula for $u^{n+1}$
since $v^{n+1}$ is already computed:

!bt
\begin{align}
v^{n+1} &= v^n -\Delta t \omega^2u^{n},
label{stag:vib:EulerCromer:dveq}\\
u^{n+1} &= u^n + \Delta t v^{n+1}\tp
label{stag:vib:EulerCromer:dueq}
\end{align}
!et


The Euler-Cromer scheme is equivalent with the standard second-order
accurate scheme for (ref{stag:vib:ODE2nd}):

!bt
\begin{equation}
u^{n+1} = 2u^n - u^{n-1} - \Delta t^2\omega^2 u^n,\ n=1,2,\ldots,
label{stag:vib:dODE2nd}
\end{equation}
!et
but for the first time step, the method for (ref{stag:vib:ODE2nd})
leads to

!bt
\begin{equation}
u^1= u^0 - \frac{1}{2}\Delta t^2\omega^2u^0,
\end{equation}
!et
while Euler-Cromer gives

!bt
\begin{equation}
u^1= u^0 - \Delta t^2\omega^2u^0,
\end{equation}
!et
which can be interpreted as a first-order, backward difference approximation
of $u'(0)=0$ combined with (ref{stag:vib:dODE2nd}). At later time steps,
however, the alternating use of forward and backward differences in
(ref{stag:vib:EulerCromer:dveq})-(ref{stag:vib:EulerCromer:dueq})
leads to a method with error $\Oof{\Delta t^2}$.





======= Exercises =======

===== Exercise: Use the forward-backward scheme with quadratic damping =====
label{vib:exer:quad:damping:fwbw}
file=vib_gen_bwdamping

We consider the generalized model with quadratic damping, expressed
as a system of two first-order equations as in Section ref{vib:ode2:staggered}:

!bt
\begin{align*}
u^{\prime} &= v,\\
v' &= \frac{1}{m}\left( F(t) - \beta |v|v - s(u)\right)\tp
\end{align*}
!et
However, contrary to what is done in Section ref{vib:ode2:staggered},
we want to apply the idea of a forward-backward discretization:
$u$ is marched forward by a one-sided Forward Euler scheme applied
to the first equation, and
thereafter $v$ can be marched forward by a Backward Euler scheme in the
second
% if BOOK == "book":
equation, see in Section ref{vib:model2x2:EulerCromer}.
% else:
equation.
% endif
Express the idea in operator notation and write out the
scheme. Unfortunately, the backward difference for the $v$ equation
creates a nonlinearity $|v^{n+1}|v^{n+1}$.  To linearize this
nonlinearity, use the known value $v^n$ inside the absolute value
factor, i.e., $|v^{n+1}|v^{n+1}\approx |v^n|v^{n+1}$.  Show that the
resulting scheme is equivalent to the one in Section
ref{vib:ode2:staggered} for some time level $n\geq 1$.

What we learn from this exercise is that the first-order differences
and the linearization trick play together in ``the right way'' such that
the scheme is as good as when we (in Section ref{vib:ode2:staggered})
carefully apply centered differences and a geometric mean on a
staggered mesh to achieve second-order accuracy.
% if BOOK == "book":
There is a
difference in the handling of the initial conditions, though, as
explained at the end of Section ref{vib:model2x2:EulerCromer}.
% endif


======= Partial differential equations =======

FIGURE: [fig-staggered/staggered_space, width=500 frac=0.8] Examples on mesh functions on a staggered mesh in space. label{staggered:wave:fig1}
