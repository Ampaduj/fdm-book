

There are so many excellent books on finite difference methods for
ordinary and partial differential equations that writing yet another
one requires a different view on the topic. The present book is not
so concerned with the traditional academic presentation of the topic,
but is focused at teaching the practitioner how to obtain reliable computations
involving finite difference methods. This focus is based on
a set of learning goals:

 o understanding of the ideas behind finite difference methods,
 o understanding how to transform an algorithm to a well-designed computer code,
 o understanding how to test (verify) the code,
 o understanding the potential artifacts in simulation results.

Compared to other textbooks, the present one has a particularly strong
emphasis on computer implementation and verification. It also has a
strong emphasis on an intuitive understanding of constructing finite
difference methods. To learn about the potential non-physical
artifacts of various methods, we study exact solutions of finite
difference schemes as these give deeper insight into the physical
behavior of the numerical methods than the traditional (and more
general) asymptotic error analysis. However, asymptotic results
regarding convergence rates are crucial for testing implementations.

Various pedagogical elements are utilized to reach the learning goals,
and these are commented upon next.

=== Simplify, understand, generalize ===

The book's overall pedagogical philosophy is the three-step process of
first *simplifying* the problem to something we can *understand* in
detail, and when that understanding is in place, we can *generalize*
and hopefully address real-world applications with a sound scientific
problem-solving approach.  For example, in the chapter on a particular
family of equations we first simplify the problem in question to a 1D,
constant-coefficient equation with simple boundary conditions. We
learn how to construct a finite difference method, how to implement
it, and how to understand the behavior of the numerical solution. Then
we can generalize to higher dimensions, variable coefficients, a
source term, and more complicated boundary conditions.
The solution of a complex problem is an assembly of elements that
are well understood in simpler settings.

=== Constructive mathematics ===

This text favors a constructive approach to mathematics. Instead of
a set of definitions followed by popping up a method, we emphasize how
to think about the construction of a method. The aim is to obtain a
good intuitive understanding of the mathematical methods.

The text is written in an easy-to-read style much inspired by the
following quote.

!bquote
*Some people think that stiff challenges are the best device to
induce learning, but I am not one of them. The natural way to learn
something is by spending vast amounts of easy, enjoyable time at it.
... The main thing to be said for stiff challenges is that inevitably
we will encounter them, so we had better learn to face them boldly.
Putting them in the curriculum can help teach us to do so. But for
teaching the skill or subject matter itself, they are overrated.*
Lloyd N. Trefethen, Applied Mathematician, 1955-.
!equote

Fundamental ideas and their associated scientific details are first
introduced for simple ordinary differential equations and then to the
largest possible extent reused later for partial differential
equations. With this approach, new concepts are introduced in the
simplest possible mathematical setting.  The text should therefore be
well suited for the undergraduate level. Calculus in one and multiple
variables are needed, likewise basic linear algebra, and it makes
the reading easier if one is somewhat familiar with ordinary and partial
differential and their applications, but this is not any requirement.

My experience is that ``vast amounts of easy, enjoyable time'' arises
when mathematics is implemented on a computer. The implementation
process triggers understanding, creativity, and curiosity.  Therefore,
it is important to make sure that the text contains enough information
for the reader to really learn the craft of programming the theory.


=== All nuts and bolts ===

Most books on numerical methods concentrate on the mathematics of the
subject while details on going from the mathematics to a computer
implementation are less in focus.  Nevertheless, many students find
the transition from a mathematical algorithm to a working code
difficult and spend a lot of time on ``programming issues''. A major
purpose of this text is therefore to help the practitioner by
providing *all nuts and bolts* necessary for safely going from the
mathematics to a well-designed and well-tested computer code. A
significant portion of the text is consequently devoted to programming
details.

=== Python as programming language ===

While MATLAB enjoys widespread popularity in books on numerical
methods, we have chosen to use the Python programming language. Python
is very similar to MATLAB, but contains a lot of modern software
engineering tools that have become standard in the software industry
and that should be adopted also for numerical computing
projects. Python is at present also experiencing an exponential growth
in popularity within the scientific computing community. One of the
book's goals is to present an up-to-date Python eco system for
implementing finite difference methods.

=== Program verification ===

Program testing, called *verification*, is a key topic of the book.
Good verification techniques are indispensable when debugging computer
code, but also fundamental for achieving reliable simulations.
Two verification techniques saturate the book: exact solution
of discrete equations (where the approximation vanishes) and
empirical estimation of convergence rates in problems with
exact (analytical or manufactured) solutions of the
differential equation(s).

=== Analysis via exact solutions of discrete equations ===

Traditional asymptotic analysis of errors is important for
verification of code using convergence rates, but gives a limited
understanding of how and why a correctly implemented numerical method
may give non-physical results. By developing exact solutions, usually
based on Fourier methods, of the discrete equations, one can obtain a
physical understanding of the behavior of a numerical method. This
approach is favored for analysis of methods in this book.

=== Code-inspired mathematical notation ===

Our aim is to have a clean and easy-to-read
computer, and we want a close one-to-one relationship between the
computer code and mathematical description of the algorithm.
This principle calls for a mathematical
notation that is governed by the natural
notation in the computer code.

# #ifdef FEM
The mathematical notation in this book is somewhat
different from the vast literature.
My aim is to introduce a mathematical notation that is as
close as possible to what we will implement in computer code.  That
is, the way we program dictates the way we write mathematical
formulas. The overall goal is to have as small distance as possible
between the mathematics and the code. This is principal goal of the
FEniCS project, and this book implements a similar goal also for
mathematically very simple problems. Essentially, we apply a
more classical notation when deriving methods, but then we
get rid of unnecessary indices and other types of
``cluttered notation'' that one would never use in code.
The minimization of indices in the resulting formulas also help
make the mathematical problem cleaner and clearer for students.
# #endif

=== Limited scope ===

The aim of this book is not to give an overview of a lot of methods
for a wide range of mathematical models.  Such information can be
found in numerous existing, more advanced books.  The aim is rather to
introduce basic concepts and a thorough understanding of how to think
about computing with finite difference methods.  We therefore go in
depth with only the most fundamental methods and equations.  However,
we have a multi-disciplinary scope and address the interplay of
mathematics, numerics, computer science, and physics.

=== Independent chapters ===

Most book authors are careful with avoiding repetitions of material.
The chapters in this book, however, contain some overlap, because I
want the chapters to meaningful on their own. Modern publishing
technology makes it easy to take selected chapters from different
books to make a new book tailored to a specific course.
The more a chapter builds on details in other chapters, the more
difficult it is to reuse chapters in new contexts. Also, most readers
find it convenient that the most important information is explicitly
stated, even if it was already met in another chapter.

=== Acknowledgments ===

 * Svein Linge
 * Daniel Alexander Mo SÃ¸reide Houshmand
 * Fatemeh Miri
 * Imran Ali
 * Shirin Fallahi
 * Anders Hafreager?
 * Mathilde?